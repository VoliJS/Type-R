{"version":3,"file":"index.js","sources":["../src/state.ts","../src/globalState.ts"],"sourcesContent":["import { useReducer, useRef, useEffect } from 'react'\nimport { Model, Collection, Transactional } from '@type-r/models'\n\n// Use model as local component state. Update the component when model changes.\nexport function useModel( Ctor : typeof Model ) : Model {\n    // Get the model instance.\n    const placeholder = useRef( null ),\n        instance = placeholder.current || ( placeholder.current = new Ctor() );\n\n    useChangesAndDispose( instance );\n\n    return instance;\n}\n\nexport const useCollection = {\n    of<M extends typeof Model>( Ctor : M ) : Collection<InstanceType<M>> {\n        // Get the model instance.\n        const placeholder = useRef( null ),\n            instance = placeholder.current || ( placeholder.current = new ( Collection.of( Ctor ) )() );\n    \n        useChangesAndDispose( instance );\n    \n        return instance;\n    },\n\n    ofRefs<M extends typeof Model>( Ctor : M ) : Collection<InstanceType<M>> {\n        // Get the model instance.\n        const placeholder = useRef( null ),\n            instance = placeholder.current || ( placeholder.current = new ( Collection.ofRefs( Ctor ) )() );\n    \n        useChangesAndDispose( instance );\n    \n        return instance;\n    },\n\n    subsetOf<C extends Collection>( collection : C ) : C {\n        const placeholder = useRef( null ),\n        instance = placeholder.current || ( placeholder.current = collection.createSubset([]) );\n\n        useChangesAndDispose( instance );\n\n        return instance;\n    }\n}\n\nfunction useChangesAndDispose( instance : Transactional ){\n    const forceUpdate = useForceUpdate();\n\n    useEffect( () => {\n        instance.onChanges( forceUpdate );\n        return () => instance.dispose();\n    }, emptyArray );\n}\n\nconst emptyArray = [];\n\nexport function useForceUpdate(){\n    return useReducer( transactionalUpdate, null )[ 1 ];\n}\n\nfunction transactionalUpdate( _changeToken : object, modelOrCollection : Transactional ){\n    return ( modelOrCollection as any )._changeToken;\n}\n","import { useEffect } from 'react'\nimport { useForceUpdate } from './state'\nimport { Transactional } from '@type-r/models';\n\n// Force component update when some global model or collection change.\nexport function useChanges( instance : Transactional ){\n    const forceUpdate = useForceUpdate();\n\n    useEffect( () => {\n        instance.onChanges( forceUpdate );\n        return () => instance.offChanges( forceUpdate );\n    }, emptyArray );\n}\n\nconst emptyArray = [];"],"names":["useCollection","of","Ctor","placeholder","useRef","instance","current","Collection","useChangesAndDispose","ofRefs","subsetOf","collection","createSubset","forceUpdate","useForceUpdate","useEffect","onChanges","dispose","emptyArray","useReducer","transactionalUpdate","_changeToken","modelOrCollection","offChanges"],"mappings":"gSAcaA,EAAgB,CACzBC,GAAA,SAA4BC,GAExB,IAAMC,EAAcC,SAAQ,MACxBC,EAAWF,EAAYG,UAAaH,EAAYG,QAAU,IAAMC,aAAWN,GAAIC,KAInF,OAFAM,EAAsBH,GAEfA,GAGXI,OAAA,SAAgCP,GAE5B,IAAMC,EAAcC,SAAQ,MACxBC,EAAWF,EAAYG,UAAaH,EAAYG,QAAU,IAAMC,aAAWE,OAAQP,KAIvF,OAFAM,EAAsBH,GAEfA,GAGXK,SAAA,SAAgCC,GAC5B,IAAMR,EAAcC,SAAQ,MAC5BC,EAAWF,EAAYG,UAAaH,EAAYG,QAAUK,EAAWC,aAAa,KAIlF,OAFAJ,EAAsBH,GAEfA,IAIf,SAASG,EAAsBH,GAC3B,IAAMQ,EAAcC,IAEpBC,YAAW,WAEP,OADAV,EAASW,UAAWH,GACb,WAAM,OAAAR,EAASY,YACvBC,GAGP,IAAMA,EAAa,YAEHJ,IACZ,OAAOK,aAAYC,EAAqB,MAAQ,GAGpD,SAASA,EAAqBC,EAAuBC,GACjD,OAASA,EAA2BD,aC/CxC,IAAMH,EAAa,yBATSb,GACxB,IAAMQ,EAAcC,IAEpBC,YAAW,WAEP,OADAV,EAASW,UAAWH,GACb,WAAM,OAAAR,EAASkB,WAAYV,KACnCK,6DDPmBhB,GAEtB,IAAMC,EAAcC,SAAQ,MACxBC,EAAWF,EAAYG,UAAaH,EAAYG,QAAU,IAAIJ,GAIlE,OAFAM,EAAsBH,GAEfA"}