{"version":3,"file":"index.js","sources":["../src/state.ts","../src/globalState.ts"],"sourcesContent":["import { useReducer, useRef, useEffect } from 'react'\nimport { Model, Collection, Transactional } from '@type-r/models'\n\nexport const useModel : <M extends typeof Model>( Ctor : M ) => InstanceType<M> = mutableHook( Model => new Mutable( new Model ) );\n\nexport interface CollectionHooks {\n    of<M extends typeof Model>( Ctor : M ) : Collection<InstanceType<M>>\n    ofRefs<M extends typeof Model>( Ctor : M ) : Collection<InstanceType<M>>\n    subsetOf<C extends Collection>( collection : C ) : C\n}\n\nexport const useCollection : CollectionHooks = {\n    of : mutableHook( Model => new Mutable( new ( Collection.of( Model ) )() ) ),\n    ofRefs : mutableHook( Model => new Mutable( new ( Collection.ofRefs( Model ) )() ) ),\n    subsetOf : mutableHook( collection => new Mutable( collection.createSubset([]) ) )\n}\n\nclass Mutable {\n    _onChildrenChange : Function = void 0\n\n    getStore(){\n        return ( this.value as any )._defaultStore;\n    }\n\n    constructor(\n        public value : Transactional\n    ){\n        (value as any)._owner = this;\n        (value as any)._ownerKey || ( (value as any)._ownerKey = 'reactState' );\n    }\n}\n\nfunction mutableReducer( mutable : Mutable ){\n    const copy = new Mutable( mutable.value );\n    copy._onChildrenChange = mutable._onChildrenChange;\n    return copy;\n}\n\nfunction mutableHook( create : ( x : any ) => Mutable ) : any {\n    return ( init : any ) : Transactional => {\n        // Get the model instance.\n        const [ mutable, forceUpdate ] = useReducer( mutableReducer, init, create );\n\n        // TODO: mutable.store = useContext( Store )???\n    \n        useEffect( () => {\n            mutable._onChildrenChange = forceUpdate;\n            return () => mutable.value.dispose();\n        }, emptyArray );\n    \n        return mutable.value as any;\n    }\n}\n\nconst emptyArray = [];","import { useEffect, useReducer } from 'react'\nimport { Transactional } from '@type-r/models';\n\n// Force component update when some global model or collection change.\nexport function useChanges( instance : Transactional ){\n    const forceUpdate = useForceUpdate();\n\n    useEffect( () => {\n        instance.onChanges( forceUpdate );\n        return () => instance.offChanges( forceUpdate );\n    }, emptyArray );\n}\n\nconst emptyArray = [];\n\nexport function useForceUpdate(){\n    return useReducer( transactionalUpdate, null )[ 1 ];\n}\n\nfunction transactionalUpdate( _changeToken : object, modelOrCollection : Transactional ){\n    return ( modelOrCollection as any )._changeToken;\n}"],"names":["useModel","mutableHook","Model","Mutable","useCollection","of","Collection","ofRefs","subsetOf","collection","createSubset","this","value","_defaultStore","_owner","_ownerKey","mutableReducer","mutable","copy","_onChildrenChange","create","init","_a","forceUpdate","useEffect","dispose","emptyArray","useForceUpdate","useReducer","transactionalUpdate","_changeToken","modelOrCollection","instance","onChanges","offChanges"],"mappings":"gSAGaA,EAAqEC,EAAa,SAAAC,GAAS,OAAA,IAAIC,EAAS,IAAID,KAQ5GE,EAAkC,CAC3CC,GAAKJ,EAAa,SAAAC,GAAS,OAAA,IAAIC,EAAS,IAAMG,aAAWD,GAAIH,OAC7DK,OAASN,EAAa,SAAAC,GAAS,OAAA,IAAIC,EAAS,IAAMG,aAAWC,OAAQL,OACrEM,SAAWP,EAAa,SAAAQ,GAAc,OAAA,IAAIN,EAASM,EAAWC,aAAa,WAM3EP,qBAAA,WACI,OAASQ,KAAKC,MAAeC,kBAGjC,WACWD,GAAAD,WAAAC,EAPXD,4BAA+B,EAS1BC,EAAcE,OAASH,KACvBC,EAAcG,YAAgBH,EAAcG,UAAY,cAIjE,SAASC,EAAgBC,GACrB,IAAMC,EAAO,IAAIf,EAASc,EAAQL,OAElC,OADAM,EAAKC,kBAAoBF,EAAQE,kBAC1BD,EAGX,SAASjB,EAAamB,GAClB,OAAO,SAAEC,GAEC,IAAAC,sBAAEL,OAASM,OASjB,OALAC,YAAW,WAEP,OADAP,EAAQE,kBAAoBI,EACrB,WAAM,OAAAN,EAAQL,MAAMa,YAC5BC,GAEIT,EAAQL,OAIvB,IAAMc,EAAa,GCzCnB,IAAMA,EAAa,YAEHC,IACZ,OAAOC,aAAYC,EAAqB,MAAQ,GAGpD,SAASA,EAAqBC,EAAuBC,GACjD,OAASA,EAA2BD,mCAhBZE,GACxB,IAAMT,EAAcI,IAEpBH,YAAW,WAEP,OADAQ,EAASC,UAAWV,GACb,WAAM,OAAAS,EAASE,WAAYX,KACnCG"}