{"version":3,"file":"index.js","sources":["../src/object-plus/tools.ts","../src/object-plus/eventsource.ts","../node_modules/tslib/tslib.es6.js","../src/object-plus/mixins.ts","../src/object-plus/events.ts","../src/object-plus/logging.ts","../src/io-tools.ts","../src/traversable.ts","../src/validation.ts","../src/transactions.ts","../src/record/updates.ts","../src/record/metatypes/any.ts","../src/record/metatypes/basic.ts","../src/record/metatypes/date.ts","../src/record/metatypes/owned.ts","../src/record/metatypes/shared.ts","../src/record/metatypes/index.ts","../src/record/attrDef.ts","../src/record/mixin.ts","../src/record/io-mixin.ts","../src/record/record.ts","../src/record/index.ts","../src/collection/commons.ts","../src/collection/add.ts","../src/collection/remove.ts","../src/collection/set.ts","../src/collection/arrayMethods.ts","../src/collection/index.ts","../src/relations/commons.ts","../src/relations/from.ts","../src/relations/subsetOf.ts","../src/relations/store.ts","../src/index.ts"],"sourcesContent":[" /** Similar to underscore `_.defaults` */\r\nexport function defaults< T >( dest : T, ...sources : Object[] ) : T\r\nexport function defaults< T >( dest : T, source : Object ) : T {\r\n    for( var name in source ) {\r\n        if( source.hasOwnProperty( name ) && !dest.hasOwnProperty( name ) ) {\r\n            dest[ name ] = source[ name ];\r\n        }\r\n    }\r\n\r\n    if( arguments.length > 2 ){\r\n        for( let i = 2; i < arguments.length; i++ ){\r\n            const other = arguments[ i ];\r\n            other && defaults( dest, other );\r\n        }\r\n    }\r\n\r\n    return dest;\r\n}\r\n\r\n/** Check if value is raw JSON */\r\nexport function isValidJSON( value : any ) : boolean {\r\n    if( value === null ){\r\n        return true;\r\n    }\r\n\r\n    switch( typeof value ){\r\n    case 'number' :\r\n    case 'string' :\r\n    case 'boolean' :\r\n        return true;\r\n\r\n    case 'object':\r\n        var proto = Object.getPrototypeOf( value );\r\n\r\n        if( proto === Object.prototype || proto === Array.prototype ){\r\n            return every( value, isValidJSON );\r\n        }\r\n    }\r\n\r\n    return false;\r\n}\r\n\r\n/** Get the base class constructor function.\r\n * @param Class Subclass constructor function.\r\n * @returns Base class constructor function.\r\n */\r\nexport function getBaseClass( Class : Function ) {\r\n    return Object.getPrototypeOf( Class.prototype ).constructor\r\n}\r\n\r\nexport function assignToClassProto<T, K extends keyof T>( Class, definition : T, ...names : K[] ) : void {\r\n    for( let name of names ){\r\n        const value = definition[ name ];\r\n        value === void 0 || ( Class.prototype[ name ] = value );\r\n    }\r\n}\r\n\r\n/** Checks whenever given object is an empty hash `{}` */\r\nexport function isEmpty( obj : {} ) : boolean {\r\n    if( obj ){\r\n        for( let key in obj ){\r\n            if( obj.hasOwnProperty( key ) ){\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nexport type Iteratee = ( value : any, key? : string | number ) => any;\r\n\r\n/** @hidden */\r\nfunction someArray( arr : any[], fun : Iteratee ) : any {\r\n    let result;\r\n\r\n    for( let i = 0; i < arr.length; i++ ){\r\n        if( result = fun( arr[ i ], i ) ){\r\n            return result;\r\n        }\r\n    }\r\n}\r\n\r\n/** @hidden */\r\nfunction someObject( obj : {}, fun : Iteratee ) : any {\r\n    let result;\r\n\r\n    for( let key in obj ){\r\n        if( obj.hasOwnProperty( key ) ){\r\n            if( result = fun( obj[ key ], key ) ){\r\n                return result;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/** Similar to underscore `_.some` */\r\nexport function some( obj, fun : Iteratee ) : any {\r\n    if( Object.getPrototypeOf( obj ) === ArrayProto ){\r\n        return someArray( obj, fun );\r\n    }\r\n    else{\r\n        return someObject( obj, fun );\r\n    }\r\n}\r\n\r\n/** Similar to underscore `_.every` */\r\nexport function every( obj : { }, predicate : Iteratee ) : boolean {\r\n    return !some( obj, x => !predicate( x ) );\r\n}\r\n\r\n/** Similar to `getOwnPropertyDescriptor`, but traverse the whole prototype chain. */\r\nexport function getPropertyDescriptor( obj : {}, prop : string ) : PropertyDescriptor {\r\n    let desc : PropertyDescriptor;\r\n\r\n    for( let proto = obj; !desc && proto; proto = Object.getPrototypeOf( proto ) ) {\r\n        desc = Object.getOwnPropertyDescriptor( proto, prop );\r\n    }\r\n\r\n    return desc;\r\n}\r\n\r\n/** Similar to underscore `_.omit` */\r\nexport function omit( source : {}, ...rest : string[] ) : {}\r\nexport function omit( source ) : {} {\r\n    const dest = {}, discard = {};\r\n\r\n    for( let i = 1; i < arguments.length; i ++ ){\r\n        discard[ arguments[ i ] ] = true;\r\n    }\r\n\r\n    for( var name in source ) {\r\n        if( !discard.hasOwnProperty( name ) && source.hasOwnProperty( name ) ) {\r\n            dest[ name ] = source[ name ];\r\n        }\r\n    }\r\n\r\n    return dest;\r\n}\r\n\r\n/** map `source` object properties with a given function, and assign the result to the `dest` object.\r\n * When `fun` returns `undefined`, skip this value. \r\n */\r\nexport function transform< A, B >( dest : { [ key : string ] : A }, source : { [ key : string ] : B }, fun : ( value : B, key : string ) => A | void ) : { [ key : string ] : A } {\r\n    for( var name in source ) {\r\n        if( source.hasOwnProperty( name ) ) {\r\n            var value = fun( source[ name ], name );\r\n            value === void 0 || ( dest[ name ] = < A >value );\r\n        }\r\n    }\r\n\r\n    return dest;\r\n}\r\n\r\n/** @hidden */\r\nexport function fastAssign< A >( dest : A, source : {} ) : A {\r\n    for( var name in source ) {\r\n        dest[ name ] = source[ name ];\r\n    }\r\n\r\n    return dest;\r\n}\r\n\r\n/** @hidden */\r\nexport function fastDefaults< A >( dest : A, source : {} ) : A {\r\n    for( var name in source ) {\r\n        if( dest[ name ] === void 0 ){\r\n            dest[ name ] = source[ name ];\r\n        }\r\n    }\r\n\r\n    return dest;\r\n}\r\n\r\n/** Similar to underscore `_.extend` and `Object.assign` */\r\nexport function assign< T >( dest : T, ...sources : Object[] ) : T\r\nexport function assign< T >( dest : T, source : Object ) : T {\r\n    for( var name in source ) {\r\n        if( source.hasOwnProperty( name ) ) {\r\n            dest[ name ] = source[ name ];\r\n        }\r\n    }\r\n\r\n    if( arguments.length > 2 ){\r\n        for( let i = 2; i < arguments.length; i++ ){\r\n            const other = arguments[ i ];\r\n            other && assign( dest, other );\r\n        }\r\n    }\r\n\r\n    return dest;\r\n}\r\n\r\n/** Similar to underscore `_.keys` */\r\nexport function keys( o : any ) : string[]{\r\n    return o ? Object.keys( o ) : [];\r\n}\r\n\r\n/** Similar to underscore `_.once` */\r\nexport function once( func : Function ) : Function {\r\n    var memo, first = true;\r\n    return function() {\r\n        if ( first ) {\r\n            first = false;\r\n            memo = func.apply(this, arguments);\r\n            func = null;\r\n        }\r\n        return memo;\r\n    };\r\n}\r\n\r\n/** @hidden */\r\nconst ArrayProto = Array.prototype,\r\n      DateProto = Date.prototype,\r\n      ObjectProto = Object.prototype;\r\n\r\n/**\r\n * Determine whenever two values are not equal, deeply traversing \r\n * arrays and plain JS objects (hashes). Dates are compared by enclosed timestamps, all other\r\n * values are compared with strict comparison.\r\n */\r\nexport function notEqual( a : any, b : any) : boolean {\r\n    if( a === b ) return false;\r\n\r\n    if( a && b && typeof a == 'object' && typeof b == 'object' ) {\r\n        const protoA = Object.getPrototypeOf( a );\r\n\r\n        if( protoA !== Object.getPrototypeOf( b ) ) return true;\r\n\r\n        switch( protoA ){\r\n            case DateProto   : return +a !== +b;\r\n            case ArrayProto  : return arraysNotEqual( a, b );\r\n            case ObjectProto :\r\n            case null:\r\n                return objectsNotEqual( a, b );\r\n        }\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\n/** @hidden */\r\nfunction objectsNotEqual( a, b ) {\r\n    const keysA = Object.keys( a );\r\n\r\n    if( keysA.length !== Object.keys( b ).length ) return true;\r\n\r\n    for( let i = 0; i < keysA.length; i++ ) {\r\n        const key = keysA[ i ];\r\n\r\n        if( !b.hasOwnProperty( key ) || notEqual( a[ key ], b[ key ] ) ) {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    return false;\r\n}\r\n\r\n/** @hidden */\r\nfunction arraysNotEqual( a, b ) {\r\n    if( a.length !== b.length ) return true;\r\n\r\n    for( let i = 0; i < a.length; i++ ) {\r\n        if( notEqual( a[ i ], b[ i ] ) ) return true;\r\n    }\r\n\r\n    return false;\r\n}\r\n\r\n/**\r\n * Create an object without Object prototype members except hasOwnProperty.\r\n * @param obj - optional parameter to populate the hash map from.\r\n */\r\nconst HashProto = Object.create( null );\r\nHashProto.hasOwnProperty = ObjectProto.hasOwnProperty;\r\n\r\nexport function hashMap( obj? ){\r\n    const hash = Object.create( HashProto );\r\n    return obj ? assign( hash, obj ) : hash;\r\n}","import { once as _once } from './tools'\r\n\r\n/*******************\r\n * Prebuilt events map, used for optimized bulk event subscriptions.\r\n *\r\n * const events = new EventMap({\r\n *      'change' : true, // Resend this event from self as it is.\r\n *      'change:attr' : 'localTargetFunction',\r\n *      'executedInTargetContext' : function(){ ... }\r\n *      'executedInNativeContext' : '^props.handler'\r\n * })\r\n */\r\n/** @hidden */\r\nexport interface EventsDefinition {\r\n    [ events : string ] : Function | string | boolean\r\n}\r\n\r\n/** @hidden */\r\nexport class EventMap {\r\n    handlers : EventDescriptor[] = [];\r\n\r\n    constructor( map? : EventsDefinition | EventMap ){\r\n        if( map ){\r\n            if( map instanceof EventMap ){\r\n                this.handlers = map.handlers.slice();\r\n            }\r\n            else{\r\n                map && this.addEventsMap( map );\r\n            }\r\n        }\r\n    }\r\n\r\n    merge( map : EventMap ){\r\n        this.handlers = this.handlers.concat( map.handlers );\r\n    }\r\n\r\n    addEventsMap( map : EventsDefinition ){\r\n        for( let names in map ){\r\n            this.addEvent( names, map[ names ] )\r\n        }\r\n    }\r\n\r\n    bubbleEvents( names : string ){\r\n        for( let name of names.split( eventSplitter ) ){\r\n            this.addEvent( name, getBubblingHandler( name ) );\r\n        }\r\n    }\r\n\r\n    addEvent( names : string, callback : Function | string | boolean ){\r\n        const { handlers } = this;\r\n\r\n        for( let name of names.split( eventSplitter ) ){\r\n            handlers.push( new EventDescriptor( name, callback ) );\r\n        }\r\n    }\r\n\r\n    subscribe( target : {}, source : EventSource ){\r\n        for( let event of this.handlers ){\r\n            on( source, event.name, event.callback, target );\r\n        }\r\n    }\r\n\r\n    unsubscribe( target : {}, source : EventSource ){\r\n        for( let event of this.handlers ){\r\n            off( source, event.name, event.callback, target );\r\n        }\r\n    }\r\n}\r\n\r\n/** @hidden */\r\nexport class EventDescriptor {\r\n    callback : Function\r\n\r\n    constructor(\r\n        public name : string,\r\n        callback : Function | string | boolean\r\n    ){\r\n        if( callback === true ){\r\n            this.callback = getBubblingHandler( name );\r\n        }\r\n        else if( typeof callback === 'string' ){\r\n            this.callback =\r\n                function localCallback(){\r\n                    const handler = this[ callback ];\r\n                    handler && handler.apply( this, arguments );\r\n                };\r\n        }\r\n        else{\r\n            this.callback = <Function>callback;\r\n        }\r\n    }\r\n}\r\n\r\n/** @hidden */\r\nconst _bubblingHandlers = {};\r\n\r\n/** @hidden */\r\nfunction getBubblingHandler( event : string ){\r\n    return _bubblingHandlers[ event ] || (\r\n        _bubblingHandlers[ event ] = function( a?, b?, c?, d?, e? ){\r\n            if( d !== void 0 || e !== void 0 ) trigger5( this, event, a, b, c, d, e );\r\n            if( c !== void 0 ) trigger3( this, event, a, b, c );\r\n            else trigger2( this, event, a, b );\r\n        }\r\n    );\r\n}\r\n\r\n/** @hidden */\r\nexport interface HandlersByEvent {\r\n    [ name : string ] : EventHandler\r\n}\r\n\r\n/** @hidden */\r\nexport class EventHandler {\r\n    constructor( public callback : Callback, public context : any, public next = null ){}\r\n}\r\n\r\n/** @hidden */\r\nfunction listOff( _events : HandlersByEvent, name : string, callback : Callback, context : any ){\r\n    const head = _events[ name ];\r\n\r\n    let filteredHead, prev;\r\n\r\n    for( let ev = head; ev; ev = ev.next ){\r\n        // Element must be kept\r\n        if( ( callback && callback !== ev.callback && callback !== ev.callback._callback ) ||\r\n            ( context && context !== ev.context ) ){\r\n            \r\n            prev = ev;\r\n            filteredHead || ( filteredHead = ev );\r\n        }\r\n        // Element must be skipped\r\n        else{\r\n            if( prev ) prev.next = ev.next;\r\n        }\r\n    }\r\n\r\n    if( head !== filteredHead ) _events[ name ] = filteredHead;\r\n}\r\n\r\n/** @hidden */\r\nfunction listSend2( head : EventHandler, a, b ){\r\n    for( let ev = head; ev; ev = ev.next ) ev.callback.call( ev.context, a, b );\r\n}\r\n\r\n/** @hidden */\r\nfunction listSend3( head : EventHandler, a, b, c ){\r\n    for( let ev = head; ev; ev = ev.next ) ev.callback.call( ev.context, a, b, c );\r\n}\r\n\r\n/** @hidden */\r\nfunction listSend4( head : EventHandler, a, b, c, d ){\r\n    for( let ev = head; ev; ev = ev.next ) ev.callback.call( ev.context, a, b, c, d );\r\n}\r\n\r\n/** @hidden */\r\nfunction listSend5( head : EventHandler, a, b, c, d, e ){\r\n    for( let ev = head; ev; ev = ev.next ) ev.callback.call( ev.context, a, b, c, d, e );\r\n}\r\n\r\n/** @hidden */\r\nfunction listSend6( head : EventHandler, a, b, c, d, e, f ){\r\n    for( let ev = head; ev; ev = ev.next ) ev.callback.call( ev.context, a, b, c, d, e, f );\r\n}\r\n\r\n/** @hidden */\r\nexport interface Callback extends Function {\r\n    _callback? : Function\r\n}\r\n\r\n/** @hidden */\r\nexport function on( source : EventSource, name : string, callback : Callback, context? : any ) : void {\r\n    if( callback ){\r\n        const _events = source._events || ( source._events = Object.create( null ) );\r\n        _events[ name ] = new EventHandler( callback, context, _events[ name ] );\r\n    }\r\n}\r\n\r\n/** @hidden */\r\nexport function once( source : EventSource, name : string, callback : Callback, context? : any ) : void {\r\n    if( callback ){\r\n        const once : Callback = _once( function(){\r\n            off( source, name, once );\r\n            callback.apply(this, arguments);\r\n        });\r\n\r\n        once._callback = callback;\r\n        on( source, name, once, context );\r\n    }\r\n}\r\n\r\n/** @hidden */\r\nexport function off( source : EventSource, name? : string, callback? : Callback, context? : any ) : void {\r\n    const { _events } = source;\r\n    if( _events ){\r\n        if( callback || context ) {\r\n            if( name ){\r\n                listOff( _events, name, callback, context );\r\n            }\r\n            else{\r\n                for( let name in _events ){\r\n                    listOff( _events, name, callback, context );\r\n                }\r\n            }\r\n        }\r\n        else if( name ){\r\n            _events[ name ] = void 0;\r\n        }\r\n        else{\r\n            source._events = void 0;\r\n        }\r\n    }\r\n}\r\n\r\n/** @hidden */\r\nexport interface EventSource {\r\n    _events : HandlersByEvent\r\n}\r\n\r\n/** @hidden */\r\nconst eventSplitter = /\\s+/;\r\n\r\n/** @hidden */\r\nexport function strings( api : ApiEntry, source : EventSource, events : string, callback : Callback, context ){\r\n    if( eventSplitter.test( events ) ){\r\n        const names = events.split( eventSplitter );\r\n        for( let name of names ) api( source, name, callback, context );\r\n    }\r\n    else api( source, events, callback, context );\r\n}\r\n\r\n/** @hidden */\r\nexport type ApiEntry = ( source : EventSource, event : string, callback : Callback, context? : any ) => void\r\n\r\n/*********************************\r\n * Event-triggering API\r\n */\r\n\r\n/** @hidden */\r\nexport function trigger2( self : EventSource, name : string, a, b ) : void {\r\n    const { _events } = self;\r\n    if( _events ){\r\n        const queue = _events[ name ],\r\n            { all } = _events;\r\n\r\n        listSend2( queue, a, b );\r\n        listSend3( all, name, a, b );\r\n    }\r\n};\r\n\r\n/** @hidden */\r\nexport function trigger3( self : EventSource, name : string, a, b, c ) : void{\r\n    const { _events } = self;\r\n    if( _events ){\r\n        const queue = _events[ name ],\r\n            { all } = _events;\r\n\r\n        listSend3( queue, a, b, c );\r\n        listSend4( all, name, a, b, c );\r\n    }\r\n};\r\n\r\n/** @hidden */\r\nexport function trigger5( self : EventSource, name : string, a, b, c, d, e ) : void{\r\n    const { _events } = self;\r\n    if( _events ){\r\n        const queue = _events[ name ],\r\n            { all } = _events;\r\n\r\n        listSend5( queue, a, b, c, d, e );\r\n        listSend6( all, name, a, b, c, d, e );\r\n    }\r\n};","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/*****************************************************************\r\n * Mixins engine and @define metaprogramming class extensions\r\n *\r\n * Vlad Balin & Volicon, (c) 2016-2017\r\n */\r\nimport { __extends } from 'tslib';\r\nimport { assign, defaults, getBaseClass, hashMap, transform } from './tools';\r\n\r\nexport interface Subclass< T > extends MixableConstructor {\r\n    new ( ...args ) : T\r\n    prototype : T\r\n}\r\n\r\nexport interface MixableConstructor extends Function{\r\n    __super__? : object;\r\n    mixins? : MixinsState;\r\n    onExtend? : ( BaseClass : Function ) => void;\r\n    onDefine? : ( definition : object, BaseClass : Function ) => void;\r\n    define? : ( definition? : object, statics? : object ) => MixableConstructor;\r\n    extend? : <T extends object>( definition? : T, statics? : object ) => Subclass<T>;\r\n}\r\n\r\nexport interface MixableDefinition {\r\n    mixins? : Mixin[]\r\n}\r\n\r\n/**\r\n * Base class, holding metaprogramming class extensions.\r\n * Supports mixins and Class.define metaprogramming method.\r\n */\r\nexport class Mixable {\r\n    static onExtend : ( BaseClass : Function ) => void;\r\n    static onDefine : ( definition : object, BaseClass : Function ) => object;    \r\n    static __super__ : object\r\n    static mixins : MixinsState;\r\n\r\n    /** \r\n     *  Must be called after inheritance and before 'define'.\r\n     */\r\n    static define( protoProps : MixableDefinition = {}, staticProps? : object ) : MixableConstructor {\r\n        const BaseClass : MixableConstructor = getBaseClass( this );\r\n\r\n        // Assign statics.\r\n        staticProps && assign( this, staticProps );\r\n\r\n        // Extract and apply mixins from the definition.\r\n        const { mixins, ...defineMixin } = protoProps;\r\n        mixins && this.mixins.merge( mixins );\r\n\r\n        // Unshift definition to the the prototype.\r\n        this.mixins.mergeObject( this.prototype, defineMixin, true );\r\n\r\n        // Unshift definition from statics to the prototype.\r\n        this.mixins.mergeObject( this.prototype, this.mixins.getStaticDefinitions( BaseClass ), true );\r\n\r\n        // Call onDefine hook, if it's present.\r\n        this.onDefine && this.onDefine( this.mixins.definitions, BaseClass );\r\n        \r\n        // Apply merge rules to inherited members. No mixins can be added after this point.\r\n        this.mixins.mergeInheritedMembers( BaseClass );\r\n\r\n        return this;\r\n    }\r\n\r\n    /** Backbone-compatible extend method to be used in ES5 and for backward compatibility */\r\n    static extend< T extends object>(spec? : T, statics? : {} ) : Subclass< T > {\r\n        let TheSubclass : Subclass< T >;\r\n\r\n        // 1. Create the subclass (ES5 compatibility shim).\r\n        // If constructor function is given...\r\n        if( spec && spec.hasOwnProperty( 'constructor' ) ){\r\n            // ...we need to manually call internal TypeScript __extend function. Hack! Hack!\r\n            TheSubclass = spec.constructor as any;\r\n            __extends( TheSubclass, this );\r\n        }\r\n        // Otherwise, create the subclall in usual way.\r\n        else{\r\n            TheSubclass = class Subclass extends this {} as any;\r\n        }\r\n\r\n        predefine( TheSubclass );\r\n        spec && TheSubclass.define( spec, statics );\r\n\r\n        return TheSubclass;\r\n    }\r\n}\r\n\r\n/** @decorator `@predefine` for forward definitions. Can be used with [[Mixable]] classes only.\r\n * Forwards the call to the [[Mixable.predefine]];\r\n */\r\nexport function predefine( Constructor : MixableConstructor ) : void {\r\n    const BaseClass : MixableConstructor = getBaseClass( Constructor );\r\n\r\n    // Legacy systems support\r\n    Constructor.__super__ = BaseClass.prototype;\r\n    \r\n    // Initialize mixins structures...\r\n    Constructor.define || MixinsState.get( Mixable ).populate( Constructor );\r\n\r\n    // Make sure Ctor.mixins are ready before the callback...\r\n    MixinsState.get( Constructor );\r\n\r\n    // Call extend hook.\r\n    Constructor.onExtend && Constructor.onExtend( BaseClass );\r\n}\r\n\r\n/** @decorator `@define` for metaprogramming magic. Can be used with [[Mixable]] classes only.\r\n *  Forwards the call to [[Mixable.define]].\r\n */\r\nexport function define( ClassOrDefinition : Function ) : void;\r\nexport function define( ClassOrDefinition : object ) : ClassDecorator;\r\nexport function define( ClassOrDefinition : object | MixableConstructor ){\r\n    // @define class\r\n    if( typeof ClassOrDefinition === 'function' ){\r\n        predefine( ClassOrDefinition );\r\n        ( ClassOrDefinition as MixableConstructor ).define();\r\n    }\r\n    // @define({ prop : val, ... }) class\r\n    else{\r\n        return function( Ctor : MixableConstructor ){\r\n            predefine( Ctor );\r\n            Ctor.define( ClassOrDefinition );\r\n        } as any;\r\n    }\r\n}\r\n\r\nexport function definitions( rules : MixinMergeRules ) : ClassDecorator {\r\n    return ( Class : Function ) => {\r\n        const mixins = MixinsState.get( Class );\r\n        mixins.definitionRules = defaults( hashMap(), rules, mixins.definitionRules );\r\n    }\r\n}\r\n\r\n// Create simple property list decorator\r\nexport function propertyListDecorator( listName: string ) : PropertyDecorator {\r\n    return function propList(proto, name : string) {\r\n        const list = proto.hasOwnProperty( listName ) ?\r\n            proto[ listName ] : (proto[ listName ] = (proto[ listName ] || []).slice());  \r\n\r\n        list.push(name);\r\n    }\r\n}\r\n\r\nexport function definitionDecorator( definitionKey, value ){\r\n    return ( proto : object, name : string ) => {\r\n        MixinsState\r\n            .get( proto.constructor )\r\n            .mergeObject( proto, {\r\n                [ definitionKey ] : {\r\n                    [ name ] : value\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\nexport class MixinsState {\r\n    mergeRules : MixinMergeRules;\r\n    definitionRules : MixinMergeRules;\r\n    definitions : object = {};\r\n    appliedMixins : Mixin[];\r\n\r\n    // Return mixins state for the class. Initialize if it's not exist.\r\n    static get( Class ) : MixinsState {\r\n        const { mixins } = Class;\r\n    \r\n        return mixins && Class === mixins.Class ? mixins :\r\n             Class.mixins = new MixinsState( Class );\r\n    }\r\n\r\n    constructor( public Class : MixableConstructor ){\r\n        const { mixins } = getBaseClass( Class );\r\n\r\n        this.mergeRules = ( mixins && mixins.mergeRules ) || hashMap();\r\n        this.definitionRules = ( mixins && mixins.definitionRules ) || hashMap();\r\n        this.appliedMixins = ( mixins && mixins.appliedMixins ) || [];\r\n    }\r\n\r\n    getStaticDefinitions( BaseClass : Function ){\r\n        const definitions = hashMap(),\r\n            { Class } = this;\r\n\r\n        return transform( definitions, this.definitionRules, ( rule, name ) =>{\r\n            if( BaseClass[ name ] !== Class[ name ]){\r\n                return Class[ name ];\r\n            }\r\n        });\r\n    }\r\n\r\n    merge( mixins : Mixin[] ){\r\n        const proto      = this.Class.prototype,\r\n            { mergeRules } = this;\r\n\r\n        // Copy applied mixins array as it's going to be updated.\r\n        const appliedMixins = this.appliedMixins = this.appliedMixins.slice();\r\n\r\n        // Apply mixins in sequence...\r\n        for( let mixin of mixins ) {\r\n            // Mixins array should be flattened.\r\n            if( Array.isArray( mixin ) ) {\r\n                this.merge( mixin );\r\n            }\r\n            // Don't apply mixins twice.\r\n            else if( appliedMixins.indexOf( mixin ) < 0 ){\r\n                appliedMixins.push( mixin );\r\n\r\n                // For constructors, merge _both_ static and prototype members.\r\n                if( typeof mixin === 'function' ){\r\n                    // Merge static members\r\n                    this.mergeObject( this.Class, mixin );\r\n\r\n                    // merge definitionRules and mergeRules\r\n                    const sourceMixins = ( mixin as any ).mixins;\r\n                    if( sourceMixins ){\r\n                        this.mergeRules = defaults( hashMap(), this.mergeRules, sourceMixins.mergeRules );\r\n                        this.definitionRules = defaults( hashMap(), this.definitionRules, sourceMixins.definitionRules );\r\n                        this.appliedMixins = this.appliedMixins.concat( sourceMixins.appliedMixins );\r\n                    }\r\n\r\n                    // Prototypes are merged according with rules.\r\n                    this.mergeObject( proto, mixin.prototype );\r\n                }\r\n                // Handle plain object mixins.\r\n                else {\r\n                    this.mergeObject( proto, mixin );\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    populate( ...ctors : Function[] ){\r\n        for( let Ctor of ctors ) {\r\n            MixinsState.get( Ctor ).merge([ this.Class ]);\r\n        }\r\n    }\r\n\r\n    mergeObject( dest : object, source : object, unshift? : boolean ) {\r\n        forEachOwnProp( source, name => {\r\n            const sourceProp = Object.getOwnPropertyDescriptor( source, name );\r\n            let rule : MixinMergeRule;\r\n\r\n            if( rule = this.definitionRules[ name ] ){\r\n                assignProperty( this.definitions, name, sourceProp, rule, unshift );\r\n            }\r\n\r\n            if( !rule || rule === mixinRules.protoValue  ){\r\n                assignProperty( dest, name, sourceProp, this.mergeRules[ name ], unshift );\r\n            }\r\n        });\r\n    }\r\n\r\n    mergeInheritedMembers( BaseClass : Function ){\r\n        const { mergeRules, Class } = this;\r\n\r\n        if( mergeRules ){\r\n            const proto = Class.prototype,\r\n                baseProto = BaseClass.prototype;\r\n\r\n            for( let name in mergeRules ) {\r\n                const rule = mergeRules[ name ];\r\n\r\n                if( proto.hasOwnProperty( name ) && name in baseProto ){\r\n                    proto[ name ] = resolveRule( proto[ name ], baseProto[ name ], rule );\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nconst dontMix = {\r\n    function : hashMap({\r\n        length : true,\r\n        prototype : true,\r\n        caller : true,\r\n        arguments : true,\r\n        name : true,\r\n        __super__ : true\r\n    }),\r\n    \r\n    object : hashMap({\r\n        constructor : true\r\n    })    \r\n}\r\n\r\nfunction forEachOwnProp( object : object, fun : ( name : string ) => void ){\r\n    const ignore = dontMix[ typeof object ];\r\n\r\n    for( let name of Object.getOwnPropertyNames( object ) ) {\r\n        ignore[ name ] || fun( name );\r\n    }\r\n}\r\n\r\nexport interface MixinMergeRules {\r\n    [ name : string ] : MixinMergeRule\r\n}\r\n\r\nexport type MixinMergeRule = ( a : any, b : any ) => any\r\nexport type Mixin = { [ key : string ] : any } | Function\r\n\r\n// @mixins( A, B, ... ) decorator.\r\nexport interface MixinRulesDecorator {\r\n    ( rules : MixinMergeRules ) : ClassDecorator\r\n    value( a : object, b : object) : object;\r\n    protoValue( a : object, b : object) : object;\r\n    merge( a : object, b : object ) : object;\r\n    pipe( a: Function, b : Function ) : Function;\r\n    defaults( a: Function, b : Function ) : Function;\r\n    classFirst( a: Function, b : Function ) : Function;\r\n    classLast( a: Function, b : Function ) : Function;\r\n    every( a: Function, b : Function ) : Function;\r\n    some( a: Function, b : Function ) : Function;\r\n}\r\n\r\nexport const mixins = ( ...list : Mixin[] ) => (\r\n    ( Class : Function ) => MixinsState.get( Class ).merge( list )\r\n);\r\n\r\n// @mixinRules({ name : rule, ... }) decorator.\r\nexport const mixinRules = ( ( rules : MixinMergeRules ) => (\r\n    ( Class : Function ) => {\r\n        const mixins = MixinsState.get( Class );\r\n        mixins.mergeRules = defaults( rules, mixins.mergeRules );\r\n    }\r\n) ) as MixinRulesDecorator;\r\n\r\n// Pre-defined mixin merge rules\r\n\r\nmixinRules.value = ( a, b ) => a;\r\n\r\nmixinRules.protoValue = ( a, b ) => a;\r\n\r\n// Recursively merge members\r\nmixinRules.merge = ( a, b ) => defaults( {}, a, b );\r\n\r\n    // Execute methods in pipe, with the class method executed last.\r\nmixinRules.pipe = ( a, b ) => (\r\n    function( x : any ) : any {\r\n        return a.call( this, b.call( this, x ) );\r\n    }\r\n);\r\n\r\n    // Assume methods return an object, and merge results with defaults (class method executed first)\r\nmixinRules.defaults = ( a : Function, b : Function ) => (\r\n    function() : object {\r\n        return defaults( a.apply( this, arguments ), b.apply( this, arguments ) );\r\n    }\r\n);\r\n\r\n// Execute methods in sequence staring with the class method.\r\nmixinRules.classFirst = ( a : Function, b : Function ) => (\r\n    function() : void {\r\n        a.apply( this, arguments );\r\n        b.apply( this, arguments );\r\n    }\r\n);\r\n\r\n    // Execute methods in sequence ending with the class method.\r\nmixinRules.classLast = ( a : Function, b : Function ) => (\r\n    function() : void {\r\n        b.apply( this, arguments );\r\n        a.apply( this, arguments );\r\n    }\r\n)\r\n\r\n    // Execute methods in sequence returning the first falsy result.\r\nmixinRules.every = ( a : Function, b : Function ) =>(\r\n    function() : any {\r\n        return a.apply( this, arguments ) && b.apply( this, arguments );\r\n    }\r\n);\r\n    // Execute methods in sequence returning the first truthy result.\r\nmixinRules.some = ( a : Function, b : Function ) =>(\r\n    function() : any {\r\n        return a.apply( this, arguments ) || b.apply( this, arguments );\r\n    }\r\n);\r\n\r\n/**\r\n * Helpers\r\n */\r\n\r\nfunction assignProperty( dest : object, name : string, sourceProp : PropertyDescriptor, rule : MixinMergeRule, unshift? : boolean ){\r\n// Destination prop is defined, thus the merge rules must be applied.\r\n    if( dest.hasOwnProperty( name ) ){\r\n        const destProp = Object.getOwnPropertyDescriptor( dest, name );\r\n\r\n        if( destProp.configurable && 'value' in destProp ){\r\n            dest[ name ] = unshift ?\r\n                resolveRule( sourceProp.value, destProp.value, rule ) :\r\n                resolveRule( destProp.value, sourceProp.value, rule ) ;\r\n        }\r\n    }\r\n    // If destination is empty, just copy the prop over.\r\n    else{\r\n        Object.defineProperty( dest, name, sourceProp );\r\n    }\r\n}\r\n\r\nfunction resolveRule( dest, source, rule : MixinMergeRule ){\r\n    // When destination is empty, take the source.\r\n    if( dest === void 0 ) return source;\r\n\r\n    // In these cases we take non-empty destination:\r\n    if( !rule || source === void 0 ) return dest;\r\n\r\n    // In other cases we must merge values.\r\n    return rule( dest, source );\r\n}","import * as _eventsApi from './eventsource';\r\nimport { EventMap, EventsDefinition, EventSource, HandlersByEvent } from './eventsource';\r\nimport { define, definitions, Mixable, MixableConstructor, mixinRules, MixinsState } from './mixins';\r\nimport { omit, transform } from './tools';\r\n\r\nconst { strings, on, off, once, trigger5, trigger2, trigger3 } = _eventsApi;\r\n\r\n/** @hidden */\r\nlet _idCount = 0;\r\n\r\n/** @hidden */\r\nfunction uniqueId() : string {\r\n    return 'l' + _idCount++;\r\n}\r\n\r\nexport { EventMap, EventsDefinition };\r\n\r\nexport interface MessengerDefinition {\r\n    _localEvents? : EventMap\r\n    localEvents? : EventsDefinition\r\n    properties? : PropertyMap\r\n    [ name : string ] : any\r\n}\r\n\r\nexport interface PropertyMap {\r\n    [ name : string ] : Property\r\n}\r\n\r\nexport type Property = PropertyDescriptor | ( () => any )\r\n\r\n/** @hidden */\r\nexport interface MessengersByCid {\r\n    [ cid : string ] : Messenger\r\n}\r\n\r\n/** @hidden */\r\nexport type CallbacksByEvents = { [ events : string ] : Function }\r\n\r\n/*************************\r\n * Messenger is mixable class with capabilities of sending and receiving synchronous events.\r\n * This class itself can serve as both mixin and base class.\r\n */\r\n\r\n@define\r\n@definitions({\r\n    properties : mixinRules.merge,\r\n    localEvents : mixinRules.merge\r\n})\r\nexport class Messenger implements Mixable, EventSource {\r\n    // Define extendable mixin static properties.\r\n    static __super__ : object;\r\n    static mixins : MixinsState;\r\n    static onExtend : ( BaseClass : Function ) => void;\r\n    static define : ( definition? : MessengerDefinition, statics? : object ) => MixableConstructor;\r\n    static extend : ( definition? : MessengerDefinition, statics? : object ) => MixableConstructor;\r\n    static onDefine({ localEvents, _localEvents, properties } : MessengerDefinition, BaseClass? : typeof Mixable ){\r\n        // Handle localEvents definition\r\n        if( localEvents || _localEvents ){\r\n            const eventsMap = new EventMap( this.prototype._localEvents );\r\n\r\n            localEvents && eventsMap.addEventsMap( localEvents );\r\n            _localEvents && eventsMap.merge( _localEvents );\r\n            \r\n            this.prototype._localEvents = eventsMap;\r\n        }\r\n\r\n        // Handle properties definitions...\r\n        if( properties ){\r\n            Object.defineProperties( this.prototype, transform( {}, <PropertyMap>properties, toPropertyDescriptor ) );\r\n        }\r\n    }\r\n\r\n    /** @hidden */ \r\n    _events : HandlersByEvent = void 0;\r\n\r\n    /** @hidden */ \r\n    _listeningTo : MessengersByCid = void 0\r\n\r\n    /** Unique client-only id. */\r\n    cid : string\r\n\r\n    /** @hidden Prototype-only property to manage automatic local events subscription */ \r\n    _localEvents : EventMap\r\n\r\n    /** @hidden */ \r\n    constructor(){\r\n        this.cid = uniqueId();\r\n        this.initialize.apply( this, arguments );\r\n\r\n        // TODO: local events subscribe?\r\n    }\r\n\r\n    /** Method is called at the end of the constructor */\r\n    initialize() : void {}\r\n    \r\n    on( events : string | CallbacksByEvents, callback, context? ) : this {\r\n        if( typeof events === 'string' ) strings( on, this, events, callback, context );\r\n        else for( let name in events ) strings( on, this, name, events[ name ], context || callback );\r\n\r\n        return this;\r\n    }\r\n\r\n    once( events : string | CallbacksByEvents, callback, context? ) : this {\r\n        if( typeof events === 'string' ) strings( once, this, events, callback, context );\r\n        else for( let name in events ) strings( once, this, name, events[ name ], context || callback );\r\n\r\n        return this;\r\n    }\r\n\r\n    off( events? : string | CallbacksByEvents, callback?, context? ) : this {\r\n        if( !events ) off( this, void 0, callback, context );\r\n        else if( typeof events === 'string' ) strings( off, this, events, callback, context );\r\n        else for( let name in events ) strings( off, this, name, events[ name ], context || callback );\r\n\r\n        return this;\r\n    }\r\n\r\n    // Trigger one or many events, firing all bound callbacks. Callbacks are\r\n    // passed the same arguments as `trigger` is, apart from the event name\r\n    // (unless you're listening on `\"all\"`, which will cause your callback to\r\n    // receive the true name of the event as the first argument).\r\n    trigger(name : string, a?, b?, c?, d?, e? ) : this {\r\n        if( d !== void 0 || e !== void 0 ) trigger5( this, name, a, b, c, d, e );\r\n        else if( c !== void 0 ) trigger3( this, name, a, b, c );\r\n        else trigger2( this, name, a, b );\r\n        return this;\r\n    }\r\n\r\n    listenTo( source : Messenger, a : string | CallbacksByEvents, b? : Function ) : this {\r\n        if( source ){\r\n            addReference( this, source );\r\n            source.on( a, !b && typeof a === 'object' ? this : b, this );\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    listenToOnce( source : Messenger, a : string | CallbacksByEvents, b? : Function ) : this {\r\n        if( source ){\r\n            addReference( this, source );\r\n            source.once( a, !b && typeof a === 'object' ? this : b, this );\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    stopListening( a_source? : Messenger, a? : string | CallbacksByEvents, b? : Function ) : this {\r\n        const { _listeningTo } = this;\r\n        if( _listeningTo ){\r\n            const removeAll = !( a || b ),\r\n                  second = !b && typeof a === 'object' ? this : b;\r\n\r\n            if( a_source ){\r\n                const source = _listeningTo[ a_source.cid ];\r\n                if( source ){\r\n                    if( removeAll ) delete _listeningTo[ a_source.cid ];\r\n                    source.off( a, second, this );\r\n                }\r\n            }\r\n            else if( a_source == null ){\r\n                for( let cid in _listeningTo ) _listeningTo[ cid ].off( a, second, this );\r\n\r\n                if( removeAll ) ( this._listeningTo = void 0 );\r\n            }\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Destructor. Stops messenger from listening to all objects,\r\n     * and stop others from listening to the messenger. \r\n     */\r\n    _disposed : boolean\r\n\r\n    dispose() : void {\r\n        if( this._disposed ) return;\r\n\r\n        this.stopListening();\r\n        this.off();\r\n\r\n        this._disposed = true;\r\n    }\r\n}\r\n\r\n/**\r\n * Backbone 1.2 API conformant Events mixin.\r\n */\r\nexport const Events : Messenger = <Messenger> omit( Messenger.prototype, 'constructor', 'initialize' );\r\n\r\n/**\r\n * Messenger Private Helpers \r\n */\r\n\r\nfunction toPropertyDescriptor( x : Property ) : PropertyDescriptor {\r\n    if( x ){\r\n        return typeof x === 'function' ? { get : < () => any >x, configurable : true } : <PropertyDescriptor> x;\r\n    }\r\n}\r\n\r\n/** @hidden */\r\nfunction addReference( listener : Messenger, source : Messenger ){\r\n      const listeningTo = listener._listeningTo || (listener._listeningTo = Object.create( null ) ),\r\n            cid = source.cid || ( source.cid = uniqueId() );\r\n\r\n      listeningTo[ cid ] = source;\r\n}","import { Messenger } from './events'\r\nimport { define } from './mixins';\r\n\r\nexport type LogLevel = 'error' | 'warn' | 'debug' | 'info' | 'log';\r\nexport type LoggerEventHandler = ( topic : string, msg : string, props : object )  => void;\r\n\r\nexport const isProduction = typeof process !== 'undefined' && process.env && process.env.NODE_ENV === 'production',\r\n    logEvents : LogLevel[] =  isProduction ?\r\n        [ 'error', 'info' ] :\r\n        [ 'error', 'warn', 'debug', 'info', 'log' ];\r\n\r\n@define\r\nexport class Logger extends Messenger {\r\n    counter : { [ level in LogLevel ]? : number } = {}\r\n\r\n    // Log events of the given log level to the console, optionally filtered by topic\r\n    logToConsole( level : LogLevel, filter? : RegExp ) : this {\r\n        return this.on( level, ( topic, msg, props ) => {\r\n            if( !filter || filter.test( topic ) ){\r\n                const args = [ `[${topic}] ${msg}` ];\r\n        \r\n                for( let name in props ){\r\n                    args.push( `\\n\\t${name}:`, toString( props[ name ] ) );\r\n                }\r\n        \r\n                console[ level ].apply( console, args );\r\n            }\r\n        });\r\n    }\r\n\r\n    // Fire exception on the events of the given log level, optionally filtered by topic\r\n    throwOn( level : LogLevel, filter? : RegExp ) : this {\r\n        return this.on( level, ( topic, msg, props ) => {\r\n            if( !filter || filter.test( topic ) ){\r\n                throw new Error( `[${topic}] ${msg}` );\r\n            }\r\n        });\r\n    }\r\n\r\n    // Count log events of the given level, optionally filtered by topic\r\n    count( level : LogLevel, filter? : RegExp ) : this {\r\n        return this.on( level, ( topic, msg, props ) => {\r\n            if( !filter || filter.test( topic ) ){\r\n                this.counter[ level ] = ( this.counter[ level ] || 0 ) + 1;\r\n            }\r\n        });\r\n    }\r\n\r\n    trigger : ( level : LogLevel, topic : string, message : string, props? : object ) => this;\r\n    \r\n    off : ( event? : LogLevel ) => this;\r\n\r\n\r\n    on( handlers : { [ name in LogLevel ] : LoggerEventHandler } ) : this;\r\n    on( handlers : LogLevel, handler : LoggerEventHandler ) : this;\r\n    on( handlers : 'all', handler : ( level : LogLevel, topic : string, msg : string, props : object )  => void ) : this;\r\n    on( a : any, b? : any ){\r\n        return super.on( a, b );\r\n    }\r\n}\r\n\r\n/**\r\n * Convert objects to the plain text friendly format.\r\n * primitives as in JSON.\r\n */\r\nlet toString = typeof window === 'undefined' ? \r\n    something => {\r\n        if( something && typeof something === 'object' ){\r\n            const { __inner_state__ } = something,\r\n                value = __inner_state__ || something,\r\n                isArray = Array.isArray( value );\r\n\r\n            const body = isArray ? `[ length = ${ value.length } ]` : `{ ${ Object.keys( value ).join( ', ' )} }`;\r\n\r\n            return something.constructor.name + ' ' + body;\r\n        }\r\n\r\n        return JSON.stringify( something );\r\n    }\r\n    : x => x;\r\n\r\nexport const logger = new Logger();\r\n\r\nif( typeof console !== 'undefined' ) {\r\n    for( let event of logEvents ){\r\n        logger.logToConsole( event );\r\n    }\r\n}\r\n\r\nexport const throwingLogger = new Logger();\r\nthrowingLogger.throwOn( 'error' ).throwOn( 'warn' );\r\n\r\nexport const log : typeof logger.trigger = logger.trigger.bind( logger );","export interface IONode {\r\n    _endpoint : IOEndpoint\r\n    _ioPromise : IOPromise< this >\r\n}\r\n\r\nexport interface IOPromise<T> extends Promise<T> {\r\n    abort? : () => void\r\n}\r\n\r\nexport interface IOEndpoint {\r\n    list( options : IOOptions, collection? ) : IOPromise<any>\r\n    create( json : any, options : IOOptions, record? ) : IOPromise<any>\r\n    update( id : string | number, json :any, options : IOOptions, record? ) : IOPromise<any>\r\n    read( id : string | number, options : IOOptions, record? ) : IOPromise<any>\r\n    destroy( id : string | number, options : IOOptions, record? ) : IOPromise<any>\r\n    subscribe( events : IOEvents, collection? ) : IOPromise<any>\r\n    unsubscribe( events : IOEvents, collection? ) : void\r\n}\r\n\r\nexport interface IOOptions {\r\n    ioUpdate? : boolean\r\n}\r\n\r\nexport interface IOEvents {\r\n    updated? : ( json : any ) => void\r\n    removed? : ( json : any ) => void\r\n}\r\n\r\nexport function getOwnerEndpoint( self ) : IOEndpoint {\r\n    // Check if we are the member of the collection...\r\n    const { collection } = self;\r\n    if( collection ){\r\n        return getOwnerEndpoint( collection );\r\n    }\r\n\r\n    // Now, if we're the member of the model...\r\n    if( self._owner ){\r\n        const { _endpoints } = self._owner;\r\n        return _endpoints && _endpoints[ self._ownerKey ];\r\n    }\r\n}\r\n\r\n/**\r\n * Create abortable promise.\r\n * Adds `promise.abort()` function which rejects the promise by default\r\n * initialize() function takes third optional argument `abort : ( resolve, reject ) => void`,\r\n * which can be used to add custom abort handling.\r\n */\r\ndeclare var Promise: PromiseConstructorLike;\r\n\r\nexport function createIOPromise( initialize : InitIOPromise ) : IOPromise<any>{\r\n    let resolve, reject, onAbort;\r\n\r\n    function abort( fn ){\r\n        onAbort = fn;\r\n    }\r\n\r\n    const promise : IOPromise<any> = new Promise( ( a_resolve, a_reject ) =>{\r\n        reject = a_reject;\r\n        resolve = a_resolve;\r\n        initialize( resolve, reject, abort );\r\n    }) as IOPromise<any>;\r\n\r\n    promise.abort = () => {\r\n        onAbort ? onAbort( resolve, reject ) : reject( new Error( \"I/O Aborted\" ) );\r\n    }\r\n\r\n    return promise;\r\n}\r\n\r\nexport type InitIOPromise = ( resolve : ( x? : any ) => void, reject : ( x? : any ) => void, abort? : ( fn : Function ) => void ) => void;\r\n\r\nexport function startIO( self : IONode, promise : IOPromise<any>, options : IOOptions, thenDo : ( json : any ) => any ) : IOPromise<any> {\r\n    // Stop pending I/O first...\r\n    abortIO( self );\r\n\r\n    // Mark future update transaction as IO transaction.\r\n    options.ioUpdate = true;\r\n\r\n    self._ioPromise = promise\r\n        .then( resp => {\r\n            self._ioPromise = null;\r\n    \r\n            const result = thenDo ? thenDo( resp ) : resp;\r\n                \r\n            triggerAndBubble( self, 'sync', self, resp, options );\r\n                \r\n            return result;\r\n        } )  \r\n        .catch( err => {\r\n            self._ioPromise = null;\r\n            \r\n            // Overlaps with a new `error` event.\r\n            triggerAndBubble( self, 'error', self, err, options );\r\n            \r\n            throw err;\r\n        } ) as IOPromise<any>;\r\n\r\n    self._ioPromise.abort = promise.abort;\r\n\r\n    return self._ioPromise;\r\n}\r\n\r\nexport function abortIO( self : IONode ){\r\n    if( self._ioPromise && self._ioPromise.abort ){\r\n        self._ioPromise.abort();\r\n        self._ioPromise = null;\r\n    }\r\n}\r\n\r\nexport function triggerAndBubble( eventSource, ...args ){\r\n    eventSource.trigger.apply( eventSource, args );\r\n    const { collection } = eventSource;\r\n    collection && collection.trigger.apply( collection, args ); \r\n}","/**\r\n * Traversable objects and symbolic references\r\n */\r\nexport interface Traversable {\r\n    getStore() : Traversable\r\n    getOwner() : Traversable\r\n    get( key : string ) : any \r\n}\r\n\r\nconst referenceMask =  /\\^|(store\\.[^.]+)|([^.]+)/g;\r\n\r\n// Compile reference to function\r\nexport type ResolveReference = ( root : Traversable ) => any;  \r\n\r\nexport class CompiledReference {\r\n    resolve : ResolveReference\r\n    tail : string\r\n    local : boolean\r\n\r\n    constructor( reference : string, splitTail : boolean = false ){\r\n        const path = reference\r\n                        .match( referenceMask )\r\n                        .map( key => {\r\n                            if( key === '^' || key === 'owner' ) return 'getOwner()';\r\n\r\n                            if( key[ 0 ] === '~' ) return `getStore().get(\"${ key.substr( 1 ) }\")`;\r\n\r\n                            if( key.indexOf( 'store.' ) === 0 ) return `getStore().get(\"${ key.substr( 6 ) }\")`;\r\n                            \r\n                            return key;\r\n                        } );\r\n               \r\n        this.tail = splitTail && path.pop();\r\n        this.local = !path.length;\r\n        \r\n        this.resolve = <any> new Function( 'self', `\r\n            var v = self.${ path.shift() };\r\n                           \r\n            ${ path.map( x => `\r\n                v = v && v.${ x };\r\n            `).join('')}\r\n\r\n            return v;\r\n        ` );\r\n    }\r\n}\r\n\r\nexport function resolveReference( root : Traversable, reference : string, action : ( object, key : string ) => any ) : any {\r\n    const path = reference.match( referenceMask ),\r\n          skip = path.length - 1;\r\n    \r\n    let self = root;\r\n\r\n    for( var i = 0; i < skip; i++ ){\r\n        const key = path[ i ];\r\n        switch( key ){\r\n            case '~' : self = self.getStore(); break;\r\n            case '^' : self = self.getOwner(); break;\r\n            default  : self = self.get( key );\r\n        }\r\n\r\n        // Do nothing if object on the path doesn't exist.\r\n        if( !self ) return;\r\n    }\r\n\r\n    return action( self, path[ skip ] );\r\n}","export interface ChildrenErrors {\r\n    [ key : string ] : ValidationError | any\r\n} \r\n\r\nexport interface Validatable {\r\n    _validateNested( errors : ChildrenErrors ) : number;\r\n    validate( self : any ) : any\r\n    get( key : string ) : any\r\n}\r\n\r\n// Validation error object.\r\nexport class ValidationError {\r\n    // Invalid nested object keys \r\n    nested : ChildrenErrors \r\n    length : number\r\n\r\n    // Local error\r\n    error : any\r\n\r\n    constructor( obj : Validatable ){\r\n        this.length = obj._validateNested( this.nested = {} );\r\n\r\n        if( this.error = obj.validate( obj ) ){\r\n            this.length++;\r\n        }\r\n    }\r\n\r\n    each( iteratee : ( value : any, key : string ) => void ) : void {\r\n        const { error, nested } = this;\r\n\r\n        if( error ) iteratee( error, null );\r\n\r\n        for( const key in nested ){\r\n            iteratee( nested[ key ], key );\r\n        }\r\n    }\r\n\r\n    eachError( iteratee : ( error : any, key : string, object : Validatable ) => void, object : Validatable ) : void {\r\n        this.each( ( value : any, key : string ) => {\r\n            if( value instanceof ValidationError ){\r\n                (<ValidationError>value).eachError( iteratee, object.get( key ) );\r\n            }\r\n            else{\r\n                iteratee( value, key, object );\r\n            }\r\n        });\r\n    }\r\n}","import { abortIO, IOEndpoint, IONode, IOPromise } from './io-tools';\r\nimport { CallbacksByEvents, define, definitions, eventsApi, Logger, LogLevel, Messenger, MessengerDefinition, MessengersByCid, mixinRules, mixins, MixinsState, throwingLogger } from './object-plus';\r\nimport { resolveReference, Traversable } from './traversable';\r\nimport { ChildrenErrors, Validatable, ValidationError } from './validation';\r\n\r\nconst { trigger3, on, off } = eventsApi;\r\n/***\r\n * Abstract class implementing ownership tree, tho-phase transactions, and validation. \r\n * 1. createTransaction() - apply changes to an object tree, and if there are some events to send, transaction object is created.\r\n * 2. transaction.commit() - send and process all change events, and close transaction.\r\n */\r\n\r\n/** @private */\r\nexport interface TransactionalDefinition extends MessengerDefinition {\r\n    endpoint? : IOEndpoint\r\n}\r\n\r\nexport enum ItemsBehavior {\r\n    share       = 0b0001,\r\n    listen      = 0b0010,\r\n    persistent  = 0b0100\r\n}\r\n\r\n// Transactional object interface\r\n@define\r\n@definitions({\r\n    endpoint : mixinRules.value\r\n})\r\n@mixins( Messenger )\r\nexport abstract class Transactional implements Messenger, IONode, Validatable, Traversable {\r\n    // Mixins are hard in TypeScript. We need to copy type signatures over...\r\n    // Here goes 'Mixable' mixin.\r\n    static endpoint : IOEndpoint;\r\n    static __super__ : object;\r\n    static mixins : MixinsState;\r\n    static define : ( definition? : TransactionalDefinition, statics? : object ) => typeof Transactional;\r\n    static extend : <T extends TransactionalDefinition>( definition? : T, statics? : object ) => any;\r\n\r\n    static onDefine( definitions : TransactionalDefinition, BaseClass : typeof Transactional ){\r\n        if( definitions.endpoint ) this.prototype._endpoint = definitions.endpoint;\r\n        Messenger.onDefine.call( this, definitions, BaseClass );\r\n    };\r\n\r\n    static onExtend( BaseClass : typeof Transactional ) : void {\r\n        // Make sure we don't inherit class factories.\r\n        if( BaseClass.create === this.create ) {\r\n            this.create = Transactional.create;\r\n        }\r\n    }\r\n\r\n    // Define extendable mixin static properties.\r\n    static create( a : any, b? : any ) : Transactional {\r\n        return new (this as any)( a, b );\r\n    }\r\n\r\n    /** Generic class factory. May be overridden for abstract classes. Not inherited. */\r\n    on : ( events : string | CallbacksByEvents, callback, context? ) => this\r\n    once : ( events : string | CallbacksByEvents, callback, context? ) => this\r\n    off : ( events? : string | CallbacksByEvents, callback?, context? ) => this\r\n    trigger      : (name : string, a?, b?, c?, d?, e? ) => this\r\n\r\n    stopListening : ( source? : Messenger, a? : string | CallbacksByEvents, b? : Function ) => this\r\n    listenTo : ( source : Messenger, a : string | CallbacksByEvents, b? : Function ) => this\r\n    listenToOnce : ( source : Messenger, a : string | CallbacksByEvents, b? : Function ) => this\r\n    \r\n    _disposed : boolean;\r\n\r\n    // State accessor. \r\n    readonly __inner_state__ : any;\r\n\r\n    // Shared modifier (used by collections of shared models)\r\n    _shared? : number; \r\n    \r\n    dispose() : void {\r\n        if( this._disposed ) return;\r\n        \r\n        abortIO( this );\r\n        this._owner = void 0;\r\n        this._ownerKey = void 0;\r\n        this.off();\r\n        this.stopListening();\r\n        this._disposed = true;\r\n    }\r\n\r\n    // Must be called at the end of the constructor in the subclass.\r\n    initialize() : void {}\r\n\r\n    /** @private */\r\n    _events : eventsApi.HandlersByEvent = void 0;\r\n\r\n    /** @private */\r\n    _listeningTo : MessengersByCid\r\n\r\n    /** @private */\r\n    _localEvents : eventsApi.EventMap\r\n\r\n    cid : string\r\n    cidPrefix : string\r\n\r\n    // Unique version token replaced on change\r\n    /** @private */\r\n    _changeToken : {} = {}\r\n\r\n    // true while inside of the transaction\r\n    /** @private */\r\n    _transaction : boolean = false;\r\n\r\n    // Holds current transaction's options, when in the middle of transaction and there're changes but is an unsent change event\r\n    /** @private */\r\n    _isDirty  : TransactionOptions = null;\r\n\r\n    // Backreference set by owner (Record, Collection, or other object)\r\n    /** @private */\r\n    _owner : Owner = void 0;\r\n\r\n    // Key supplied by owner. Used by record to identify attribute key.\r\n    // Only collections doesn't set the key, which is used to distinguish collections.\r\n    /** @private */  \r\n    _ownerKey : string = void 0;\r\n\r\n    // Name of the change event\r\n    /** @private */\r\n    _changeEventName : string\r\n\r\n    /**\r\n     * Subsribe for the changes.\r\n     */\r\n    onChanges( handler : Function, target? : Messenger ){\r\n        on( this, this._changeEventName, handler, target );\r\n    }\r\n\r\n    /**\r\n     * Unsubscribe from changes.\r\n     */\r\n    offChanges( handler? : Function, target? : Messenger ){\r\n        off( this, this._changeEventName, handler, target );\r\n    }\r\n\r\n    /**\r\n     * Listen to changes event. \r\n     */\r\n    listenToChanges( target : Transactional, handler ){\r\n        this.listenTo( target, target._changeEventName, handler );\r\n    }\r\n\r\n    constructor( cid : string | number ){\r\n        this.cid = this.cidPrefix + cid;\r\n    }\r\n\r\n    // Deeply clone ownership subtree\r\n    abstract clone( options? : CloneOptions ) : this\r\n    \r\n    // Execute given function in the scope of ad-hoc transaction.\r\n    transaction( fun : ( self : this ) => void, options : TransactionOptions = {} ) : void{\r\n        const isRoot = transactionApi.begin( this );\r\n        const update = fun.call( this, this );\r\n        update && this.set( update );\r\n        isRoot && transactionApi.commit( this );\r\n    }\r\n\r\n    // Assign transactional object \"by value\", copying aggregated items.\r\n    assignFrom( source : Transactional | Object ) : this {\r\n        // Need to delay change events until change token willl by synced.\r\n        this.transaction( () =>{\r\n            this.set( ( <any>source ).__inner_state__ || source, { merge : true } );\r\n\r\n            // Synchronize change tokens\r\n            const { _changeToken } = source as any;\r\n    \r\n            if( _changeToken ){\r\n                this._changeToken = _changeToken;\r\n            }    \r\n        });\r\n\r\n        return this;\r\n    }\r\n\r\n    // Create object from JSON. Throw if validation fail.\r\n    static from<T extends new ( a?, b? ) => Transactional >( this : T, json : any, { strict, ...options }  : { strict? : boolean } & TransactionOptions = {} ) :  InstanceType<T>{\r\n        const obj : Transactional = ( this as any ).create( json, { ...options, logger : strict ? throwingLogger : void 0 } );\r\n\r\n        if( strict && obj.validationError ){\r\n            obj.eachValidationError( ( error, key, obj ) => {\r\n                throw new Error( `${ obj.getClassName() }.${ key }: ${ error }` );\r\n            });\r\n        }\r\n\r\n        return obj as any;\r\n    }\r\n\r\n    // Apply bulk object update without any notifications, and return open transaction.\r\n    // Used internally to implement two-phase commit.\r\n    // Returns null if there are no any changes.\r\n    /** @private */  \r\n    abstract _createTransaction( values : any, options? : TransactionOptions ) : Transaction | void\r\n\r\n    // Apply bulk in-place object update in scope of ad-hoc transaction \r\n    abstract set( values : any, options? : TransactionOptions ) : this;\r\n\r\n    \r\n    // Parse function applied when 'parse' option is set for transaction.\r\n    parse( data : any, options? : TransactionOptions ) : any { return data }\r\n\r\n    // Convert object to the serializable JSON structure\r\n    abstract toJSON( options? : object ) : {}\r\n\r\n    /*******************\r\n     * Traversals and member access\r\n     */\r\n    \r\n    // Get object member by its key.\r\n    abstract get( key : string ) : any\r\n\r\n    // Get object member by symbolic reference.\r\n    deepGet( reference : string ) : any {\r\n        return resolveReference( this, reference, ( object, key ) => object.get ? object.get( key ) : object[ key ] );\r\n    }\r\n\r\n    //_isCollection : boolean\r\n\r\n    // Return owner skipping collections.\r\n    getOwner() : Owner {\r\n        return this._owner;\r\n    }\r\n\r\n    // Store used when owner chain store lookup failed. Static value in the prototype. \r\n    /** @private */\r\n    _defaultStore : Transactional\r\n\r\n    // Locate the closest store. Store object stops traversal by overriding this method. \r\n    getStore() : Transactional {\r\n        const { _owner } = this;\r\n        return _owner ? <Transactional> _owner.getStore() : this._defaultStore;\r\n    }\r\n\r\n\r\n    /***************************************************\r\n     * Iteration API\r\n     */\r\n\r\n    // Loop through the members. Must be efficiently implemented in container class.\r\n\r\n    _endpoint : IOEndpoint\r\n    _ioPromise : IOPromise<this>\r\n\r\n    hasPendingIO() : IOPromise<this> { return this._ioPromise; }\r\n\r\n    fetch( options? : object ) : IOPromise<this> { throw new Error( \"Not implemented\" ); }\r\n\r\n    getEndpoint() : IOEndpoint {\r\n        return getOwnerEndpoint( this ) || this._endpoint;\r\n    }\r\n    \r\n    /*********************************\r\n     * Validation API\r\n     */\r\n\r\n    // Lazily evaluated validation error\r\n    /** @private */\r\n    _validationError : ValidationError = void 0\r\n\r\n    // Validate ownership tree and return valudation error \r\n    get validationError() : ValidationError {\r\n        const error = this._validationError || ( this._validationError = new ValidationError( this ) );\r\n        return error.length ? error : null; \r\n    }\r\n\r\n    // Validate nested members. Returns errors count.\r\n    /** @private */\r\n    abstract _validateNested( errors : ChildrenErrors ) : number\r\n\r\n    // Object-level validator. Returns validation error.\r\n    validate( obj? : Transactional ) : any {}\r\n\r\n    // Return validation error (or undefined) for nested object with the given key. \r\n    getValidationError( key? : string ) : any {\r\n        var error = this.validationError;\r\n        return ( key ? error && error.nested[ key ] : error ) || null;\r\n    }\r\n\r\n    // Get validation error for the given symbolic reference.\r\n    deepValidationError( reference : string ) : any {\r\n        return resolveReference( this, reference, ( object, key ) => object.getValidationError( key ) );\r\n    }\r\n\r\n    // Iterate through all validation errors across the ownership tree.\r\n    eachValidationError( iteratee : ( error : any, key : string, object : Transactional ) => void ) : void {\r\n        const { validationError } = this;\r\n        validationError && validationError.eachError( iteratee, this );\r\n    }\r\n\r\n    // Check whenever member with a given key is valid. \r\n    isValid( key? : string ) : boolean {\r\n        return !this.getValidationError( key );\r\n    }\r\n\r\n    valueOf() : Object { return this.cid; }\r\n    toString(){ return this.cid; }\r\n\r\n    // Get class name for an object instance. Works fine with ES6 classes definitions (not in IE).\r\n    getClassName() : string {\r\n        const { name } = <any>this.constructor;\r\n        if( name !== 'Subclass' ) return name;\r\n    }\r\n\r\n    // Logging interface for run time errors and warnings.\r\n    abstract _log( level : LogLevel, topic : string, text : string, value : any, logger? : Logger ) : void\r\n}\r\n\r\nexport interface CloneOptions {\r\n    // 'Pin store' shall assign this._defaultStore = this.getStore();\r\n    pinStore? : boolean\r\n}\r\n\r\n// Owner must accept children update events. It's an only way children communicates with an owner.\r\n/** @private */\r\nexport interface Owner extends Traversable, Messenger {\r\n    _onChildrenChange( child : Transactional, options : TransactionOptions ) : void;\r\n    getOwner() : Owner\r\n    getStore() : Transactional\r\n}\r\n\r\n// Transaction object used for two-phase commit protocol.\r\n// Must be implemented by subclasses.\r\n// Transaction must be created if there are actual changes and when markIsDirty returns true.\r\n/** @private */ \r\nexport interface Transaction {\r\n    // Object transaction is being made on.\r\n    object : Transactional\r\n\r\n    // Send out change events, process update triggers, and close transaction.\r\n    // Nested transactions must be marked with isNested flag (it suppress owner notification).\r\n    commit( initiator? : Transactional )\r\n}\r\n\r\n// Options for distributed transaction  \r\nexport interface TransactionOptions {\r\n    // Invoke parsing \r\n    parse? : boolean\r\n\r\n    // Optional logger\r\n    logger? : Logger\r\n\r\n    // Suppress change notifications and update triggers\r\n    silent? : boolean\r\n\r\n    // Update existing transactional members in place, or skip the update (ignored by models)\r\n    merge? : boolean // =true\r\n\r\n    // Should collections remove elements in set (ignored by models)  \r\n    remove? : boolean // =true\r\n\r\n    // Always replace enclosed objects with new instances\r\n    reset? : boolean // = false\r\n\r\n    // Do not dispose aggregated members\r\n    unset? : boolean\r\n\r\n    validate? : boolean\r\n\r\n    // `true` if the transaction is initiated as a result of IO operation\r\n    ioUpdate? : boolean\r\n\r\n    // The hint for IOEndpoint\r\n    // If `true`, `record.save()` will behave as \"upsert\" operation for the records having id.\r\n    upsert? : boolean\r\n}\r\n\r\n/**\r\n * Low-level transactions API. Must be used like this:\r\n * const isRoot = begin( record );\r\n * ...\r\n * isRoot && commit( record, options );\r\n * \r\n * When committing nested transaction, the flag must be set to true. \r\n * commit( object, options, isNested ) \r\n */\r\n\r\nexport const transactionApi = {\r\n    // Start transaction. Return true if it's the root one.\r\n    /** @private */\r\n    begin( object : Transactional ) : boolean {\r\n        return object._transaction ? false : ( object._transaction = true );  \r\n    },\r\n\r\n    // Mark object having changes inside of the current transaction.\r\n    // Returns true whenever there notifications are required.\r\n    /** @private */\r\n    markAsDirty( object : Transactional, options : TransactionOptions ) : boolean {\r\n        // If silent option is in effect, don't set isDirty flag.\r\n        const dirty = !options.silent;\r\n        if( dirty ) object._isDirty = options;\r\n        \r\n        // Reset version token.\r\n        object._changeToken = {};\r\n\r\n        // Object is changed, so validation must happen again. Clear the cache.\r\n        object._validationError = void 0;\r\n\r\n        return dirty;\r\n    },\r\n\r\n    // Commit transaction. Send out change event and notify owner. Returns true if there were changes.\r\n    // Must be executed for the root transaction only.\r\n    /** @private */\r\n    commit( object : Transactional, initiator? : Transactional ){\r\n        let originalOptions = object._isDirty;\r\n\r\n        if( originalOptions ){\r\n            // Send the sequence of change events, handling chained handlers.\r\n            while( object._isDirty ){\r\n                const options = object._isDirty;\r\n                object._isDirty = null; \r\n                trigger3( object, object._changeEventName, object, options, initiator );\r\n            }\r\n            \r\n            // Mark transaction as closed.\r\n            object._transaction = false;\r\n\r\n            // Notify owner on changes out of transaction scope.  \r\n            const { _owner } = object;  \r\n            if( _owner && _owner !== <any> initiator ){ // If it's the nested transaction, owner is already aware there are some changes.\r\n                _owner._onChildrenChange( object, originalOptions );\r\n            }\r\n        }\r\n        else{\r\n            // No changes. Silently close transaction.\r\n            object._isDirty = null;\r\n            object._transaction = false;\r\n        }\r\n    },\r\n\r\n    /************************************\r\n     * Ownership management\r\n     */\r\n\r\n    // Add reference to the record.\r\n    /** @private */\r\n    aquire( owner : Owner, child : Transactional, key? : string ) : void {\r\n        if( child._owner ) throw new ReferenceError( 'Trying to aquire ownership for an object already having an owner' );\r\n\r\n        child._owner = owner;\r\n        child._ownerKey = key;\r\n    },\r\n\r\n    // Remove reference to the record.\r\n    /** @private */\r\n    free( owner : Owner, child : Transactional ) : void {\r\n        if( owner === child._owner ){\r\n            child._owner = void 0;\r\n            child._ownerKey = void 0;\r\n        }\r\n    }\r\n}\r\n\r\nfunction getOwnerEndpoint( self : Transactional ) : IOEndpoint {\r\n    // Check if we are the member of the collection...\r\n    const { collection } = self as any;\r\n    if( collection ){\r\n        return getOwnerEndpoint( collection );\r\n    }\r\n\r\n    // Now, if we're the member of the model...\r\n    if( self._owner ){\r\n        const { _endpoints } = self._owner as any;\r\n        return _endpoints && _endpoints[ self._ownerKey ];\r\n    }\r\n}\r\n","import { eventsApi } from '../object-plus';\r\nimport { Owner, Transaction, Transactional, transactionApi, TransactionOptions } from \"../transactions\";\r\nconst { begin : _begin, markAsDirty : _markAsDirty, commit } = transactionApi;\r\n\r\nconst { trigger3 } = eventsApi;\r\n\r\nexport interface ConstructorsMixin {\r\n    Attributes : AttributesConstructor\r\n    AttributesCopy : AttributesCopyConstructor\r\n}\r\n\r\nexport interface ConstructorOptions extends TransactionOptions{\r\n    clone? : boolean\r\n}\r\n\r\nexport type AttributesConstructor = new ( record : AttributesContainer, values : object, options : TransactionOptions ) => AttributesValues;\r\nexport type AttributesCopyConstructor = new ( values : object ) => AttributesValues;\r\n\r\nexport interface AttributesContainer extends Transactional, Owner, ConstructorsMixin {\r\n    // Attribute descriptors.\r\n    _attributes : AttributesDescriptors\r\n\r\n    // Attribute values.\r\n    attributes : AttributesValues\r\n\r\n    // Previous attribute values.\r\n    _previousAttributes : AttributesValues\r\n\r\n    // Changed attributes cache. \r\n    _changedAttributes : AttributesValues\r\n}\r\n\r\nexport interface AttributesValues {\r\n    [ name : string ] : any\r\n}\r\n\r\nexport interface AttributesDescriptors {\r\n    [ name : string ] : AttributeUpdatePipeline\r\n}\r\n\r\nexport interface AttributeUpdatePipeline{\r\n    doUpdate( value, record : AttributesContainer, options : TransactionOptions, nested? : Transaction[] ) : boolean\r\n}\r\n\r\n // Optimized single attribute transactional update. To be called from attributes setters\r\n // options.silent === false, parse === false. \r\nexport function setAttribute( record : AttributesContainer, name : string, value : any ) : void {\r\n    // Open the transaction.\r\n    const isRoot  = begin( record ),\r\n          options = {};\r\n\r\n    // Update attribute.      \r\n    if( record._attributes[ name ].doUpdate( value, record, options ) ){\r\n        // Notify listeners on changes.\r\n        markAsDirty( record, options );\r\n        trigger3( record, 'change:' + name, record, record.attributes[ name ], options );\r\n    }\r\n\r\n    // Close the transaction.\r\n    isRoot && commit( record );\r\n}\r\n\r\nfunction begin( record : AttributesContainer ){\r\n    if( _begin( record ) ){\r\n        record._previousAttributes = new record.AttributesCopy( record.attributes );\r\n        record._changedAttributes = null;\r\n        return true;\r\n    }\r\n    \r\n    return false;\r\n}\r\n\r\nfunction markAsDirty( record : AttributesContainer, options : TransactionOptions ){\r\n    // Need to recalculate changed attributes, when we have nested set in change:attr handler\r\n    if( record._changedAttributes ){\r\n        record._changedAttributes = null;\r\n    }\r\n\r\n    return _markAsDirty( record, options );\r\n}\r\n\r\n/**\r\n * TODO: There's an opportunity to create an optimized pipeline for primitive types and Date, which makes the majority\r\n * of attributes. It might create the major speedup.\r\n * \r\n * Create the dedicated pipeline for owned and shared attributes as well.\r\n * \r\n * Three elements of the pipeline:\r\n * - from constructor\r\n * - from assignment\r\n * - from `set`\r\n */\r\n\r\nexport const UpdateRecordMixin = {\r\n// Need to override it here, since begin/end transaction brackets are overriden. \r\n    transaction( this : AttributesContainer, fun : ( self : AttributesContainer ) => void, options : TransactionOptions = {} ) : void{\r\n        const isRoot = begin( this );\r\n        fun.call( this, this );\r\n        isRoot && commit( this );\r\n    },\r\n            \r\n    // Handle nested changes. TODO: propagateChanges == false, same in transaction.\r\n    _onChildrenChange( child : Transactional, options : TransactionOptions ) : void {\r\n        const { _ownerKey } = child,\r\n              attribute = this._attributes[ _ownerKey ];\r\n\r\n        if( !attribute /* TODO: Must be an opposite, likely the bug */ || attribute.propagateChanges ) this.forceAttributeChange( _ownerKey, options );\r\n    },\r\n\r\n    // Simulate attribute change \r\n    forceAttributeChange( key : string, options : TransactionOptions = {} ){\r\n        // Touch an attribute in bounds of transaction\r\n        const isRoot = begin( this );\r\n\r\n        if( markAsDirty( this, options ) ){\r\n            trigger3( this, 'change:' + key, this, this.attributes[ key ], options );\r\n        }\r\n        \r\n        isRoot && commit( this );\r\n    },\r\n\r\n    _createTransaction( this : AttributesContainer, a_values : {}, options : TransactionOptions = {} ) : Transaction {\r\n        const isRoot = begin( this ),\r\n                changes : string[] = [],\r\n                nested : RecordTransaction[]= [],\r\n                { _attributes } = this,\r\n                values = options.parse ? this.parse( a_values, options ) : a_values;\r\n\r\n        let unknown;\r\n\r\n        if( shouldBeAnObject( this, values, options ) ){\r\n            for( let name in values ){\r\n                const spec = _attributes[ name ];\r\n\r\n                if( spec ){\r\n                    if( spec.doUpdate( values[ name ], this, options, nested ) ){\r\n                        changes.push( name );\r\n                    }\r\n                }\r\n                else{\r\n                    unknown || ( unknown = [] );\r\n                    unknown.push( `'${ name }'` );\r\n                }\r\n            }\r\n\r\n            if( unknown ){\r\n                unknownAttrsWarning( this, unknown, { values }, options );\r\n            }\r\n        }\r\n        \r\n        if( changes.length && markAsDirty( this, options ) ){\r\n            return new RecordTransaction( this, isRoot, nested, changes );\r\n        }\r\n        \r\n        // No changes, but there might be silent attributes with open transactions.\r\n        for( let pendingTransaction of nested ){\r\n            pendingTransaction.commit( this );\r\n        }\r\n\r\n        isRoot && commit( this );\r\n    }\r\n};\r\n\r\nexport function unknownAttrsWarning( record : AttributesContainer, unknown : string[], props, options ){\r\n    record._log( 'warn', 'Type-R:UnknownAttrs', `undefined attributes ${ unknown.join(', ')} are ignored.`, props, options.logger );\r\n}\r\n\r\n// One of the main performance tricks of Type-R.\r\n// Create loop unrolled constructors for internal attribute hash,\r\n// so the hidden class JIT optimization will be engaged and they will become static structs.\r\n// It dramatically improves record performance.\r\nexport function constructorsMixin( attrDefs : AttributesDescriptors ) : ConstructorsMixin {\r\n    const attrs = Object.keys( attrDefs );\r\n\r\n    const AttributesCopy : AttributesCopyConstructor = new Function( 'values', `\r\n        ${ attrs.map( attr =>`\r\n            this.${ attr } = values.${ attr };\r\n        `).join( '' ) }\r\n    `) as any;\r\n\r\n    AttributesCopy.prototype = Object.prototype;\r\n\r\n    const Attributes : AttributesConstructor = new Function( 'record', 'values', 'options', `\r\n        var _attrs = record._attributes;\r\n\r\n        ${ attrs.map( attr =>`\r\n            this.${ attr } = _attrs.${ attr }.doInit( values.${ attr }, record, options );\r\n        `).join( '' ) }\r\n    `) as any;\r\n\r\n    Attributes.prototype = Object.prototype;\r\n\r\n    return { Attributes, AttributesCopy };\r\n}\r\n\r\nexport function shouldBeAnObject( record : AttributesContainer, values : object, options ){\r\n    if( values && values.constructor === Object ) return true;\r\n\r\n    record._log( 'error', 'Type-R:InvalidObject', 'update with non-object is ignored!', { values }, options.logger );\r\n    return false;\r\n}\r\n\r\n// Transaction class. Implements two-phase transactions on object's tree. \r\n// Transaction must be created if there are actual changes and when markIsDirty returns true. \r\nexport class RecordTransaction implements Transaction {\r\n    // open transaction\r\n    constructor( public object : AttributesContainer,\r\n                 public isRoot : boolean,\r\n                 public nested : Transaction[],\r\n                 public changes : string[] ){}\r\n\r\n    // commit transaction\r\n    commit( initiator? : AttributesContainer ) : void {\r\n        const { nested, object, changes } = this;\r\n\r\n        // Commit all pending nested transactions...\r\n        for( let transaction of nested ){ \r\n            transaction.commit( object );\r\n        }\r\n\r\n        // Notify listeners on attribute changes...\r\n        // Transaction is never created when silent option is set, so just send events out.\r\n        const { attributes, _isDirty } = object;\r\n        for( let key of changes ){\r\n            trigger3( object, 'change:' + key, object, attributes[ key ], _isDirty );\r\n        }\r\n\r\n        this.isRoot && commit( object, initiator );\r\n    }\r\n}","import { IOEndpoint } from '../../io-tools';\r\nimport { LogLevel, tools, Logger } from '../../object-plus';\r\nimport { TransactionOptions } from '../../transactions';\r\nimport { AttributesContainer, AttributeUpdatePipeline, RecordTransaction, setAttribute } from '../updates';\r\n\r\nconst { notEqual, assign} = tools;\r\n\r\nexport type Transform = ( this : AnyType, next : any, prev : any, record : AttributesContainer, options : TransactionOptions ) => any;\r\nexport type ChangeHandler = ( this : AnyType, next : any, prev : any, record : AttributesContainer, options : TransactionOptions ) => void;\r\n\r\nexport interface AttributeOptions {\r\n    _metatype? : typeof AnyType\r\n    validate? : ( record : AttributesContainer, value : any, key : string ) => any\r\n    isRequired? : boolean\r\n    changeEvents? : boolean\r\n\r\n    endpoint? : IOEndpoint\r\n\r\n    type? : Function\r\n    value? : any\r\n    hasCustomDefault? : boolean\r\n\r\n    parse? : Parse\r\n    toJSON? : AttributeToJSON\r\n   \r\n    getHooks? : GetHook[]\r\n    transforms? : Transform[]\r\n    changeHandlers? : ChangeHandler[]\r\n\r\n    _onChange? : ChangeAttrHandler\r\n}\r\n\r\nexport type Parse = ( value : any, key : string ) => any;\r\nexport type GetHook = ( value : any, key : string ) => any;\r\nexport type AttributeToJSON = ( value : any, key : string ) => any\r\nexport type AttributeParse = ( value : any, key : string ) => any\r\nexport type ChangeAttrHandler = ( ( value : any, attr : string ) => void ) | string;\r\n\r\n// TODO: interface differs from options, do something obout it\r\nconst emptyOptions : TransactionOptions = {};\r\n\r\n/**\r\n * Typeless attribute. Is the base class for all other attributes.\r\n */\r\nexport class AnyType implements AttributeUpdatePipeline {\r\n    // Factory method to create attribute from options \r\n    static create : ( options : AttributeOptions, name : string ) => AnyType;\r\n    \r\n    /**\r\n     * Update pipeline functions\r\n     * =========================\r\n     *\r\n     * Stage 0. canBeUpdated( value )\r\n     * - presence of this function implies attribute's ability to update in place.\r\n     */\r\n    canBeUpdated( prev, next, options : TransactionOptions ) : any {}\r\n\r\n    /**\r\n     * Stage 1. Transform stage\r\n     */\r\n    transform( next : any, prev : any, model : AttributesContainer, options : TransactionOptions ) : any { return next; }\r\n\r\n    // convert attribute type to `this.type`.\r\n    convert( next : any, prev : any, model : AttributesContainer, options : TransactionOptions ) : any { return next; }\r\n\r\n    /**\r\n     * Stage 2. Check if attr value is changed\r\n     */\r\n    isChanged( a : any, b : any ) : boolean {\r\n        return notEqual( a, b );\r\n    }\r\n\r\n    /**\r\n     * Stage 3. Handle attribute change\r\n     */\r\n    handleChange( next : any, prev : any, model : AttributesContainer, options : TransactionOptions ) {}\r\n\r\n    /**\r\n     * End update pipeline definitions.\r\n     */\r\n\r\n    // create empty object passing backbone options to constructor...\r\n    create() { return void 0; }\r\n\r\n    // generic clone function for typeless attributes\r\n    // Must be overriden in sublass\r\n    clone( value : any, record : AttributesContainer ) {\r\n        return value;\r\n    }\r\n\r\n    dispose( record : AttributesContainer, value : any ) : void {\r\n        this.handleChange( void 0, value, record, emptyOptions );\r\n    }\r\n\r\n    validate( record : AttributesContainer, value : any, key : string ) : any {}\r\n\r\n    toJSON( value, key, options? : object ) {\r\n        return value && value.toJSON ? value.toJSON( options ) : value;\r\n    }\r\n\r\n    createPropertyDescriptor() : PropertyDescriptor | void {\r\n        const { name, getHook } = this;\r\n\r\n        if( name !== 'id' ){\r\n            return {\r\n                // call to optimized set function for single argument.\r\n                set( value ){\r\n                    setAttribute( this, name, value );\r\n                },\r\n\r\n                // attach get hook to the getter function, if it present\r\n                get : (\r\n                    getHook ?\r\n                        function() {\r\n                            return getHook.call( this, this.attributes[ name ], name );\r\n                        } :\r\n                        function() { return this.attributes[ name ]; }\r\n                ),\r\n\r\n                configurable : true\r\n            }\r\n        }\r\n    }\r\n\r\n    value : any\r\n\r\n    // Used as global default value for the given metatype\r\n    static defaultValue : any;\r\n\r\n    type : Function\r\n\r\n    initialize( name : string, options : TransactionOptions ){}\r\n\r\n    options : AttributeOptions\r\n\r\n    doInit( value, record : AttributesContainer, options : TransactionOptions ){\r\n        const v = value === void 0 ? this.defaultValue() : value,\r\n            x = this.transform( v, void 0, record, options );\r\n            \r\n        this.handleChange( x, void 0, record, options );\r\n        return x;\r\n    }\r\n\r\n    doUpdate( value, record : AttributesContainer, options : TransactionOptions, nested? : RecordTransaction[] ){\r\n        const { name } = this,\r\n            { attributes } = record,\r\n              prev = attributes[ name ];\r\n\r\n        const next = this.transform( value, prev, record, options );\r\n        attributes[ name ] = next;\r\n\r\n        if( this.isChanged( next, prev ) ) {\r\n            // Do the rest of the job after assignment\r\n            this.handleChange( next, prev, record, options );\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    propagateChanges : boolean\r\n\r\n    protected _log( level : LogLevel, code : string, text : string, value, record : AttributesContainer, logger : Logger ){\r\n        record._log( level, code, `${record.getClassName()}.${ this.name } ${ text }`, {\r\n            'New value' : value,\r\n            'Prev. value' : record.attributes[ this.name ]\r\n        }, logger );\r\n    }\r\n\r\n    defaultValue(){\r\n        return this.value;\r\n    }\r\n\r\n    constructor( public name : string, a_options : AttributeOptions ) {        \r\n        // Save original options...\r\n        this.options = a_options;\r\n\r\n        // Clone options.\r\n        const options : AttributeOptions = assign( { getHooks : [], transforms : [], changeHandlers : [] }, a_options );\r\n        options.getHooks = options.getHooks.slice();\r\n        options.transforms = options.transforms.slice();\r\n        options.changeHandlers = options.changeHandlers.slice();\r\n\r\n        const {\r\n                  value, type, parse, toJSON, changeEvents,\r\n                  validate, getHooks, transforms, changeHandlers\r\n              } = options;\r\n\r\n        // Initialize default value...\r\n        this.value = value;\r\n        this.type  = type;\r\n\r\n        // TODO: An opportunity to optimize for attribute subtype.\r\n        if( !options.hasCustomDefault && type ){\r\n            this.defaultValue = this.create;\r\n        }\r\n        else if( tools.isValidJSON( value ) ){ \r\n            // JSON literals must be deep copied.\r\n            this.defaultValue = new Function( `return ${ JSON.stringify( value ) };` ) as any;\r\n        }\r\n        else{\r\n            this.defaultValue = this.defaultValue;\r\n        }\r\n\r\n        // Changes must be bubbled when they are not disabled for an attribute and transactional object.\r\n        this.propagateChanges = changeEvents !== false;\r\n\r\n        this.toJSON = toJSON === void 0 ? this.toJSON : toJSON;\r\n\r\n        this.validate = validate || this.validate;\r\n        \r\n        if( options.isRequired ){\r\n            this.validate = wrapIsRequired( this.validate );\r\n        }\r\n\r\n        /**\r\n         * Assemble pipelines...\r\n         */\r\n\r\n        // `convert` is default transform, which is always present...\r\n        transforms.unshift( this.convert );\r\n\r\n        // Get hook from the attribute will be used first...\r\n        if( this.get ) getHooks.unshift( this.get );\r\n\r\n        // let subclasses configure the pipeline...\r\n        this.initialize.call( this, options );\r\n\r\n        // let attribute spec configure the pipeline...\r\n        if( getHooks.length ){\r\n            const getHook = this.getHook = getHooks.reduce( chainGetHooks );\r\n\r\n            const { validate } = this;\r\n            this.validate = function( record : AttributesContainer, value : any, key : string ){\r\n                return validate.call( this, record, getHook.call( record, value, key ), key );\r\n            }\r\n        }\r\n        \r\n        this.transform = transforms.length ? transforms.reduce( chainTransforms ) : this.transform;\r\n        \r\n        this.handleChange = changeHandlers.length ? changeHandlers.reduce( chainChangeHandlers ) : this.handleChange;\r\n\r\n        // Attribute-level parse transform are attached as update hooks modifiers...\r\n        const { doInit, doUpdate } = this;\r\n        this.doInit = parse ? function( value, record : AttributesContainer, options : TransactionOptions ){\r\n            return doInit.call( this, options.parse && value !== void 0 ? parse.call( record, value, this.name ) : value, record, options );\r\n        } : doInit;\r\n\r\n        this.doUpdate = parse ? function( value, record : AttributesContainer, options : TransactionOptions, nested? : RecordTransaction[] ){\r\n            return doUpdate.call( this, options.parse && value !== void 0 ? parse.call( record, value, this.name ) : value, record, options, nested );\r\n        } : doUpdate;\r\n    }\r\n\r\n    getHook : ( value, key : string ) => any = null\r\n    get : ( value, key : string ) => any\r\n}\r\n\r\n\r\nfunction chainGetHooks( prevHook : GetHook, nextHook : GetHook ) : GetHook {\r\n    return function( value, name ) {\r\n        return nextHook.call( this, prevHook.call( this, value, name ), name );\r\n    }\r\n}\r\n\r\nfunction chainTransforms( prevTransform : Transform, nextTransform : Transform ) : Transform {\r\n    return function( next, prev, record, options ) {\r\n        return nextTransform.call( this, prevTransform.call( this, next, prev, record, options ), prev, record, options );\r\n    }\r\n}\r\n\r\nfunction chainChangeHandlers( prevHandler : ChangeHandler, nextHandler : ChangeHandler ) : ChangeHandler {\r\n    return function( next, prev, record, options ) {\r\n        prevHandler.call( this, next, prev, record, options );\r\n        nextHandler.call( this, next, prev, record, options );\r\n    }\r\n}\r\n\r\nfunction wrapIsRequired( validate ){\r\n    return function( record : AttributesContainer, value : any, key : string ){\r\n        return value ? validate.call( this, record, value, key ) : 'Required';\r\n    }\r\n}","/**\r\n * Built-in JSON types attributes: Object, Array, Number, String, Boolean, and immutable class.\r\n * \r\n * Adds type assertions, default validation, and optimized update pipeline.\r\n */\r\n\r\nimport { TransactionOptions } from '../../transactions';\r\nimport { AnyType } from './any';\r\nimport { AttributesContainer } from '../updates';\r\n\r\n/**\r\n * Custom class must be immutable class which implements toJSON() method\r\n * with a constructor taking json.\r\n */\r\nexport class ImmutableClassType extends AnyType {\r\n    type : new ( value? : any ) => {}\r\n\r\n    create(){\r\n        return new this.type();\r\n    }\r\n\r\n    convert( next : any ) : any {\r\n        return next == null || next instanceof this.type ? next : new this.type( next );\r\n    }\r\n\r\n    toJSON( value, key? : string, options? : object ){\r\n        return value && value.toJSON ? value.toJSON( options ) : value;\r\n    }\r\n\r\n    clone( value ) {\r\n        return new this.type( this.toJSON( value ) );\r\n    }\r\n\r\n    isChanged( a, b ){\r\n        return a !== b;\r\n    }\r\n}\r\n\r\n/**\r\n * Optimized attribute of primitive type.\r\n * \r\n * Primitives has specialized simplified pipeline.\r\n */\r\nexport class PrimitiveType extends AnyType {\r\n    type : NumberConstructor | StringConstructor | BooleanConstructor\r\n\r\n    dispose(){}\r\n    create() { return this.type(); }\r\n\r\n    toJSON( value ) { return value; }\r\n\r\n    convert( next ) { return next == null ? next : this.type( next ); }\r\n\r\n    isChanged( a, b ) { return a !== b; }\r\n\r\n    clone( value ) { return value; }\r\n\r\n    doInit( value, record : AttributesContainer, options : TransactionOptions ){\r\n        return this.transform( value === void 0 ? this.value : value, void 0, record, options );\r\n    }\r\n\r\n    doUpdate( value, record, options, nested ){\r\n        const   { name } = this,\r\n                { attributes } = record,\r\n                prev = attributes[ name ];\r\n        \r\n        return prev !== ( attributes[ name ] = this.transform( value, prev, record, options ) );\r\n    }\r\n\r\n    initialize(){\r\n        if( !this.options.hasCustomDefault ){\r\n            this.value = this.type();\r\n        }\r\n    }\r\n}\r\n\r\n// Number type with special validation algothim.\r\n/** @private */ \r\nexport class NumericType extends PrimitiveType {\r\n    type : NumberConstructor\r\n\r\n    create(){\r\n        return 0;\r\n    }\r\n\r\n    convert( next, prev?, record?, options? ) {\r\n        const num = next == null ? next : this.type( next );\r\n\r\n        if( num !== num ){\r\n            this._log( 'error', 'Type-R:InvalidNumber', 'Number attribute is assigned with an invalid number', next, record, options.logger );\r\n        }\r\n        \r\n        return num;\r\n    }\r\n\r\n    validate( model, value, name ) {\r\n        // Whatever is not symmetrically serializable to JSON, is not valid by default.\r\n        if( value != null && !isFinite( value ) ) {\r\n            return name + ' is not valid number';\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Compatibility wrapper for Array type.\r\n * @private\r\n */ \r\nexport class ArrayType extends AnyType {\r\n    toJSON( value ) { return value; }\r\n    dispose(){}\r\n    create(){ return []; }\r\n\r\n    convert( next, prev, record, options ) {\r\n        // Fix incompatible constructor behaviour of Array...\r\n        if( next == null || Array.isArray( next ) ) return next;\r\n\r\n        this._log( 'error', 'Type-R:InvalidArray', 'Array attribute assigned with non-array value', next, record, options.logger );\r\n\r\n        return [];\r\n    }\r\n\r\n    clone( value ){\r\n        return value && value.slice();\r\n    }\r\n}\r\n\r\nexport class ObjectType extends AnyType {\r\n    create(){ return {}; }\r\n\r\n    convert( next, prev, record, options ) {\r\n        if( next == null || typeof next === 'object' ) return next;\r\n                \r\n        this._log( 'error', 'Type-R:InvalidObject', 'Object attribute is assigned with non-object value', next, record, options.logger );\r\n        return {};\r\n    }\r\n}\r\n\r\nexport function doNothing(){}\r\n\r\nexport class FunctionType extends AnyType {\r\n    // Functions are not serialized.\r\n    toJSON( value ) { return void 0; }\r\n    create(){ return doNothing; }\r\n    dispose(){}\r\n\r\n    convert( next, prev, record, options ) {\r\n        // Fix incompatible constructor behaviour of Function...\r\n        if( next == null || typeof next === 'function' ) return next;\r\n\r\n        this._log( 'error', 'Type-R:InvalidFunction', 'Function attribute assigned with non-function value', next, record, options.logger );\r\n\r\n        return doNothing;\r\n    }\r\n\r\n    // Functions are not cloned.\r\n    clone( value ){ return value; }\r\n}\r\n","/**\r\n * Date attribute type.\r\n * \r\n * Implements validation, cross-browser compatibility fixes, variety of Date serialization formats,\r\n * and optimized update pipeline.\r\n */\r\nimport { TransactionOptions } from '../../transactions';\r\nimport { AnyType } from './any';\r\nimport { AttributesContainer } from '../updates';\r\n\r\n// Date Attribute\r\n/** @private */\r\nexport class DateType extends AnyType {\r\n    create(){\r\n        return new Date();\r\n    }\r\n    \r\n    convert( next : any, a, record, options ){\r\n        if( next == null || next instanceof Date ) return next;\r\n\r\n        const date = new Date( next ),\r\n              timestamp = date.getTime();\r\n\r\n        if( timestamp !== timestamp ){\r\n            this._log( 'error', 'Type-R:InvalidDate', 'Date attribute assigned with invalid date', next, record, options.logger );\r\n        }\r\n\r\n        return date;\r\n    }\r\n\r\n    validate( model, value, name ) {\r\n        if( value != null ){\r\n            const timestamp = value.getTime(); \r\n            if( timestamp !== timestamp ) return name + ' is Invalid Date';\r\n        }\r\n    }\r\n\r\n    toJSON( value ) { return value && value.toISOString(); }\r\n\r\n    isChanged( a, b ) { return ( a && a.getTime() ) !== ( b && b.getTime() ); }\r\n\r\n    doInit( value, record : AttributesContainer, options : TransactionOptions ){\r\n        // Date don't have handleChanges step.\r\n        return this.transform( value === void 0 ? this.defaultValue() : value, void 0, record, options );\r\n    }\r\n\r\n    doUpdate( value, record, options, nested ){\r\n        const   { name } = this,\r\n                { attributes } = record,\r\n                prev = attributes[ name ];\r\n        \r\n        // Date don't have handleChanges step.\r\n        return this.isChanged( prev , attributes[ name ] = this.transform( value, prev, record, options ) );\r\n    }\r\n\r\n    clone( value ) { return value && new Date( value.getTime() ); }\r\n    dispose(){}\r\n}\r\n\r\n// If ISO date is not supported by date constructor (such as in Safari), polyfill it.\r\nfunction supportsDate( date ){\r\n    return !isNaN( ( new Date( date ) ).getTime() );\r\n}\r\n\r\nif( !supportsDate('2011-11-29T15:52:30.5') ||\r\n    !supportsDate('2011-11-29T15:52:30.52') ||\r\n    !supportsDate('2011-11-29T15:52:18.867') ||\r\n    !supportsDate('2011-11-29T15:52:18.867Z') ||\r\n    !supportsDate('2011-11-29T15:52:18.867-03:30') ){\r\n\r\n    DateType.prototype.convert = function( value ){\r\n        return value == null || value instanceof Date ? value : new Date( safeParseDate( value ) );\r\n    }\r\n}\r\n\r\nconst numericKeys    = [ 1, 4, 5, 6, 7, 10, 11 ],\r\n      isoDatePattern = /^(\\d{4}|[+\\-]\\d{6})(?:-(\\d{2})(?:-(\\d{2}))?)?(?:T(\\d{2}):(\\d{2})(?::(\\d{2})(?:\\.(\\d{3}))?)?(?:(Z)|([+\\-])(\\d{2})(?::(\\d{2}))?)?)?$/;\r\n\r\nfunction safeParseDate( date : string ) : number {\r\n    var timestamp, struct : any[], minutesOffset = 0;\r\n\r\n    if( ( struct = isoDatePattern.exec( date )) ) {\r\n        // avoid NaN timestamps caused by undefined values being passed to Date.UTC\r\n        for( var i = 0, k; ( k = numericKeys[ i ] ); ++i ) {\r\n            struct[ k ] = +struct[ k ] || 0;\r\n        }\r\n\r\n        // allow undefined days and months\r\n        struct[ 2 ] = (+struct[ 2 ] || 1) - 1;\r\n        struct[ 3 ] = +struct[ 3 ] || 1;\r\n\r\n        if( struct[ 8 ] !== 'Z' && struct[ 9 ] !== undefined ) {\r\n            minutesOffset = struct[ 10 ] * 60 + struct[ 11 ];\r\n\r\n            if( struct[ 9 ] === '+' ) {\r\n                minutesOffset = 0 - minutesOffset;\r\n            }\r\n        }\r\n\r\n        timestamp =\r\n            Date.UTC( struct[ 1 ], struct[ 2 ], struct[ 3 ], struct[ 4 ], struct[ 5 ] + minutesOffset, struct[ 6 ],\r\n                    struct[ 7 ] );\r\n    }\r\n    else {\r\n        timestamp = Date.parse( date );\r\n    }\r\n\r\n    return timestamp;\r\n}","import { ItemsBehavior, Transactional, transactionApi, TransactionOptions } from '../../transactions';\r\nimport { ValidationError } from '../../validation';\r\nimport { AnyType } from './any';\r\nimport { AttributesContainer, ConstructorOptions } from '../updates';\r\n\r\nconst { free, aquire } = transactionApi;\r\n\r\nexport class AggregatedType extends AnyType {\r\n    type : typeof Transactional\r\n\r\n    clone( value : Transactional ) : Transactional {\r\n        return value ? value.clone() : value;\r\n    }\r\n\r\n    toJSON( x, key : string, options : object ){ return x && x.toJSON( options ); }\r\n\r\n    doInit( value, record : AttributesContainer, options : ConstructorOptions ){\r\n        const v = options.clone ? this.clone( value ) : (\r\n            value === void 0 ? this.defaultValue() : value\r\n        );\r\n\r\n        const x = this.transform( v, void 0, record, options );\r\n        this.handleChange( x, void 0, record, options );\r\n        return x;\r\n    }\r\n\r\n    doUpdate( value, record, options, nested : any[] ){ // Last to things can be wrapped to an object, either transaction or ad-hoc\r\n        const key = this.name, { attributes } = record; \r\n        const prev = attributes[ key ];\r\n        let update;\r\n\r\n        // This can be moved to transactional attribute. And chained with the rest.\r\n        if( update = this.canBeUpdated( prev, value, options ) ) { // todo - skip empty updates.\r\n            const nestedTransaction = prev._createTransaction( update, options );\r\n            if( nestedTransaction ){\r\n                if( nested ){\r\n                    nested.push( nestedTransaction );\r\n                }\r\n                else{\r\n                    nestedTransaction.commit( record );\r\n                }\r\n\r\n                if( this.propagateChanges ) return true;\r\n            }\r\n\r\n            return false;\r\n        }\r\n\r\n        const next = this.transform( value, prev, record, options );\r\n        attributes[ key ] = next;\r\n\r\n        if( this.isChanged( next, prev ) ) { // Primitives and nested comparison can be inlined.\r\n            // Do the rest of the job after assignment\r\n            this.handleChange( next, prev, record, options );\r\n\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    canBeUpdated( prev : Transactional, next : any, options : TransactionOptions ) : any {\r\n        // If an object already exists, and new value is of incompatible type, let object handle the update.\r\n        if( prev && next != null ){\r\n            if( next instanceof this.type ){\r\n                // In case if merge option explicitly specified, force merge.\r\n                if( options.merge ) return next.__inner_state__;\r\n            }\r\n            else{\r\n                return next;\r\n            }\r\n        }\r\n    }\r\n\r\n    convert( next : any, prev : any, record : AttributesContainer, options : TransactionOptions ) : Transactional {\r\n        // Invoke class factory to handle abstract classes\r\n        if( next == null ) return next;\r\n        \r\n        if( next instanceof this.type ){\r\n            if( next._shared && !( next._shared & ItemsBehavior.persistent ) ) { // TODO: think more about shared types assignment compatibility. \r\n                this._log( 'error', 'Type-R:InvalidCollection', 'aggregated collection attribute is assigned with shared collection type', next, record, options.logger );\r\n            }\r\n\r\n            // With explicit 'merge' option we need to clone an object if its previous value was 'null'.\r\n            // This is an only case we could be here when merge === true.\r\n            if( options.merge ) return next.clone();\r\n\r\n            if( next._owner ){\r\n                this._log( 'warn', 'Type-R:InvalidOwner', 'object alreay has an owner and was cloned. Use explicit object.clone() to dismiss this warning.', next, record, options.logger );\r\n                return next.clone();\r\n            }\r\n\r\n            return next;\r\n        }\r\n\r\n        return ( this.type as any).create( next, options );\r\n    }\r\n\r\n    dispose ( record : AttributesContainer, value : Transactional ){\r\n        if( value ){\r\n            this.handleChange( void 0, value, record, {} );\r\n        }\r\n    }\r\n\r\n    validate( record : AttributesContainer, value : Transactional ) : ValidationError {\r\n        var error = value && value.validationError;\r\n        if( error ) return error;\r\n    }\r\n\r\n    create() : Transactional {\r\n        return (<any>this.type).create(); // this the subclass of Transactional here.\r\n    }\r\n\r\n    initialize( options ){\r\n        options.changeHandlers.unshift( this._handleChange );\r\n    }\r\n\r\n    _handleChange( next : Transactional, prev : Transactional, record : AttributesContainer, options : TransactionOptions ){\r\n        if( prev ){\r\n            free( record, prev );\r\n            options.unset || prev.dispose();\r\n        } \r\n        \r\n        if( next ) aquire( record, next, this.name );\r\n    }\r\n}","import { eventsApi } from '../../object-plus';\r\nimport { ItemsBehavior, Transactional, transactionApi, TransactionOptions } from '../../transactions';\r\nimport { AnyType } from './any';\r\nimport { AttributesContainer, ConstructorOptions } from '../updates';\r\nimport { ChainableAttributeSpec } from '../attrDef';\r\n\r\nconst { on, off } = eventsApi,\r\n    { free, aquire } = transactionApi;\r\n\r\n/************************\r\n * Shared attribute definition.\r\n * - Not serialized.\r\n * - Listening to the changes.\r\n * - Doesn't take ownership when assigned with object of proper type.\r\n * - Takes ownership on objects which are converted.\r\n */\r\n\r\nconst shareAndListen = ItemsBehavior.listen | ItemsBehavior.share;\r\n\r\n/** @private */\r\nexport class SharedType extends AnyType {\r\n    type : typeof Transactional\r\n\r\n     doInit( value, record : AttributesContainer, options : ConstructorOptions ){\r\n        const v = options.clone ? this.clone( value, record ) : (\r\n            value === void 0 ? this.defaultValue() : value\r\n        );\r\n\r\n        const x = this.transform( v, void 0, record, options );\r\n        this.handleChange( x, void 0, record, options );\r\n        return x;\r\n    }\r\n\r\n    doUpdate( value, record, options, nested : any[] ){ // Last to things can be wrapped to an object, either transaction or ad-hoc\r\n        const key = this.name, { attributes } = record; \r\n        const prev = attributes[ key ];\r\n        let update;\r\n\r\n        // This can be moved to transactional attribute. And chained with the rest.\r\n        if( update = this.canBeUpdated( prev, value, options ) ) { // todo - skip empty updates.\r\n            const nestedTransaction = prev._createTransaction( update, options );\r\n            if( nestedTransaction ){\r\n                if( nested ){\r\n                    nested.push( nestedTransaction );\r\n                }\r\n                else{\r\n                    nestedTransaction.commit( record );\r\n                }\r\n\r\n                if( this.propagateChanges ) return true;\r\n            }\r\n\r\n            return false;\r\n        }\r\n\r\n        const next = this.transform( value, prev, record, options );\r\n        attributes[ key ] = next;\r\n\r\n        if( this.isChanged( next, prev ) ) { // Primitives and nested comparison can be inlined.\r\n            // Do the rest of the job after assignment\r\n            this.handleChange( next, prev, record, options );\r\n\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    clone( value : Transactional, record : AttributesContainer ) : Transactional {\r\n        // References are not cloned.\r\n        if( !value || value._owner !== record ) return value;\r\n\r\n        // Implicitly created objects are cloned.\r\n        const clone = value.clone();\r\n        aquire( record, clone, this.name );\r\n        return clone;\r\n    }\r\n\r\n    // Do not serialize by default.\r\n    toJSON(){}\r\n\r\n    canBeUpdated( prev : Transactional, next : any, options : TransactionOptions ) : any {\r\n        // If an object already exists, and new value is of incompatible type, let object handle the update.\r\n        if( prev && next != null && !( next instanceof this.type ) ){\r\n            return next;\r\n        }\r\n    }\r\n\r\n    convert( next : any, prev : any, record : AttributesContainer, options : TransactionOptions ) : Transactional {\r\n        if( next == null || next instanceof this.type ) return next;\r\n\r\n        // Convert type using implicitly created transactional object.\r\n        const implicitObject = new ( this.type as any )( next, options, shareAndListen );\r\n\r\n        // To prevent a leak, we need to take an ownership on it.\r\n        aquire( record, implicitObject, this.name );\r\n\r\n        return implicitObject;\r\n    }\r\n\r\n    // Refs are always valid.\r\n    validate( model, value, name ){}\r\n\r\n    // They are always created as null.\r\n    create() : Transactional {\r\n        return null;\r\n    }\r\n\r\n    // Listening to the change events\r\n    _handleChange( next : Transactional, prev : Transactional, record : AttributesContainer, options ){\r\n        if( prev ){\r\n            // If there was an implicitly created object, remove an ownership.\r\n            if( prev._owner === record ){\r\n                free( record, prev );\r\n                options.unset || prev.dispose();\r\n            }\r\n            else{\r\n                off( prev, prev._changeEventName, this._onChange, record );\r\n            }\r\n        }  \r\n \r\n        if( next ){\r\n            // No need to take an ownership for an implicit object - already done in convert or clone.\r\n            if( next._owner !== record ){\r\n                on( next, next._changeEventName, this._onChange, record );\r\n            }\r\n        } \r\n    }\r\n\r\n    dispose( record : AttributesContainer, value : Transactional ){\r\n        if( value ){\r\n            this.handleChange( void 0, value, record, {} );\r\n        }\r\n    }\r\n\r\n    _onChange : ( child : Transactional, options : TransactionOptions, initiator : Transactional ) => void \r\n\r\n    initialize( options ){\r\n        // Create change event handler which knows current attribute name. \r\n        const attribute = this;\r\n        this._onChange = this.propagateChanges ? function( child, options, initiator ){\r\n            this === initiator || this.forceAttributeChange( attribute.name, options );\r\n        } : ignore;\r\n\r\n        options.changeHandlers.unshift( this._handleChange );\r\n    }\r\n}\r\n\r\nfunction ignore(){}","import { PrimitiveType, NumericType, ObjectType, ImmutableClassType, FunctionType, ArrayType } from './basic';\r\nimport { DateType } from './date';\r\nimport { AnyType, AttributeOptions } from './any';\r\n\r\nexport * from './any';\r\nexport * from './basic';\r\nexport * from './date';\r\nexport * from './owned';\r\nexport * from './shared';\r\n\r\n/**\r\n * Every record attribute type has the corresponding metatype controlling its behavior.\r\n * For built-in types, Type-R uses the predefined list to resolve metatype in order to avoid global objects modifications.\r\n * For user-defined types, static `_metatype` constructor member is used.\r\n */\r\n\r\nconst builtins : Function[] = [ String, Number, Boolean, Date, Object, Array, Function ],\r\n      metatypes = [ PrimitiveType, NumericType, PrimitiveType, DateType, ObjectType, ArrayType, FunctionType ];\r\n\r\nexport function getMetatype( Ctor : Function ){\r\n    return ( Ctor as any )._metatype || resolveBuiltins( Ctor );\r\n}\r\n\r\nAnyType.create = ( options : AttributeOptions, name : string ) => {\r\n    const type = options.type,\r\n          AttributeCtor = options._metatype || ( type ? getMetatype( type ): AnyType );\r\n\r\n    return new AttributeCtor( name, options );\r\n}\r\n\r\nfunction resolveBuiltins( Ctor : Function ){\r\n    const idx = builtins.indexOf( Ctor );\r\n    return idx < 0 ? ImmutableClassType : metatypes[ idx ];\r\n}","/**\r\n * Type spec engine. Declare attributes using chainable syntax,\r\n * and returns object with spec.\r\n */\r\nimport { IOEndpoint } from '../io-tools';\r\nimport { definitionDecorator, EventMap, EventsDefinition, tools } from '../object-plus';\r\nimport { Transactional } from '../transactions';\r\nimport { AttributeOptions, Parse, AnyType, getMetatype, SharedType } from './metatypes';\r\nimport { AttributesContainer } from './updates';\r\n\r\nconst { assign } = tools;\r\n\r\nexport interface AttributeCheck {\r\n    ( value : any, key : string ) : boolean\r\n    error? : any\r\n}\r\n\r\n// Infer the proper TS type from a Type-R attribute spec.\r\nexport type Infer<A> =\r\n    A extends ChainableAttributeSpec<infer F> ? TrueReturnType<F> :\r\n    A extends Function ? TrueReturnType<A> :\r\n    A;\r\n \r\n// Extract the proper TS return type for a function or constructor.\r\ntype TrueReturnType<F extends Function> =\r\n    F extends DateConstructor ? Date :\r\n    F extends ( ...args : any[] ) => infer R ? R :\r\n    F extends new ( ...args : any[] ) => infer R ? R :\r\n    void;\r\n\r\nexport class ChainableAttributeSpec<F extends Function>{\r\n    options : AttributeOptions & { type? : F };\r\n\r\n    constructor( options : AttributeOptions ) {\r\n        // Shallow copy options, fill it with defaults.\r\n        this.options = { getHooks : [], transforms : [], changeHandlers : []};\r\n        if( options ) assign( this.options, options );\r\n    }\r\n\r\n    check( check : AttributeCheck, error? : any ) : this {\r\n        function validate( model, value, name ){\r\n            if( !check.call( model, value, name ) ){\r\n                const msg = error || check.error || name + ' is not valid';\r\n                return typeof msg === 'function' ? msg.call( model, name ) : msg;\r\n            }\r\n        }\r\n\r\n        const prev = this.options.validate;\r\n\r\n        return this.metadata({\r\n            validate : prev ? (\r\n                            function( model, value, name ){\r\n                                return prev( model, value, name ) || validate( model, value, name );\r\n                            }\r\n                       ) : validate\r\n        });\r\n    }\r\n\r\n    get as() : PropertyDecorator {\r\n        return definitionDecorator( 'attributes', this );\r\n    }\r\n\r\n    get isRequired() : this {\r\n        return this.required;\r\n    }\r\n\r\n    get required() : this {\r\n        return this.metadata({ isRequired : true }); \r\n    }\r\n\r\n    endpoint( endpoint : IOEndpoint ) : this {\r\n        return this.metadata({ endpoint });\r\n    }\r\n\r\n    watcher( ref : string | ( ( value : any, key : string ) => void ) ) : this {\r\n        return this.metadata({ _onChange : ref });\r\n    }\r\n\r\n    // Attribute-specific parse transform\r\n    parse( fun : Parse ) : this {\r\n        return this.metadata({ parse : fun });\r\n    }\r\n\r\n    toJSON( fun ) : this {\r\n        return this.metadata({\r\n            toJSON : typeof fun === 'function' ? fun : ( fun ? ( x, k, o ) => x && x.toJSON( o ) : emptyFunction ) \r\n        });\r\n    }\r\n\r\n    // Attribute get hook.\r\n    get( fun ) : this {\r\n        return this.metadata({\r\n            getHooks : this.options.getHooks.concat( fun )\r\n        });\r\n    }\r\n\r\n    // Attribute set hook.\r\n    set( fun ) : this {\r\n        function handleSetHook( next, prev, record : AttributesContainer, options ) {\r\n            if( this.isChanged( next, prev ) ) {\r\n                const changed = fun.call( record, next, this.name );\r\n                return changed === void 0 ? prev : this.convert( changed, prev, record, options );\r\n            }\r\n\r\n            return prev;\r\n        }\r\n\r\n        return this.metadata({\r\n            transforms : this.options.transforms.concat( handleSetHook )\r\n        });\r\n    }\r\n\r\n    changeEvents( events : boolean ) : this {\r\n        return this.metadata({ changeEvents : events });\r\n    }\r\n\r\n    // Subsribe to events from an attribute.\r\n    events( map : EventsDefinition ) : this {\r\n        const eventMap = new EventMap( map );\r\n\r\n        function handleEventsSubscribtion( next, prev, record : AttributesContainer ){\r\n            prev && prev.trigger && eventMap.unsubscribe( record, prev );\r\n\r\n            next && next.trigger && eventMap.subscribe( record, next );\r\n        }\r\n\r\n        return this.metadata({\r\n            changeHandlers : this.options.changeHandlers.concat( handleEventsSubscribtion )\r\n        });\r\n    }\r\n\r\n    // Creates a copy of the spec.\r\n    get has() : this {\r\n        return this;\r\n    }\r\n\r\n    metadata( options : object ) : this {\r\n        const cloned = new ChainableAttributeSpec( this.options );\r\n        assign( cloned.options, options );\r\n        return cloned as any;\r\n    }\r\n\r\n    value( x ) : this {\r\n        return this.metadata({ value : x, hasCustomDefault : true });\r\n    }\r\n\r\n    static from( spec : any ) : ChainableAttributeSpec<any> {\r\n        // Pass metatype through untouched...\r\n        if( spec && spec instanceof ChainableAttributeSpec ) {\r\n            return spec;\r\n        }\r\n\r\n        return typeof spec === 'function' ? type( spec ) : value( spec );\r\n    }\r\n}\r\n\r\nfunction emptyFunction(){}\r\n\r\nexport function type<F extends Function>( this : void, Type : ChainableAttributeSpec<F> | F, value? : any ) : ChainableAttributeSpec<F> {\r\n    if( Type instanceof ChainableAttributeSpec ) return Type;\r\n\r\n    const attrDef = new ChainableAttributeSpec<F>({ type : Type }),\r\n          defaultValue = Type && value === void 0 ? getMetatype( Type ).defaultValue : value;\r\n\r\n    return defaultValue === void 0 ? attrDef : attrDef.value( defaultValue );\r\n}\r\n\r\nexport function shared<C extends Function>( this : void, Constructor : C ) : ChainableAttributeSpec<C> {\r\n    return new ChainableAttributeSpec<C>({\r\n        value : null,\r\n        type : Constructor,\r\n        _metatype : SharedType\r\n    });\r\n}\r\n\r\n// Create attribute metatype inferring the type from the value.\r\nexport function value( this : void, x : any ) : ChainableAttributeSpec<any> {\r\n    const Type = inferType( x ),\r\n        // Transactional types inferred from values must have shared type. \r\n        AttrDef = Type && Type.prototype instanceof Transactional ? shared( Type ) :\r\n                  type( Type );\r\n\r\n    return AttrDef.value( x );\r\n}\r\n\r\nfunction inferType( value : any ) : Function {\r\n    switch( typeof value ) {\r\n        case 'number' :\r\n            return Number;\r\n        case 'string' :\r\n            return String;\r\n        case 'boolean' :\r\n            return Boolean;\r\n        case 'function' :\r\n            return Function;\r\n        case 'undefined' :\r\n            return void 0;\r\n        case 'object' :\r\n            return value ? <any> value.constructor : void 0;\r\n    }\r\n}","import { IOEndpoint } from '../io-tools';\r\nimport { eventsApi, tools as _ } from '../object-plus';\r\nimport { CompiledReference } from '../traversable';\r\nimport { ChainableAttributeSpec } from './attrDef';\r\nimport { AnyType } from './metatypes';\r\nimport { ConstructorsMixin, constructorsMixin } from './updates';\r\n\r\nexport interface RecordAttributesMixin extends ConstructorsMixin {\r\n    // Attributes descriptors\r\n    _attributes : AttributeDescriptors\r\n    _attributesArray : AnyType[]\r\n    \r\n    // Attribute's property descriptors\r\n    properties : PropertyDescriptorMap\r\n\r\n    // Event map for record's local events.\r\n    _localEvents? : eventsApi.EventMap,\r\n\r\n    _endpoints : { [ name : string ] : IOEndpoint }\r\n}\r\n\r\nexport interface AttributeDescriptors {\r\n    [ name : string ] : AnyType\r\n}\r\n\r\n// Create attribute from the type spec.\r\nexport function createAttribute( spec : any, name : string ) : AnyType {\r\n    return AnyType.create( ChainableAttributeSpec.from( spec ).options, name );\r\n}\r\n\r\n// Create record mixin from the given record's attributes definition\r\nexport function createAttributesMixin( attributesDefinition : object, baseClassAttributes : AttributeDescriptors ) : RecordAttributesMixin {\r\n    const myAttributes = _.transform( {} as AttributeDescriptors, attributesDefinition, createAttribute ),\r\n          allAttributes = _.defaults( {} as AttributeDescriptors, myAttributes, baseClassAttributes );\r\n\r\n    const ConstructorsMixin = constructorsMixin( allAttributes );\r\n\r\n    return {\r\n        ...ConstructorsMixin,\r\n        _attributes : new ConstructorsMixin.AttributesCopy( allAttributes ),\r\n        _attributesArray : Object.keys( allAttributes ).map( key => allAttributes[ key ] ),\r\n        properties : _.transform( <PropertyDescriptorMap>{}, myAttributes, x => x.createPropertyDescriptor() ),\r\n        ...localEventsMixin( myAttributes ),\r\n        _endpoints : _.transform( {}, allAttributes, attrDef => attrDef.options.endpoint )\r\n    }            \r\n}\r\n\r\ninterface LocalEventsMixin {\r\n    _localEvents? : eventsApi.EventMap\r\n}\r\n\r\nfunction localEventsMixin( attrSpecs : AttributeDescriptors ) : LocalEventsMixin {\r\n    let _localEvents : eventsApi.EventMap;\r\n\r\n    for( var key in attrSpecs ){\r\n        const attribute = attrSpecs[ key ],\r\n            { _onChange } = attribute.options; \r\n\r\n        if( _onChange ){\r\n            _localEvents || ( _localEvents = new eventsApi.EventMap() );\r\n\r\n            _localEvents.addEvent( 'change:' + key,\r\n                typeof _onChange === 'string' ?\r\n                    createWatcherFromRef( _onChange, key ) : \r\n                    wrapWatcher( _onChange, key ) );\r\n        }\r\n    }\r\n\r\n    return _localEvents ? { _localEvents } : {};\r\n}\r\n\r\nfunction wrapWatcher( watcher, key ){\r\n    return function( record, value ){\r\n        watcher.call( record, value, key );\r\n    } \r\n}\r\n\r\nfunction createWatcherFromRef( ref : string, key : string ){\r\n    const { local, resolve, tail } = new CompiledReference( ref, true );\r\n    return local ?\r\n        function( record, value ){\r\n            record[ tail ]( value, key );\r\n        } :\r\n        function( record, value ){\r\n            resolve( record )[ tail ]( value, key );\r\n        }\r\n}","import { IOEndpoint, IONode, IOOptions, IOPromise, startIO } from '../io-tools';\r\n\r\nexport interface IORecord extends IONode {\r\n    getEndpoint() : IOEndpoint\r\n    save( options? : IOOptions ) : IOPromise<this>\r\n    fetch( options? : IOOptions ) : IOPromise<this>\r\n    destroy( options? : IOOptions ) : IOPromise<this>\r\n    toJSON( options? : object ) : any\r\n    isNew() : boolean\r\n    id : string | number\r\n    set( json : object, options : object )\r\n}\r\n\r\nexport const IORecordMixin = {\r\n    save( this : IORecord, options : IOOptions = {} ){\r\n        const endpoint = this.getEndpoint(),\r\n              json = this.toJSON( options );\r\n\r\n        return startIO(\r\n            this,\r\n            this.isNew() ?\r\n                endpoint.create( json, options, this ) :\r\n                endpoint.update( this.id, json, options, this ),\r\n            options,\r\n\r\n            update => {\r\n                this.set( update, { parse : true, ...options } );\r\n            }\r\n        );\r\n    },\r\n\r\n    fetch( options : IOOptions = {} ){\r\n        return startIO(\r\n            this,\r\n            this.getEndpoint().read( this.id, options, this ),\r\n            options,\r\n\r\n            json => this.set( json, { parse : true, ...options } )\r\n        );\r\n    },\r\n\r\n    destroy( options : IOOptions = {} ){  \r\n        return startIO(\r\n            this,\r\n            this.getEndpoint().destroy( this.id, options, this ),\r\n            options,\r\n\r\n            () => {\r\n                const { collection } = this;\r\n                if( collection ){\r\n                    collection.remove( this, options );\r\n                }\r\n                else{\r\n                    this.dispose();\r\n                }\r\n\r\n                return this;\r\n            }\r\n        )\r\n    }\r\n}","/**\r\n * Record core implementing transactional updates.\r\n * The root of all definitions. \r\n */\r\n\r\nimport { CollectionConstructor } from '../collection';\r\nimport { IOEndpoint, IOPromise } from '../io-tools';\r\nimport { define, definitions, isProduction, Logger, logger, LogLevel, mixinRules, tools } from '../object-plus';\r\nimport { CloneOptions, Owner, Transaction, Transactional, TransactionalDefinition, TransactionOptions } from '../transactions';\r\nimport { ChildrenErrors } from '../validation';\r\nimport { AggregatedType, AnyType } from './metatypes';\r\nimport { IORecord, IORecordMixin } from './io-mixin';\r\nimport { AttributesConstructor, AttributesContainer, AttributesCopyConstructor, AttributesValues, setAttribute, shouldBeAnObject, unknownAttrsWarning, UpdateRecordMixin } from './updates';\r\nimport { type } from './attrDef';\r\n\r\n\r\nconst { assign, isEmpty } = tools;\r\n\r\n/*******************************************************\r\n * Record core implementation\r\n */\r\n\r\nexport interface ConstructorOptions extends TransactionOptions{\r\n    clone? : boolean\r\n}\r\n\r\n// Client unique id counter\r\nlet _cidCounter : number = 0;\r\n\r\n/***************************************************************\r\n * Record Definition as accepted by Record.define( definition )\r\n */\r\nexport interface RecordDefinition extends TransactionalDefinition {\r\n    idAttribute? : string\r\n    attributes? : AttributesValues\r\n    collection? : object\r\n    Collection? : typeof Transactional\r\n}\r\n\r\n@define({\r\n    // Default client id prefix \r\n    cidPrefix : 'm',\r\n\r\n    // Name of the change event\r\n    _changeEventName : 'change',\r\n\r\n    // Default id attribute name\r\n    idAttribute : 'id'\r\n})\r\n@definitions({\r\n    defaults : mixinRules.merge,\r\n    attributes : mixinRules.merge,\r\n    collection : mixinRules.merge,\r\n    Collection : mixinRules.value,\r\n    idAttribute : mixinRules.protoValue\r\n})\r\nexport class Record extends Transactional implements IORecord, AttributesContainer, Iterable<any> {\r\n    static _metatype = AggregatedType;\r\n\r\n    // Hack\r\n    static onDefine( definition, BaseClass ){}\r\n\r\n    static Collection : CollectionConstructor;\r\n    static DefaultCollection : CollectionConstructor;\r\n    \r\n    // Attribute type for the record id.\r\n    static id = type( String ).value( null );\r\n    \r\n    // Lazy object reference, serializable as id.\r\n    static get ref(){\r\n        return type( this )\r\n            .toJSON( x => x ? x.id : null )\r\n            .parse( x => {\r\n                return { [ this.prototype.idAttribute ] : x };\r\n            });\r\n    }\r\n\r\n    static defaults( attrs : AttributesValues ) : typeof Record {\r\n        return <any>this.extend({ attributes : attrs });\r\n    }\r\n    \r\n    static attributes : AttributesValues\r\n\r\n    /********************\r\n     * IO Methods\r\n     */\r\n     _endpoints : { [ name : string ] : IOEndpoint }\r\n\r\n     // Save record\r\n     save( options? : object ) : IOPromise<this> { throw new Error( 'Implemented by mixin' ); }\r\n\r\n     // Destroy record\r\n     destroy( options? : object ) : IOPromise<this> { throw new Error( 'Implemented by mixin' ); }\r\n\r\n    /***********************************\r\n     * Core Members\r\n     */\r\n    // Previous attributes\r\n    _previousAttributes : {}\r\n\r\n    previousAttributes(){ return new this.AttributesCopy( this._previousAttributes ); } \r\n\r\n    // Current attributes    \r\n    attributes : AttributesValues\r\n\r\n    // Polymorphic accessor for aggregated attribute's canBeUpdated().\r\n    get __inner_state__(){ return this.attributes; }\r\n\r\n    // Lazily evaluated changed attributes hash\r\n    _changedAttributes : AttributesValues\r\n\r\n    get changed(){\r\n        let changed = this._changedAttributes;\r\n\r\n        if( !changed ){\r\n            const prev = this._previousAttributes;\r\n            changed = {};\r\n\r\n            const { attributes } = this;\r\n\r\n            for( let attr of this._attributesArray ){\r\n                const key = attr.name,\r\n                    value = attributes[ key ];\r\n\r\n                if( attr.isChanged( value, prev[ key ] ) ){\r\n                    changed[ key ] = value;\r\n                }\r\n            }\r\n\r\n            this._changedAttributes = changed;\r\n        }\r\n\r\n        return changed;    \r\n    }\r\n\r\n    changedAttributes( diff? : {} ) : boolean | {} {\r\n        if( !diff ) return this.hasChanged() ? assign( {}, this.changed ) : false;\r\n\r\n        var val, changed : {} | boolean = false,\r\n            old          = this._transaction ? this._previousAttributes : this.attributes,\r\n            attrSpecs    = this._attributes;\r\n\r\n        for( var attr in diff ){\r\n            if( !attrSpecs[ attr ].isChanged( old[ attr ], ( val = diff[ attr ] ) ) ) continue;\r\n            (changed || (changed = {}))[ attr ] = val;\r\n        }\r\n\r\n        return changed;        \r\n    }\r\n\r\n    hasChanged( key? : string ) : boolean {\r\n        const { _previousAttributes } = this;\r\n        if( !_previousAttributes ) return false;\r\n\r\n        return key ?\r\n                this._attributes[ key ].isChanged( this.attributes[ key ], _previousAttributes[ key ] ) :\r\n                !isEmpty( this.changed );\r\n    }\r\n\r\n    previous( key : string ) : any {\r\n        if( key ){\r\n            const { _previousAttributes } = this;\r\n            if( _previousAttributes ) return _previousAttributes[ key ];\r\n        }\r\n        \r\n        return null;\r\n    }\r\n\r\n    isNew() : boolean {\r\n        return this.id == null;\r\n    }\r\n\r\n    has( key : string ) : boolean {\r\n        return this[ key ] != void 0;\r\n    }\r\n\r\n    // Return attribute value, setting an attribute to undefined.\r\n    // TODO: If attribute was aggregated, don't dispose it.\r\n    unset( key : string, options? ) : any {\r\n        const value = this[ key ];\r\n        this.set({ [ key ] : void 0 }, { unset : true, ...options });\r\n        return value;\r\n    }\r\n\r\n    // Undocumented. Move to NestedTypes?\r\n    clear( options? ) : this {\r\n        const nullify = options && options.nullify;\r\n\r\n        this.transaction( () =>{\r\n            this.forEach( ( value, key ) => this[ key ] = nullify ? null : void 0 );\r\n        }, options );\r\n\r\n        return this;\r\n    }\r\n\r\n    // Returns Record owner skipping collections. TODO: Move out\r\n    getOwner() : Owner {\r\n        const owner : any = this._owner;\r\n\r\n        // If there are no key, owner must be transactional object, and it's the collection.\r\n        // We don't expect that collection can be the member of collection, so we're skipping just one level up. An optimization.\r\n        return this._ownerKey ? owner : owner && owner._owner;\r\n    }\r\n\r\n    /***********************************\r\n     * Identity managements\r\n     */\r\n\r\n    // Id attribute name ('id' by default)\r\n    idAttribute : string;\r\n\r\n    // Fixed 'id' property pointing to id attribute\r\n    get id() : string { return this.attributes[ this.idAttribute ]; }\r\n    set id( x : string ){ setAttribute( this, this.idAttribute, x ); }\r\n\r\n    /***********************************\r\n     * Dynamically compiled stuff\r\n     */\r\n\r\n    // Attributes specifications \r\n    _attributes : { [ key : string ] : AnyType }\r\n    _attributesArray : AnyType[]\r\n\r\n    // Attributes object copy constructor\r\n    Attributes : AttributesConstructor\r\n    AttributesCopy : AttributesCopyConstructor\r\n\r\n    // Create record default values, optionally augmenting given values.\r\n    defaults( values = {} ){\r\n        const defaults = {},\r\n            { _attributesArray } = this;\r\n\r\n        for( let attr of _attributesArray ){\r\n            const key = attr.name,\r\n            value = values[ key ];\r\n\r\n            defaults[ key ] = value === void 0 ? attr.defaultValue() : value;\r\n        }\r\n\r\n        return defaults;\r\n    }\r\n\r\n    /***************************************************\r\n     * Record construction\r\n     */\r\n    // Create record, optionally setting an owner\r\n    constructor( a_values? : any, a_options? : ConstructorOptions ){\r\n        super( _cidCounter++ );\r\n        this.attributes = {};\r\n        \r\n        const options = a_options || {},\r\n              values = ( options.parse ? this.parse( a_values, options ) :  a_values ) || {};\r\n\r\n        isProduction || typeCheck( this, values, options );\r\n\r\n        this._previousAttributes = this.attributes = new this.Attributes( this, values, options );\r\n\r\n        this.initialize( a_values, a_options );\r\n\r\n        if( this._localEvents ) this._localEvents.subscribe( this, this );\r\n    }\r\n\r\n    // Initialization callback, to be overriden by the subclasses \r\n    initialize( values? : Partial<this>, options? ){}\r\n\r\n    // Deeply clone record, optionally setting new owner.\r\n    clone( options : CloneOptions = {} ) : this {\r\n        const copy : this = new (<any>this.constructor)( this.attributes, { clone : true } );\r\n        \r\n        if( options.pinStore ) copy._defaultStore = this.getStore();\r\n\r\n        return copy;\r\n    }\r\n\r\n    // Validate attributes.\r\n    _validateNested( errors : ChildrenErrors ) : number {\r\n        var length    = 0;\r\n\r\n        const { attributes } = this;\r\n\r\n        for( let attribute of this._attributesArray ){\r\n            const { name } = attribute,\r\n                error = attribute.validate( this, attributes[ name ], name );\r\n\r\n            if( error ){\r\n                errors[ name ] = error;\r\n                length++;\r\n            }\r\n        }\r\n\r\n        return length;\r\n    }\r\n\r\n    // Get attribute by key\r\n    get( key : string ) : any {\r\n        return this[ key ];\r\n    }\r\n\r\n    // Apply bulk in-place object update in scope of ad-hoc transaction \r\n    set( values : any, options? : TransactionOptions ) : this {\r\n        if( values ){ \r\n            const transaction = this._createTransaction( values, options );\r\n            transaction && transaction.commit();\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Serialization control\r\n     */\r\n\r\n    // Default record-level serializer, to be overriden by subclasses \r\n    toJSON( options? : object ) : any {\r\n        const json = {},\r\n            { attributes } = this;\r\n\r\n        for( let attribute of this._attributesArray ){\r\n            const { name } = attribute,\r\n                value = attributes[ name ];\r\n\r\n            if( value !== void 0 ){\r\n                // ...serialize it according to its spec.\r\n                const asJson = attribute.toJSON.call( this, value, name, options );\r\n\r\n                // ...skipping undefined values. Such an attributes are excluded.\r\n                if( asJson !== void 0 ) json[ name ] = asJson; \r\n            }\r\n        }\r\n\r\n        return json;\r\n    }\r\n    \r\n    // Default record-level parser, to be overriden by the subclasses.\r\n    parse( data, options? : TransactionOptions ){\r\n        return data;\r\n    }\r\n\r\n    /**\r\n     * Transactional control\r\n     */\r\n    deepSet( name : string, value : any, options? : any ){\r\n        // Operation might involve series of nested object updates, thus it's wrapped in transaction.\r\n        this.transaction( () => {\r\n            const path  = name.split( '.' ),\r\n                l     = path.length - 1,\r\n                attr  = path[ l ];\r\n\r\n            let model = this;\r\n\r\n            // Locate the model, traversing the path.\r\n            for( let i = 0; i < l; i++ ){\r\n                const key = path[ i ];\r\n\r\n                // There might be collections in path, so use `get`.\r\n                let next    = model.get ? model.get( key ) : model[ key ];\r\n\r\n                // Create models, if they are not exist.\r\n                if( !next ){\r\n                    const attrSpecs = model._attributes;\r\n                    if( attrSpecs ){\r\n                        // If current object is model, create default attribute\r\n                        var newModel = attrSpecs[ key ].create();\r\n\r\n                        // If created object is model, nullify attributes when requested\r\n                        if( options && options.nullify && newModel._attributes ){\r\n                            newModel.clear( options );\r\n                        }\r\n\r\n                        model[ key ] = next = newModel;\r\n                    }\r\n                    // Silently fail in other case.\r\n                    else return;\r\n                }\r\n                \r\n                model = next;\r\n            }\r\n\r\n            // Set model attribute.\r\n            if( model.set ){\r\n                model.set({ [ attr ] : value }, options );\r\n            }\r\n            else{\r\n                model[ attr ] = value;\r\n            }\r\n        });\r\n\r\n        return this;\r\n    }\r\n            \r\n    // Returns owner without the key (usually it's collection)\r\n    get collection() : any {\r\n        return this._ownerKey ? null : this._owner;\r\n    }\r\n\r\n    // Dispose object and all childrens\r\n    dispose(){\r\n        if( this._disposed ) return;\r\n\r\n        const { attributes } = this;\r\n\r\n        for( let attr of this._attributesArray ){\r\n            attr.dispose( this, attributes[ attr.name ] );\r\n        }\r\n        \r\n        super.dispose();\r\n    }\r\n\r\n    _log( level : LogLevel, topic: string, text : string, props : object, a_logger? : Logger ) : void {\r\n        ( a_logger || logger ).trigger( level, topic, this.getClassName() + ' ' + text, {\r\n            ...props,\r\n            'Record' : this,\r\n            'Attributes definition' : this._attributes\r\n        });\r\n    }\r\n\r\n    getClassName() : string {\r\n        return super.getClassName() || 'Record';\r\n    }\r\n\r\n    // Dummies to \r\n    _createTransaction( values : object, options : TransactionOptions ) : Transaction { return void 0; }\r\n    // Simulate attribute change \r\n    forceAttributeChange : ( key : string, options : TransactionOptions ) => void\r\n    _onChildrenChange : ( child : Transactional, options : TransactionOptions ) => void\r\n\r\n\r\n    /**\r\n     * Map methods\r\n     */\r\n\r\n    forEach( iteratee : ( value? : any, key? : string ) => void, context? : any ){\r\n        const fun = context !== void 0 ? ( v, k ) => iteratee.call( context, v, k ) : iteratee,\r\n            { attributes } = this;\r\n\r\n        for( const key in this.attributes ){\r\n            const value = attributes[ key ];\r\n            if( value !== void 0 ) fun( value, key );\r\n        }\r\n    }\r\n\r\n    mapObject( a_fun : ( value, key ) => any, context? : any ) : object {\r\n        const fun = context === void 0 ? a_fun : a_fun.bind( context );\r\n        return tools.transform( {}, this.attributes, fun );\r\n    }\r\n\r\n    [ Symbol.iterator ](){\r\n        return new RecordEntriesIterator( this );\r\n    }\r\n\r\n    entries(){\r\n        return new RecordEntriesIterator( this );\r\n    }\r\n\r\n    // Get array of attribute keys (Record) or record ids (Collection) \r\n    keys() : string[] {\r\n        const keys : string[] = [];\r\n\r\n        this.forEach( ( value, key ) => keys.push( key ) );\r\n\r\n        return keys;\r\n    }\r\n};\r\n\r\nassign( Record.prototype, UpdateRecordMixin, IORecordMixin );\r\n\r\n/***********************************************\r\n * Helper functions\r\n */\r\n\r\nclass BaseRecordAttributes {\r\n    id : string\r\n\r\n    constructor( record : Record, x : AttributesValues, options : TransactionOptions ) {\r\n        this.id = x.id;\r\n    }\r\n}\r\n\r\nRecord.prototype.Attributes = BaseRecordAttributes;\r\n\r\nclass BaseRecordAttributesCopy {\r\n    id : string\r\n\r\n    constructor( x : AttributesValues ) {\r\n        this.id = x.id;\r\n    }\r\n}\r\n\r\nRecord.prototype.AttributesCopy = BaseRecordAttributesCopy;\r\n\r\nconst IdAttribute = AnyType.create({ value : void 0 }, 'id' );\r\nRecord.prototype._attributes = { id : IdAttribute };\r\nRecord.prototype._attributesArray = [ IdAttribute ];\r\n\r\nfunction typeCheck( record : Record, values : object, options ){\r\n    if( shouldBeAnObject( record, values, options ) ){\r\n        const { _attributes } = record;\r\n        let unknown : string[];\r\n\r\n        for( let name in values ){\r\n            if( !_attributes[ name ] ){\r\n                unknown || ( unknown = [] );\r\n                unknown.push( `'${ name }'` );\r\n            }\r\n        }\r\n\r\n        if( unknown ){\r\n            unknownAttrsWarning( record, unknown, { values }, options );\r\n        }\r\n    }\r\n}\r\n\r\nexport class RecordEntriesIterator implements Iterator<[string, any]> {\r\n    private idx = 0;\r\n    \r\n    constructor( private readonly record : Record){}\r\n\r\n    next() : IteratorResult<[string, any]> {\r\n        const { record } = this,\r\n            metatype = record._attributesArray[ this.idx++ ];\r\n\r\n        return {\r\n            done : !metatype,\r\n            value : metatype ? [ metatype.name, record[ metatype.name ] ] : void 0\r\n        };\r\n    }\r\n}","import { CollectionConstructor } from '../collection';\r\nimport { define, predefine, TheType, tools } from '../object-plus';\r\nimport { Transactional } from '../transactions';\r\nimport { Infer, type } from './attrDef';\r\nimport { createAttributesMixin } from './mixin';\r\nimport { Record, RecordDefinition } from './record';\r\n\r\nexport * from './attrDef';\r\nexport * from './metatypes';\r\nexport { Record };\r\n\r\nconst { assign, defaults } = tools;\r\n\r\nexport type InferAttrs<A extends object> = {\r\n    [K in keyof A]: Infer<A[K]>\r\n};\r\n\r\nexport interface RecordConstructor<A> extends TheType<typeof Record> {\r\n    new ( attrs? : Partial<A>, options? : object ) : Record & A\r\n    prototype : Record\r\n    Collection : CollectionConstructor<Record & A>\r\n}\r\n\r\nexport function attributes<D extends object>( attrDefs : D ) : RecordConstructor<InferAttrs<D>> {\r\n    @define class DefaultRecord extends Record {\r\n        static attributes = attrDefs;\r\n    }\r\n\r\n    return DefaultRecord as any;\r\n}\r\n\r\nRecord.onExtend = function( this : typeof Record, BaseClass : typeof Record ){\r\n    Transactional.onExtend.call( this, BaseClass );\r\n\r\n    // Create the default collection\r\n    const Class = this;\r\n\r\n    @predefine class DefaultCollection extends BaseClass.Collection {\r\n        static model = Class;\r\n    }\r\n\r\n    this.DefaultCollection = DefaultCollection;\r\n\r\n    // If there are no collection defined in statics, use the default collection.\r\n    // It will appear in onDefine's definition, overriding all other settings.\r\n    if( Class.Collection === BaseClass.Collection ){\r\n        this.Collection = DefaultCollection;\r\n    }\r\n}\r\n\r\nRecord.onDefine = function( definition : RecordDefinition, BaseClass : typeof Record ){\r\n    const baseProto : Record = BaseClass.prototype;\r\n\r\n    // Compile attributes spec, creating definition mixin.\r\n    const { properties, _localEvents, ...dynamicMixin } = createAttributesMixin( this.attributes = getAttributes( definition ), baseProto._attributes );\r\n    assign( this.prototype, dynamicMixin );\r\n    \r\n    definition.properties = defaults( definition.properties || {}, properties );\r\n    definition._localEvents = _localEvents;\r\n    \r\n    Transactional.onDefine.call( this, definition, BaseClass );\r\n\r\n    // Finalize the definition of the default collection.\r\n    this.DefaultCollection.define( definition.collection || {} );\r\n\r\n    // assign collection from the definition.\r\n    this.Collection = definition.Collection;\r\n    this.Collection.prototype.model = this;\r\n\r\n    if( definition.endpoint ) this.Collection.prototype._endpoint = definition.endpoint;    \r\n}\r\n\r\nfunction getAttributes({ defaults, attributes, idAttribute } : RecordDefinition ) {\r\n    const definition = attributes || defaults || {};\r\n    \r\n    // If there is an undeclared idAttribute, add its definition as untyped generic attribute.\r\n    if( idAttribute && !( idAttribute in definition ) ){\r\n        definition[ idAttribute ] = void 0;\r\n    }\r\n\r\n    return definition;\r\n}\r\n\r\ndeclare var Reflect;\r\n\r\nexport function auto( value : any ) : PropertyDecorator;\r\nexport function auto( proto : object, attrName : string ) : void;\r\nexport function auto( proto, attrName? : string ) : any {\r\n    if( typeof Reflect !== 'undefined' && Reflect.getMetadata ){\r\n        if( attrName ){\r\n            type( Reflect.getMetadata( \"design:type\", proto, attrName ) ).as( proto, attrName );\r\n        }\r\n        else{\r\n            const value = proto;\r\n            return ( proto : object, attrName : string ) : void => {\r\n                type( Reflect.getMetadata( \"design:type\", proto, attrName ) ).value( value ).as( proto, attrName );\r\n            }\r\n        }        \r\n    }\r\n    else{\r\n        proto._log( 'error', 'Type-R:MissingImport', 'Add import \"reflect-metadata\"; as the first line of your app.' );\r\n    }    \r\n}","import { eventsApi, Logger } from '../object-plus';\r\nimport { Record } from '../record';\r\nimport { ItemsBehavior, Owner, Transaction, Transactional, transactionApi, TransactionOptions } from '../transactions';\r\n\r\n\r\nconst { trigger2, trigger3, on, off } = eventsApi,\r\n      { commit } = transactionApi,\r\n      _aquire = transactionApi.aquire, _free = transactionApi.free;\r\n\r\n/** @private */\r\nexport interface CollectionCore extends Transactional, Owner {\r\n    _byId : IdIndex\r\n    models : Record[]\r\n    model : typeof Record\r\n    idAttribute : string // TODO: Refactor inconsistent idAttribute usage\r\n    _comparator : Comparator\r\n    get( objOrId : string | Record | Object ) : Record    \r\n    _itemEvents? : eventsApi.EventMap\r\n    _shared : number\r\n    _aggregationError : Record[]\r\n\r\n    _log( level : string, topic : string, text : string, value : any, logger : Logger ) : void\r\n}\r\n\r\n// Collection's manipulation methods elements\r\nexport type Elements = ( Object | Record )[];\r\n\r\nexport interface CollectionOptions extends TransactionOptions {\r\n    sort? : boolean\r\n}\r\n\r\nexport type Comparator = ( a : Record, b : Record ) => number;  \r\n\r\n/** @private */\r\nexport function dispose( collection : CollectionCore ) : Record[]{\r\n    const { models } = collection;\r\n\r\n    collection.models = [];\r\n    collection._byId  = {};\r\n\r\n    freeAll( collection, models );\r\n    return models;\r\n}\r\n\r\n/** @private */\r\nexport function convertAndAquire( collection : CollectionCore, attrs : {} | Record, options : CollectionOptions ){\r\n    const { model } = collection;\r\n    \r\n    let record : Record;\r\n\r\n    if( collection._shared ){\r\n        record = attrs instanceof model ? attrs : <Record>model.create( attrs, options );\r\n\r\n        if( collection._shared & ItemsBehavior.listen ){\r\n            on( record, record._changeEventName, collection._onChildrenChange, collection );\r\n        }\r\n    }\r\n    else{\r\n        record = attrs instanceof model ? ( options.merge ? attrs.clone() : attrs ) : <Record>model.create( attrs, options );\r\n\r\n        if( record._owner ){\r\n            if( record._owner !== collection ){\r\n                _aquire( collection, record.clone() );\r\n                const errors = collection._aggregationError || ( collection._aggregationError = [] );\r\n                errors.push( record );\r\n            }\r\n        }\r\n        else{\r\n            _aquire( collection, record );   \r\n        }\r\n    }    \r\n\r\n    // Subscribe for events...\r\n    const { _itemEvents } = collection;\r\n    _itemEvents && _itemEvents.subscribe( collection, record );\r\n\r\n    return record;\r\n}\r\n\r\n/** @private */\r\nexport function free( owner : CollectionCore, child : Record, unset? : boolean ) : void {\r\n    if( owner._shared ){\r\n        if( owner._shared & ItemsBehavior.listen ){\r\n            off( child, child._changeEventName, owner._onChildrenChange, owner );\r\n        }\r\n    }\r\n    else{\r\n        _free( owner, child );\r\n        unset || child.dispose();\r\n    }\r\n\r\n    const { _itemEvents } = owner;\r\n    _itemEvents && _itemEvents.unsubscribe( owner, child );\r\n}\r\n\r\n/** @private */\r\nexport function freeAll( collection : CollectionCore, children : Record[] ) : Record[] {\r\n    for( let child of children ){\r\n        free( collection, child );\r\n    }\r\n\r\n    return children;\r\n}\r\n\r\n/**\r\n * Silently sort collection, if its required. Returns true if sort happened.\r\n * @private\r\n */   \r\nexport function sortElements( collection : CollectionCore, options : CollectionOptions ) : boolean {\r\n    let { _comparator } = collection;\r\n    if( _comparator && options.sort !== false ){\r\n        collection.models.sort( _comparator );\r\n        return true;\r\n    }\r\n\r\n    return false;\r\n}\r\n\r\n/**********************************\r\n * Collection Index\r\n * @private \r\n */\r\nexport interface IdIndex {\r\n    [ id : string ] : Record\r\n}\r\n\r\n/** @private Add record */ \r\nexport function addIndex( index : IdIndex, model : Record ) : void {\r\n    index[ model.cid ] = model;\r\n    var id             = model.id;\r\n    \r\n    if( id || ( id as any ) === 0 ){\r\n        index[ id ] = model;\r\n    }\r\n}\r\n\r\n/** @private Remove record */ \r\nexport function removeIndex( index : IdIndex, model : Record ) : void {\r\n    delete index[ model.cid ];\r\n    var id = model.id;\r\n    if( id || ( id as any ) === 0 ){\r\n        delete index[ id ];\r\n    }\r\n}\r\n\r\nexport function updateIndex( index : IdIndex, model : Record ){\r\n    delete index[ model.previous( model.idAttribute ) ];\r\n\r\n    const { id } = model;\r\n    id == null || ( index[ id ] = model );\r\n}\r\n\r\n/***\r\n * In Collections, transactions appears only when\r\n * add remove or change events might be emitted.\r\n * reset doesn't require transaction.\r\n * \r\n * Transaction holds information regarding events, and knows how to emit them.\r\n * \r\n * Two major optimization cases.\r\n * 1) Population of an empty collection\r\n * 2) Update of the collection (no or little changes) - it's crucial to reject empty transactions.\r\n */\r\n\r\n\r\n// Transaction class. Implements two-phase transactions on object's tree.\r\n/** @private */ \r\nexport class CollectionTransaction implements Transaction {\r\n    // open transaction\r\n    constructor(    public object : CollectionCore,\r\n                    public isRoot : boolean,\r\n                    public added : Record[],\r\n                    public removed : Record[],\r\n                    public nested : Transaction[],\r\n                    public sorted : boolean ){}\r\n\r\n    // commit transaction\r\n    commit( initiator? : Transactional ){\r\n        const { nested, object } = this,\r\n              { _isDirty } = object;\r\n\r\n        // Commit all nested transactions...\r\n        for( let transaction of nested ){\r\n            transaction.commit( object );\r\n        }\r\n\r\n        if( object._aggregationError ){\r\n            logAggregationError( object, _isDirty );\r\n        }\r\n\r\n        // Just trigger 'change' on collection, it must be already triggered for models during nested commits.\r\n        // ??? TODO: do it in nested transactions loop? This way appears to be more correct. \r\n        for( let transaction of nested ){\r\n            trigger2( object, 'change', transaction.object, _isDirty );\r\n        }\r\n\r\n        // Notify listeners on attribute changes...\r\n        const { added, removed } = this;\r\n\r\n        // Trigger `add` events for both model and collection.\r\n        for( let record of added ){\r\n            trigger3( record, 'add', record, object, _isDirty );\r\n            trigger3( object, 'add', record, object, _isDirty );\r\n        }\r\n\r\n        // Trigger `remove` events for both model and collection.\r\n        for( let record of removed ){\r\n            trigger3( record, 'remove', record, object, _isDirty );\r\n            trigger3( object, 'remove', record, object, _isDirty );\r\n        }\r\n\r\n        if( this.sorted ){\r\n            trigger2( object, 'sort', object, _isDirty );\r\n        }\r\n\r\n        if( added.length || removed.length ){\r\n            trigger2( object, 'update', object, _isDirty );\r\n        }\r\n\r\n        this.isRoot && commit( object, initiator );\r\n    }\r\n}\r\n\r\nexport function logAggregationError( collection : CollectionCore, options : TransactionOptions ){\r\n    collection._log( 'warn', 'Type-R:InvalidOwner', 'added records already have an owner and were cloned. Use explicit record.clone() to dismiss this warning.', collection._aggregationError, options.logger );\r\n    collection._aggregationError = void 0;\r\n}","import { Record } from '../record';\r\nimport { Transaction, transactionApi } from '../transactions';\r\nimport { addIndex, CollectionCore, CollectionOptions, CollectionTransaction, convertAndAquire, logAggregationError, sortElements, updateIndex } from './commons';\r\n\r\nconst { begin, commit, markAsDirty } = transactionApi;\r\n\r\nexport interface AddOptions extends CollectionOptions {\r\n    at? : number \r\n}\r\n\r\n/** @private */\r\nexport function addTransaction( collection : CollectionCore, items : any[], options : AddOptions, merge? : boolean ){\r\n    const isRoot = begin( collection ),\r\n          nested : Transaction[]= [];\r\n\r\n    var added = appendElements( collection, items, nested, options, merge );\r\n\r\n    if( added.length || nested.length ){\r\n        let needSort = sortOrMoveElements( collection, added, options );\r\n        if( markAsDirty( collection, options ) ){\r\n            return new CollectionTransaction( collection, isRoot, added, [], nested, needSort );\r\n        }\r\n\r\n        if( collection._aggregationError ) logAggregationError( collection, options );\r\n    }\r\n\r\n    // No changes...\r\n    isRoot && commit( collection );\r\n};\r\n\r\n// Handle sort or insert at options for add operation. Reurns true if sort happened.\r\n/** @private */ \r\nfunction sortOrMoveElements( collection : CollectionCore, added : Record[], options : AddOptions ) : boolean {\r\n    let at = options.at;\r\n\r\n    // if `at` option is given, it overrides sorting option...\r\n    if( at != null ){\r\n        // Take an original collection's length. \r\n        const length = collection.models.length - added.length;\r\n\r\n        // Crazy Backbone rules about `at` index. I don't know what that guys smoke.\r\n        at = Number( at );\r\n        if( at < 0 ) at += length + 1;\r\n        if( at < 0 ) at = 0;\r\n        if( at > length ) at = length;\r\n\r\n        // Move added elements to desired position. In place.\r\n        moveElements( collection.models, at, added );\r\n        return false;\r\n    }\r\n\r\n    return sortElements( collection, options );\r\n}\r\n\r\n/** @private */\r\nfunction moveElements( source : any[], at : number, added : any[] ) : void {\r\n    for( var j = source.length - 1, i = j - added.length; i >= at; i--, j-- ){\r\n        source[ j ] = source[ i ];\r\n    }\r\n\r\n    for( i = 0, j = at; i < added.length; i++, j++ ){\r\n        source[ j ] = added[ i ];\r\n    }\r\n}\r\n\r\n// append data to model and index\r\n/** @private */\r\nfunction appendElements( collection : CollectionCore, a_items : any[], nested : Transaction[], a_options : AddOptions, forceMerge : boolean ){\r\n    var { _byId, models } = collection,\r\n        merge       = ( forceMerge || a_options.merge ) && !collection._shared,\r\n        parse       = a_options.parse,\r\n        idAttribute = collection.model.prototype.idAttribute,\r\n        prevLength = models.length;\r\n\r\n    for( const item of a_items ){\r\n        let model = item ? _byId[ item[ idAttribute ] ] || _byId[ item.cid ] : null;\r\n\r\n        if( model ){\r\n            if( merge && item !== model ){\r\n                var attrs = item.attributes || item;\r\n                const transaction = model._createTransaction( attrs, a_options );\r\n                transaction && nested.push( transaction );\r\n\r\n                if( model.hasChanged( idAttribute ) ){\r\n                    updateIndex( _byId, model );\r\n                }\r\n            }\r\n        }\r\n        else{\r\n            model = convertAndAquire( collection, item, a_options );\r\n            models.push( model );\r\n            addIndex( _byId, model );\r\n        }\r\n    }\r\n\r\n    return models.slice( prevLength );\r\n}\r\n","/*************\r\n * Remove items from collections.\r\n * \r\n * Cannot be a part of two-phase transaction on object tree.\r\n * Can be executed in the scope of ad-hoc transaction or from the trigger, though.\r\n *\r\n * Implemented with low-level API. \r\n * Most frequent operation - single element remove. Thus, it have the fast-path.\r\n */\r\n\r\nimport { eventsApi } from '../object-plus';\r\nimport { Record } from '../record';\r\nimport { transactionApi, TransactionOptions } from '../transactions';\r\nimport { CollectionCore, CollectionTransaction, free, removeIndex } from './commons';\r\n\r\nconst { trigger2, trigger3 } = eventsApi,\r\n    { markAsDirty, begin, commit } = transactionApi;\r\n\r\n/** @private */\r\nexport function removeOne( collection : CollectionCore, el : Record | {} | string, options : TransactionOptions ) : Record {\r\n    var model : Record = collection.get( el );\r\n\r\n    if( model ){\r\n        const isRoot = begin( collection ),\r\n              models = collection.models;\r\n\r\n        // Remove model form the collection. \r\n        models.splice( models.indexOf( model ), 1 );\r\n        removeIndex( collection._byId, model );\r\n        \r\n        // Mark transaction as dirty. \r\n        const notify = markAsDirty( collection, options );\r\n\r\n        // Send out events.\r\n        if( notify ){\r\n            trigger3( model, 'remove', model, collection, options );\r\n            trigger3( collection, 'remove', model, collection, options );\r\n        } \r\n\r\n        free( collection, model, options.unset );\r\n\r\n        notify && trigger2( collection, 'update', collection, options );\r\n\r\n        // Commit transaction.\r\n        isRoot && commit( collection );\r\n\r\n        return model;\r\n    }\r\n};\r\n\r\n/** Optimized for removing many elements\r\n * 1. Remove elements from the index, checking for duplicates\r\n * 2. Create new models array matching index\r\n * 3. Send notifications and remove references\r\n */\r\n\r\n/** @private */\r\nexport function removeMany( collection : CollectionCore, toRemove : any[], options ){\r\n    const removed = _removeFromIndex( collection, toRemove, options.unset );\r\n    if( removed.length ){\r\n        const isRoot = begin( collection );\r\n\r\n        _reallocate( collection, removed.length );\r\n\r\n        if( markAsDirty( collection, options ) ){\r\n            const transaction = new CollectionTransaction( collection, isRoot, [], removed, [], false );\r\n            transaction.commit();\r\n        }\r\n        else{\r\n            // Commit transaction.\r\n            isRoot && commit( collection );\r\n        }\r\n    }\r\n\r\n    return removed;\r\n};\r\n\r\n// remove models from the index...\r\n/** @private */\r\nfunction _removeFromIndex( collection, toRemove, unset : boolean ){\r\n    var removed = Array( toRemove.length ),\r\n        _byId   = collection._byId;\r\n\r\n    for( var i = 0, j = 0; i < toRemove.length; i++ ){\r\n        var model = collection.get( toRemove[ i ] );\r\n        if( model ){\r\n            removed[ j++ ] = model;\r\n            removeIndex( _byId, model );\r\n            free( collection, model, unset );\r\n        }\r\n    }\r\n\r\n    removed.length = j;\r\n\r\n    return removed;\r\n}\r\n\r\n// Allocate new models array removing models not present in the index.\r\n/** @private */\r\nfunction _reallocate( collection, removed ){\r\n    var prev   = collection.models,\r\n        models = collection.models = Array( prev.length - removed ),\r\n        _byId = collection._byId;\r\n\r\n    for( var i = 0, j = 0; i < prev.length; i++ ){\r\n        var model = prev[ i ];\r\n\r\n        if( _byId[ model.cid ] ){\r\n            models[ j++ ] = model;\r\n        }\r\n    }\r\n\r\n    models.length = j;\r\n}","import { Record } from '../record';\r\nimport { Transaction, transactionApi } from '../transactions';\r\nimport { addIndex, CollectionCore, CollectionOptions, CollectionTransaction, convertAndAquire, Elements, free, freeAll, IdIndex, logAggregationError, sortElements } from './commons';\r\n\r\nconst { begin, commit, markAsDirty } = transactionApi;\r\n\r\n/** @private */\r\nconst silentOptions = { silent : true };\r\n\r\n/** @private */\r\nexport function emptySetTransaction( collection : CollectionCore, items : Elements, options : CollectionOptions, silent? : boolean ){\r\n    const isRoot = begin( collection );\r\n\r\n    const added = _reallocateEmpty( collection, items, options );\r\n\r\n    if( added.length ){\r\n        const needSort = sortElements( collection, options );\r\n\r\n        if( markAsDirty( collection, silent ? silentOptions : options ) ){\r\n            // 'added' is the reference to this.models. Need to copy it.\r\n            return new CollectionTransaction( collection, isRoot, added.slice(), [], [], needSort );\r\n        }\r\n\r\n        if( collection._aggregationError ) logAggregationError( collection, options );\r\n    }\r\n\r\n    // No changes...\r\n    isRoot && commit( collection );\r\n};\r\n\r\n/** @private */\r\nexport function setTransaction( collection, items, options ){\r\n    const isRoot = begin( collection ),\r\n          nested = [];\r\n\r\n    var previous = collection.models,\r\n        added    = _reallocate( collection, items, nested, options );\r\n\r\n    const reusedCount = collection.models.length - added.length,\r\n          removed = reusedCount < previous.length ? (\r\n                        reusedCount ? _garbageCollect( collection, previous ) :\r\n                                        freeAll( collection, previous )\r\n                    ) : [];                    \r\n    \r\n    const addedOrChanged = nested.length || added.length,\r\n          // As we are reallocating models array, it needs to be sorted even if there are no changes.\r\n          sorted = ( sortElements( collection, options ) && addedOrChanged ) || added.length || options.sorted;\r\n\r\n    if( addedOrChanged || removed.length || sorted ){\r\n        if( markAsDirty( collection, options ) ){ \r\n            return new CollectionTransaction( collection, isRoot, added, removed, nested, sorted );\r\n        }\r\n\r\n        if( collection._aggregationError ) logAggregationError( collection, options );\r\n    }\r\n\r\n    isRoot && commit( collection );\r\n};\r\n\r\n// Remove references to all previous elements, which are not present in collection.\r\n// Returns an array with removed elements.\r\n/** @private */\r\nfunction _garbageCollect( collection : CollectionCore, previous : Record[] ) : Record[]{\r\n    const { _byId }  = collection,\r\n          removed = [];\r\n\r\n    // Filter out removed models and remove them from the index...\r\n    for( let record of previous ){\r\n        if( !_byId[ record.cid ] ){\r\n            removed.push( record );\r\n            free( collection, record );\r\n        }\r\n    }\r\n\r\n    return removed;\r\n}\r\n\r\n// reallocate model and index\r\n/** @private */\r\nfunction _reallocate( collection : CollectionCore, source : any[], nested : Transaction[], options ){\r\n    var models      = Array( source.length ),\r\n        _byId : IdIndex = {},\r\n        merge       = ( options.merge == null ? true : options.merge ) && !collection._shared,\r\n        _prevById   = collection._byId,\r\n        prevModels  = collection.models, \r\n        idAttribute = collection.model.prototype.idAttribute,\r\n        toAdd       = [],\r\n        orderKept   = true;\r\n\r\n    // for each item in source set...\r\n    for( var i = 0, j = 0; i < source.length; i++ ){\r\n        var item  = source[ i ],\r\n            model : Record = null;\r\n\r\n        if( item ){\r\n            var id  = item[ idAttribute ],\r\n                cid = item.cid;\r\n\r\n            if( _byId[ id ] || _byId[ cid ] ) continue;\r\n\r\n            model = _prevById[ id ] || _prevById[ cid ];\r\n        }\r\n\r\n        if( model ){\r\n            if( merge && item !== model ){\r\n                if( orderKept && prevModels[ j ] !== model ) orderKept = false;\r\n\r\n                var attrs = item.attributes || item;\r\n                const transaction = model._createTransaction( attrs, options );\r\n                transaction && nested.push( transaction );\r\n            }\r\n        }\r\n        else{\r\n            model = convertAndAquire( collection, item, options );\r\n            toAdd.push( model );\r\n        }\r\n\r\n        models[ j++ ] = model;\r\n        addIndex( _byId, model );\r\n    }\r\n\r\n    models.length = j;\r\n    collection.models   = models;\r\n    collection._byId    = _byId;\r\n\r\n    if( !orderKept ) options.sorted = true;\r\n\r\n    return toAdd;\r\n}\r\n\r\n/** @private */\r\nfunction _reallocateEmpty( self, source, options ){\r\n    var len         = source ? source.length : 0,\r\n        models      = Array( len ),\r\n        _byId : IdIndex = {},\r\n        idAttribute = self.model.prototype.idAttribute;\r\n\r\n    for( var i = 0, j = 0; i < len; i++ ){\r\n        var src = source[ i ];\r\n\r\n        if( src && ( _byId[ src[ idAttribute ] ] || _byId[ src.cid ] ) ){\r\n            continue;\r\n        }\r\n\r\n        var model = convertAndAquire( self, src, options );\r\n        models[ j++ ] = model;\r\n        addIndex( _byId, model );\r\n    }\r\n\r\n    models.length = j;\r\n    self._byId    = _byId;\r\n\r\n    return self.models = models;\r\n}","export type Predicate<R> = ( ( val : R, key? : number ) => boolean ) | Partial<R>;\r\n\r\nexport abstract class ArrayMixin<R> {\r\n    models : R[]\r\n    abstract get( modelOrId : string | Partial<R> ) : R;\r\n\r\n    map<T>( a_fun : ( val : R, key? : number ) => T, context? : any ) : T[]{\r\n        const { models } = this,\r\n            res = Array( models.length ),\r\n            iteratee = context ? a_fun.bind( context ) : a_fun;\r\n\r\n        for( var i = 0, j = 0; i < models.length; i++ ){\r\n            const val = iteratee( models[ i ], i );\r\n            val === void 0 || ( res[ j++ ] = val );\r\n        }\r\n\r\n        if( i !== j ){\r\n            res.length = j;\r\n        }\r\n\r\n        return res;\r\n    }\r\n\r\n    reduce<T>( iteratee : (previousValue: R, currentValue: R, currentIndex?: number ) => R ) : R\r\n    reduce<T>( iteratee : (previousValue: T, currentValue: R, currentIndex?: number ) => T, init? : any ) : T\r\n    reduce<T>( iteratee : (previousValue: any, currentValue: any, currentIndex?: number ) => any, init? : any ) : T | R {\r\n        return init === void 0 ? this.models.reduce( iteratee ) : this.models.reduce( iteratee, init );\r\n    }\r\n\r\n    // Slice out a sub-array of models from the collection.\r\n    slice( begin? : number, end? : number ) : R[] {\r\n        return this.models.slice( begin, end );\r\n    }\r\n  \r\n    indexOf( modelOrId : string | Partial<R> ) : number {\r\n        return this.models.indexOf( this.get( modelOrId ) );\r\n    }\r\n\r\n    includes( idOrObj : string | Partial<R> ) : boolean {\r\n        return Boolean( this.get( idOrObj ) );\r\n    }\r\n\r\n    filter( iteratee : Predicate<R>, context? : any ) : R[] {\r\n        const fun = toPredicateFunction( iteratee );\r\n        return this.map( m => fun( m ) ? m : void 0, context );\r\n    }\r\n\r\n    find( iteratee : Predicate<R>, context? : any ) : R {\r\n        const fun = toPredicateFunction( iteratee );\r\n        return this.each( m => fun( m ) ? m : void 0, context );\r\n    }\r\n\r\n    some( iteratee : Predicate<R>, context? : any ) : boolean {\r\n        return Boolean( this.find( iteratee, context ) );\r\n    }\r\n\r\n    each<T>( a_fun : ( val : R, key? : number ) => T, context? : any ) : T {\r\n        const { models } = this,\r\n            iteratee = context ? a_fun.bind( context ) : a_fun;\r\n\r\n        for( let i = 0; i < models.length; i++ ){\r\n            const res = iteratee( models[ i ], i );\r\n            if( res !== void 0 ) return res;\r\n        }\r\n    }\r\n\r\n    forEach( iteratee : ( val : R, key? : number ) => void, context? : any ) : void {\r\n        this.each( iteratee, context );\r\n    }\r\n\r\n    values() : IterableIterator<R> {\r\n        return this.models.values();\r\n    }\r\n\r\n    entries() : IterableIterator<[ number, R ]>{\r\n        return this.models.entries();\r\n    }\r\n\r\n    every( iteratee : Predicate<R>, context? : any ) : boolean {\r\n        const fun = toPredicateFunction( iteratee );\r\n        return this.each( m => fun( m ) ? void 0 : false, context ) === void 0;\r\n    }\r\n\r\n    pluck<K extends keyof R>( key : K ) : R[K][] {\r\n        return this.map( model => model[ key ] );\r\n    }\r\n}\r\n\r\nconst noOp = x => x;\r\n\r\nfunction toPredicateFunction<R>( iteratee : Predicate<R> ){\r\n    if( iteratee == null ) return noOp;\r\n\r\n    switch( typeof iteratee ){\r\n        case 'function' : return iteratee;\r\n        case 'object' :\r\n            const keys = Object.keys( iteratee );\r\n            \r\n            return x => {\r\n                for( let key of keys ){\r\n                    if( iteratee[ key ] !== x[ key ] )\r\n                        return false;\r\n                }\r\n\r\n                return true;\r\n            }\r\n        default : throw new Error( 'Invalid iteratee' );\r\n    }\r\n}","import { IOPromise, startIO } from '../io-tools';\r\nimport { define, definitions, EventMap, eventsApi, EventsDefinition, Logger, logger, LogLevel, Mixable, mixinRules, TheType, tools, mixins } from '../object-plus';\r\nimport { AggregatedType, Record, SharedType } from '../record';\r\nimport { CloneOptions, ItemsBehavior, Transactional, TransactionalDefinition, transactionApi, TransactionOptions } from '../transactions';\r\nimport { AddOptions, addTransaction } from './add';\r\nimport { CollectionCore, CollectionTransaction, Elements, free, sortElements, updateIndex } from './commons';\r\nimport { removeMany, removeOne } from './remove';\r\nimport { emptySetTransaction, setTransaction } from './set';\r\n\r\n\r\nconst { trigger2 } = eventsApi,\r\n    { begin, commit, markAsDirty } = transactionApi,\r\n    { assign, defaults } = tools;\r\n\r\nlet _count = 0;\r\n\r\nexport type GenericComparator = string | ( ( x : Record ) => number ) | ( ( a : Record, b : Record ) => number ); \r\n\r\nexport interface CollectionOptions extends TransactionOptions {\r\n    comparator? : GenericComparator\r\n    model? : typeof Record\r\n}\r\n\r\nexport interface CollectionDefinition extends TransactionalDefinition {\r\n    model? : typeof Record,\r\n    itemEvents? : EventsDefinition\r\n    _itemEvents? : EventMap\r\n}\r\n\r\nclass CollectionRefsType extends SharedType {\r\n    static defaultValue = [];\r\n}\r\n\r\nexport interface CollectionConstructor<R extends Record = Record > extends TheType<typeof Collection> {\r\n    new ( records? : ElementsArg<R>, options?: CollectionOptions ) : Collection<R>\r\n    prototype : Collection<R>\r\n    Refs : CollectionConstructor<R>\r\n};\r\n\r\n@define({\r\n    // Default client id prefix \r\n    cidPrefix : 'c',\r\n    model : Record,\r\n    _changeEventName : 'changes',\r\n    _aggregationError : null\r\n})\r\n@mixins( ArrayMixin )\r\n@definitions({\r\n    comparator : mixinRules.value,\r\n    model : mixinRules.protoValue,\r\n    itemEvents : mixinRules.merge\r\n})\r\nexport class Collection< R extends Record = Record> extends Transactional implements CollectionCore, Iterable<R> {\r\n    _shared : number\r\n    _aggregationError : R[]\r\n\r\n    static Subset : typeof Collection\r\n    static Refs : CollectionConstructor\r\n    static _SubsetOf : typeof Collection\r\n    \r\n    createSubset( models : ElementsArg<R>, options? : CollectionOptions) : Collection<R>{\r\n        throw new ReferenceError( 'Failed dependency injection' )\r\n    }\r\n\r\n    static onExtend( BaseClass : typeof Transactional ){\r\n        // Cached subset collection must not be inherited.\r\n        const Ctor = this;\r\n        this._SubsetOf = null;\r\n\r\n        function RefsCollection( a, b, listen? ){\r\n            Ctor.call( this, a, b, ItemsBehavior.share | ( listen ? ItemsBehavior.listen : 0 ) );\r\n        }\r\n\r\n        Mixable.mixins.populate( RefsCollection );\r\n        \r\n        RefsCollection.prototype = this.prototype;\r\n        RefsCollection._metatype = CollectionRefsType;\r\n\r\n        this.Refs = this.Subset = <any>RefsCollection;\r\n\r\n        Transactional.onExtend.call( this, BaseClass );\r\n    }\r\n    \r\n    static onDefine( definition : CollectionDefinition, BaseClass : any ){\r\n        if( definition.itemEvents ){\r\n            const eventsMap = new EventMap( BaseClass.prototype._itemEvents );\r\n            eventsMap.addEventsMap( definition.itemEvents );\r\n            this.prototype._itemEvents = eventsMap;\r\n        }\r\n\r\n        if( definition.comparator !== void 0 ) this.prototype.comparator = definition.comparator;\r\n\r\n        Transactional.onDefine.call( this, definition );\r\n    }\r\n    \r\n    _itemEvents : EventMap\r\n\r\n    /***********************************\r\n     * Core Members\r\n     */\r\n    // Array of the records\r\n    models : R[]\r\n\r\n    // Polymorphic accessor for aggregated attribute's canBeUpdated().\r\n    get __inner_state__(){ return this.models; }\r\n\r\n    // Index by id and cid\r\n    _byId : { [ id : string ] : R }\r\n\r\n    set comparator( x : GenericComparator ){\r\n\r\n        switch( typeof x ){\r\n            case 'string' :\r\n                this._comparator = ( a, b ) => {\r\n                    const aa = a[ <string>x ], bb = b[ <string>x ];\r\n                    if( aa === bb ) return 0;\r\n                    return aa < bb ? -1 : + 1;\r\n                } \r\n                break;\r\n            case 'function' :\r\n                if( x.length === 1 ){\r\n                    this._comparator = ( a, b ) => {\r\n                        const aa = (<any>x).call( this, a ), bb = (<any>x).call( this, b );\r\n                        if( aa === bb ) return 0;\r\n                        return aa < bb ? -1 : + 1;\r\n                    }\r\n                }\r\n                else{\r\n                    this._comparator = ( a, b ) => (<any>x).call( this, a, b );\r\n                }\r\n                break;\r\n                \r\n            default :\r\n                this._comparator = null;\r\n        }\r\n    }\r\n    \r\n    // TODO: Improve typing\r\n    getStore() : Transactional {\r\n        return this._store || ( this._store = this._owner ? this._owner.getStore() : this._defaultStore );\r\n    }\r\n\r\n    _store : Transactional\r\n\r\n    get comparator(){ return this._comparator; }\r\n    _comparator : ( a : R, b : R ) => number\r\n\r\n    _onChildrenChange( record : R, options : TransactionOptions = {}, initiator? : Transactional ){\r\n        // Ignore updates from nested transactions.\r\n        if( initiator === this ) return;\r\n\r\n        const { idAttribute } = this;\r\n\r\n        if( record.hasChanged( idAttribute ) ){\r\n            updateIndex( this._byId, record );\r\n        }\r\n\r\n        const isRoot = begin( this );\r\n\r\n        if( markAsDirty( this, options ) ){\r\n            // Forward change event from the record.\r\n            trigger2( this, 'change', record, options )\r\n        }\r\n\r\n        isRoot && commit( this );\r\n    }\r\n\r\n    get( objOrId : string | { id? : string, cid? : string } ) : R {\r\n        if( objOrId == null ) return;\r\n\r\n        if( typeof objOrId === 'object' ){\r\n            const id = objOrId[ this.idAttribute ];\r\n            return ( id !== void 0 && this._byId[ id ] ) || this._byId[ objOrId.cid ];\r\n        }\r\n        else{\r\n            return this._byId[ objOrId ];\r\n        }        \r\n    }\r\n\r\n    [ Symbol.iterator ]() : IterableIterator<R> {\r\n        return this.models[ Symbol.iterator ]();\r\n    }\r\n\r\n    // Loop through the members in the scope of transaction.\r\n    // Transactional version of each()\r\n    updateEach( iteratee : ( val : R, key? : number ) => void ){\r\n        const isRoot = transactionApi.begin( this );\r\n        this.each( iteratee );\r\n        isRoot && transactionApi.commit( this );\r\n    }\r\n\r\n    _validateNested( errors : {} ) : number {\r\n        // Don't validate if not aggregated.\r\n        if( this._shared ) return 0;\r\n\r\n        let count = 0;\r\n\r\n        this.each( record => {\r\n            const error = record.validationError;\r\n            if( error ){\r\n                errors[ record.cid ] = error;\r\n                count++;\r\n            }\r\n        });\r\n\r\n        return count;\r\n    }\r\n\r\n    model : typeof Record\r\n\r\n    // idAttribute extracted from the model type.\r\n    idAttribute : string\r\n\r\n    constructor( records? : ElementsArg<R>, options : CollectionOptions = {}, shared? : number ){\r\n        super( _count++ );\r\n        this.models = [];\r\n        this._byId = {};\r\n        \r\n        this.comparator  = this.comparator;\r\n\r\n        if( options.comparator !== void 0 ){\r\n            this.comparator = options.comparator;\r\n            options.comparator = void 0;\r\n        }\r\n        \r\n        this.model       = this.model;\r\n        \r\n        if( options.model ){\r\n            this.model = options.model;\r\n            options.model = void 0;\r\n        }\r\n\r\n        this.idAttribute = this.model.prototype.idAttribute; //TODO: Remove?\r\n\r\n        this._shared = shared || 0;\r\n\r\n        if( records ){\r\n            const elements = toElements( this, records, options );\r\n            emptySetTransaction( this, elements, options, true );\r\n        }\r\n\r\n        this.initialize.apply( this, arguments );\r\n\r\n        if( this._localEvents ) this._localEvents.subscribe( this, this );\r\n    }\r\n\r\n    initialize(){}\r\n\r\n    first() : R { return this.models[ 0 ]; }\r\n    last() : R { return this.models[ this.models.length - 1 ]; }\r\n    at( a_index : number ) : R {\r\n        const index = a_index < 0 ? a_index + this.models.length : a_index;    \r\n        return this.models[ index ];\r\n    }\r\n\r\n    // Deeply clone collection, optionally setting new owner.\r\n    clone( options : CloneOptions = {} ) : this {\r\n        const models = this._shared & ItemsBehavior.share ? this.models : this.map( model => model.clone() ),\r\n              copy : this = new (<any>this.constructor)( models, { model : this.model, comparator : this.comparator }, this._shared );\r\n        \r\n        if( options.pinStore ) copy._defaultStore = this.getStore();\r\n        \r\n        return copy;\r\n    }\r\n\r\n    toJSON( options? : object ) : any {\r\n        return this.map( model => model.toJSON( options ) );\r\n    }\r\n\r\n    // Apply bulk in-place object update in scope of ad-hoc transaction \r\n    set( elements : ElementsArg<R> = [], options : TransactionOptions = {} ) : this {\r\n        if( (<any>options).add !== void 0 ){\r\n            this._log( 'warn', \"Type-R:InvalidOption\", \"Collection.set doesn't support 'add' option, behaving as if options.add === true.\", options );\r\n        }\r\n\r\n        // Handle reset option here - no way it will be populated from the top as nested transaction.\r\n        if( options.reset ){\r\n            this.reset( elements, options )\r\n        }\r\n        else{\r\n            const transaction = this._createTransaction( elements, options );\r\n            transaction && transaction.commit();\r\n        } \r\n\r\n        return this;    \r\n    }\r\n\r\n        /**\r\n     * Enable or disable live updates.\r\n     * \r\n     * `true` enables full collection synchronization.\r\n     * `false` cancel live updates.\r\n     * `json => true | false` - filter updates\r\n     */\r\n    liveUpdates( enabled : LiveUpdatesOption ) : IOPromise<this> {\r\n        if( enabled ){\r\n            this.liveUpdates( false );\r\n\r\n            const filter = typeof enabled === 'function' ? enabled : () => true;\r\n\r\n            this._liveUpdates = {\r\n                updated : json => {\r\n                    filter( json ) && this.add( json, { parse : true, merge : true } );\r\n                },\r\n\r\n                removed : id => this.remove( id )\r\n            };\r\n\r\n            return this.getEndpoint().subscribe( this._liveUpdates, this ).then( () => this );\r\n        }\r\n        else{\r\n            if( this._liveUpdates ){\r\n                this.getEndpoint().unsubscribe( this._liveUpdates, this );\r\n                this._liveUpdates = null;\r\n            }\r\n\r\n            // TODO: Return the resolved promise.\r\n        }\r\n    }\r\n\r\n    _liveUpdates : object\r\n\r\n    fetch( a_options : { liveUpdates? : LiveUpdatesOption } & TransactionOptions = {} ) : IOPromise<this> {\r\n        const options = { parse : true, ...a_options },\r\n            endpoint = this.getEndpoint();\r\n\r\n        return startIO(\r\n            this,\r\n            endpoint.list( options, this ),\r\n            options,\r\n\r\n            json => {\r\n                let result : any = this.set( json, { parse : true, ...options } as TransactionOptions );\r\n                \r\n                if( options.liveUpdates ){\r\n                    result = this.liveUpdates( options.liveUpdates );\r\n                }\r\n\r\n                return result;\r\n            }\r\n        );\r\n    }\r\n\r\n    dispose() : void {\r\n        if( this._disposed ) return;\r\n\r\n        const aggregated = !this._shared;\r\n\r\n        for( let record of this.models ){\r\n            free( this, record );\r\n\r\n            if( aggregated ) record.dispose();\r\n        }\r\n\r\n        this.liveUpdates( false );\r\n\r\n        super.dispose();\r\n    }\r\n\r\n    reset( a_elements? : ElementsArg<R>, options : TransactionOptions = {} ) : R[] {\r\n        const isRoot = begin( this ),\r\n              previousModels = this.models;\r\n\r\n        // Make all changes required, but be silent.\r\n        if( a_elements ){            \r\n            emptySetTransaction( this, toElements( this, a_elements, options ), options, true );\r\n        }\r\n        else{\r\n            this._byId = {};\r\n            this.models = [];\r\n        }\r\n\r\n        markAsDirty( this, options );\r\n\r\n        options.silent || trigger2( this, 'reset', this, defaults( { previousModels : previousModels }, options ) );\r\n\r\n        // Dispose models which are not in the updated collection.\r\n        const { _byId } = this;\r\n        \r\n        for( let toDispose of previousModels ){\r\n            _byId[ toDispose.cid ] || free( this, toDispose );\r\n        }\r\n\r\n        isRoot && commit( this );\r\n        return this.models;\r\n    }\r\n\r\n    // Add elements to collection.\r\n    add( a_elements : ElementsArg<R> , options : AddOptions = {} ){\r\n        const elements = toElements( this, a_elements, options ),\r\n              transaction = this.models.length ?\r\n                    addTransaction( this, elements, options ) :\r\n                    emptySetTransaction( this, elements, options );\r\n\r\n        if( transaction ){\r\n            transaction.commit();\r\n            return transaction.added;\r\n        }\r\n    }\r\n\r\n    // Remove elements. \r\n    remove( recordsOrIds : any, options : CollectionOptions = {} ) : R[] | R {\r\n        if( recordsOrIds ){\r\n            return Array.isArray( recordsOrIds ) ?\r\n                        removeMany( this, recordsOrIds, options ) as R[]:\r\n                        removeOne( this, recordsOrIds, options ) as R;\r\n        }\r\n\r\n        return [];\r\n    }\r\n\r\n    // Apply bulk object update without any notifications, and return open transaction.\r\n    // Used internally to implement two-phase commit.   \r\n    _createTransaction( a_elements : ElementsArg<R>, options : TransactionOptions = {} ) : CollectionTransaction | void {\r\n        const elements = toElements( this, a_elements, options );\r\n\r\n        if( this.models.length ){\r\n            return options.remove === false ?\r\n                        addTransaction( this, elements, options, true ) :\r\n                        setTransaction( this, elements, options );\r\n        }\r\n        else{\r\n            return emptySetTransaction( this, elements, options );\r\n        }\r\n    }\r\n\r\n    static _metatype = AggregatedType;\r\n\r\n    /***********************************\r\n     * Collection manipulation methods\r\n     */\r\n\r\n    sort( options : TransactionOptions = {} ) : this {\r\n        if( sortElements( this, options ) ){\r\n            const isRoot = begin( this );\r\n            \r\n            if( markAsDirty( this, options ) ){\r\n                trigger2( this, 'sort', this, options );\r\n            }\r\n\r\n            isRoot && commit( this );\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    // Remove and return given model.\r\n    unset( modelOrId : R | string, options? ) : R {\r\n        const value = this.get( modelOrId );\r\n        this.remove( modelOrId, { unset : true, ...options } );\r\n        return value;\r\n    }\r\n\r\n    modelId( attrs : {} ) : any {\r\n        return attrs[ this.model.prototype.idAttribute ];\r\n    }\r\n\r\n    // Toggle model in collection.\r\n    toggle( model : R, a_next? : boolean ) : boolean {\r\n        var prev = Boolean( this.get( model ) ),\r\n            next = a_next === void 0 ? !prev : Boolean( a_next );\r\n\r\n        if( prev !== next ){\r\n            if( prev ){\r\n                this.remove( model );\r\n            }\r\n            else{\r\n                this.add( model );\r\n            }\r\n        }\r\n\r\n        return next;\r\n    }\r\n\r\n    _log( level : LogLevel, topic : string, text : string, value : object, a_logger? : Logger ) : void {\r\n        ( a_logger || logger ).trigger( level, topic, `${ this.model.prototype.getClassName() }.${ this.getClassName() }: ` + text, {\r\n            Argument : value,\r\n            'Attributes spec' : this.model.prototype._attributes\r\n        });\r\n    }\r\n\r\n    getClassName() : string {\r\n        return super.getClassName() || 'Collection';\r\n    }\r\n\r\n    /***********************************\r\n     * Proxied Array methods\r\n     */\r\n\r\n    get length() : number { return this.models.length; }\r\n\r\n    // Add a model to the end of the collection.\r\n    push(model : ElementsArg<R>, options? : CollectionOptions ) {\r\n        return this.add(model, assign({at: this.length}, options));\r\n    }\r\n\r\n    // Remove a model from the end of the collection.\r\n    pop( options? : CollectionOptions ) : R {\r\n        var model = this.at(this.length - 1);\r\n        this.remove(model, { unset : true, ...options });\r\n        return model;\r\n    }\r\n\r\n    // Add a model to the beginning of the collection.\r\n    unshift(model : ElementsArg<R>, options? : CollectionOptions ) {\r\n        return this.add(model, assign({at: 0}, options));\r\n    }\r\n  \r\n    // Remove a model from the beginning of the collection.\r\n    shift( options? : CollectionOptions ) : R {\r\n        const model = this.at(0);\r\n        this.remove( model, { unset : true, ...options } );\r\n        return model;\r\n    }\r\n}\r\n\r\n\r\nimport { ArrayMixin } from './arrayMethods'\r\n\r\nexport interface Collection<R extends Record> extends ArrayMixin<R>{\r\n\r\n}\r\n\r\nexport type LiveUpdatesOption = boolean | ( ( x : any ) => boolean );\r\n\r\nexport type ElementsArg<R = Record> = Partial<R> | Partial<R>[]\r\n\r\n// TODO: make is safe for parse to return null (?)\r\nfunction toElements<R extends Record>( collection : Collection<R>, elements : ElementsArg<R>, options : CollectionOptions ) : Elements {\r\n    const parsed = options.parse ? collection.parse( elements, options ) : elements; \r\n    return Array.isArray( parsed ) ? parsed : [ parsed ];\r\n}\r\n\r\nRecord.Collection = Collection;","import { Collection } from '../collection';\r\nimport { Record } from '../record';\r\nimport { CompiledReference } from '../traversable';\r\n\r\nexport type CollectionReference = ( () => Collection ) | Collection | string; \r\n\r\n/** @private */\r\nexport function parseReference( collectionRef : CollectionReference ) : ( root : Record ) => Collection {\r\n    switch( typeof collectionRef ){\r\n        case 'function' :\r\n            return root => (<any>collectionRef).call( root );\r\n        case 'object'   :\r\n            return () => <Collection>collectionRef;\r\n        case 'string'   :\r\n            const { resolve } = new CompiledReference( <string>collectionRef );\r\n            return resolve;\r\n    }\r\n}","import { AnyType, ChainableAttributeSpec, Record } from '../record';\r\nimport { CollectionReference, parseReference } from './commons';\r\n\r\n\r\n/********\r\n * Reference to model by id.\r\n * \r\n * Untyped attribute. Holds model id, when unresolved. When resolved, is substituted\r\n * with a real model.\r\n * \r\n * No model changes are detected and counted as owner's change. That's intentional.\r\n */\r\n\r\n/** @private */\r\ntype RecordRefValue = Record | string;\r\n\r\n/** @private */\r\nclass RecordRefType extends AnyType {\r\n    // It is always serialized as an id, whenever it's resolved or not. \r\n    toJSON( value : RecordRefValue ){\r\n        return value && typeof value === 'object' ? value.id : value;\r\n    }\r\n\r\n    // Wne \r\n    clone( value : RecordRefValue ){\r\n        return value && typeof value === 'object' ? value.id : value;\r\n    }\r\n\r\n    // Model refs by id are equal when their ids are equal.\r\n    isChanged( a : RecordRefValue, b : RecordRefValue){\r\n        var aId = a && ( (<Record>a).id == null ? a : (<Record>a).id ),\r\n            bId = b && ( (<Record>b).id == null ? b : (<Record>b).id );\r\n\r\n        return aId !== bId;\r\n    }\r\n\r\n    // Refs are always valid.\r\n    validate( model, value, name ){}\r\n}\r\n\r\nexport function memberOf<R extends typeof Record>( this : void, masterCollection : CollectionReference, T? : R ) : ChainableAttributeSpec<R> {\r\n    const getMasterCollection = parseReference( masterCollection );\r\n\r\n    const typeSpec = new ChainableAttributeSpec<R>({\r\n        value : null,\r\n        _metatype : RecordRefType\r\n    });\r\n    \r\n    return typeSpec\r\n        .get( function( objOrId : RecordRefValue, name : string ) : Record {\r\n            if( typeof objOrId === 'object' ) return objOrId;\r\n\r\n            // So, we're dealing with an id reference. Resolve it.\r\n            const collection = getMasterCollection( this );\r\n            let   record : Record = null;\r\n\r\n            // If master collection exists and is not empty...\r\n            if( collection && collection.length ){\r\n                // Silently update attribute with record from this collection.\r\n                record = collection.get( objOrId ) || null;\r\n                this.attributes[ name ] = record;\r\n\r\n                // Subscribe for events manually. delegateEvents won't be invoked.\r\n                record && this._attributes[ name ].handleChange( record, null, this, {} );\r\n            }\r\n\r\n            return record;\r\n        });\r\n}","import { Collection, CollectionConstructor } from '../collection';\r\nimport { define, tools } from '../object-plus';\r\nimport { AggregatedType, ChainableAttributeSpec, Record, type } from '../record';\r\nimport { ItemsBehavior, transactionApi } from '../transactions';\r\nimport { CollectionReference, parseReference } from './commons';\r\n\r\n\r\ntype RecordsIds = ( string | number )[];\r\n\r\nexport function subsetOf<X extends CollectionConstructor<R>, R extends Record>( this : void, masterCollection : CollectionReference, T? : X ) : ChainableAttributeSpec<X>{\r\n    const CollectionClass = T || Collection,\r\n        // Lazily define class for subset collection, if it's not defined already...\r\n        SubsetOf = CollectionClass._SubsetOf || ( CollectionClass._SubsetOf = defineSubsetCollection( CollectionClass as any ) as any ),\r\n        getMasterCollection = parseReference( masterCollection );\r\n\r\n    return type( SubsetOf ).get(\r\n        function( refs ){\r\n            !refs || refs.resolvedWith || refs.resolve( getMasterCollection( this ) );\r\n            return refs;\r\n        }\r\n    );\r\n}\r\n\r\nCollection.prototype.createSubset = function( models : any, options ) : Collection {\r\n    const SubsetOf = subsetOf( this, this.constructor ).options.type,\r\n          subset   = new SubsetOf( models, options );\r\n        \r\n    subset.resolve( this );\r\n    return subset;\r\n}\r\n\r\nconst subsetOfBehavior = ItemsBehavior.share | ItemsBehavior.persistent;\r\n\r\nfunction defineSubsetCollection( CollectionClass : typeof Collection ) {\r\n    @define class SubsetOfCollection extends CollectionClass {\r\n        refs : any[];\r\n        resolvedWith : Collection = null;\r\n\r\n        _metatype : AggregatedType\r\n\r\n        get __inner_state__(){ return this.refs || this.models; }\r\n\r\n        constructor( recordsOrIds?, options? ){\r\n            super( [], options, subsetOfBehavior );\r\n            this.refs = toArray( recordsOrIds );\r\n        }\r\n\r\n        // Remove should work fine as it already accepts ids. Add won't...\r\n        add( a_elements, options = {} ){\r\n            const { resolvedWith } = this,\r\n                    toAdd = toArray( a_elements );\r\n            \r\n            if( resolvedWith ){\r\n                // If the collection is resolved already, everything is simple.\r\n                return super.add( resolveRefs( resolvedWith, toAdd ), options );\r\n            }\r\n            else{\r\n                // Collection is not resolved yet. So, we prepare the delayed computation.\r\n                if( toAdd.length ){\r\n                    const isRoot = transactionApi.begin( this );\r\n\r\n                    // Save elements to resolve in future...\r\n                    this.refs = this.refs ? this.refs.concat( toAdd ) : toAdd.slice();\r\n\r\n                    transactionApi.markAsDirty( this, options );\r\n\r\n                    // And throw the 'changes' event.\r\n                    isRoot && transactionApi.commit( this );\r\n                }\r\n            }\r\n        }\r\n\r\n        reset( a_elements?, options = {} ){\r\n            const { resolvedWith } = this,\r\n                elements = toArray( a_elements );\r\n    \r\n            return resolvedWith ?\r\n                // Collection is resolved, so parse ids and forward the call to set.\r\n                super.reset( resolveRefs( resolvedWith, elements ), options ) :\r\n                // Collection is not resolved yet. So, we prepare the delayed computation.\r\n                delaySet( this, elements, options ) as any || [];\r\n        }\r\n\r\n        _createTransaction( a_elements, options? ){\r\n            const { resolvedWith } = this,\r\n                elements = toArray( a_elements );\r\n    \r\n            return resolvedWith ?\r\n                // Collection is resolved, so parse ids and forward the call to set.\r\n                super._createTransaction( resolveRefs( resolvedWith, elements ), options ) :\r\n                // Collection is not resolved yet. So, we prepare the delayed computation.\r\n                delaySet( this, elements, options );\r\n        }\r\n\r\n        // Serialized as an array of model ids.\r\n        toJSON() : RecordsIds {\r\n            return this.refs ?\r\n                this.refs.map( objOrId => objOrId.id || objOrId ) :\r\n                this.models.map( model => model.id );\r\n        }\r\n\r\n        // Subset is always valid.\r\n        _validateNested(){ return 0; }\r\n\r\n        get length() : number {\r\n            return this.models.length || ( this.refs ? this.refs.length : 0 );\r\n        }\r\n\r\n        // Must be shallow copied on clone.\r\n        clone( owner? ){\r\n            var Ctor = (<any>this).constructor,\r\n                copy = new Ctor( [], {\r\n                    model : this.model,\r\n                    comparator : this.comparator\r\n                });\r\n\r\n            if( this.resolvedWith ){\r\n                // TODO: bug here. \r\n                copy.resolvedWith = this.resolvedWith;\r\n                copy.refs = null;\r\n                copy.reset( this.models, { silent : true } );\r\n            }\r\n            else{\r\n                copy.refs = this.refs.slice();\r\n            }\r\n\r\n            return copy;\r\n        }\r\n\r\n        // Clean up the custom parse method possibly defined in the base class.\r\n        parse( raw : any ) : Record[] {\r\n            return raw;\r\n        }\r\n\r\n        resolve( collection : Collection ) : this {\r\n            if( collection && collection.length ){\r\n                this.resolvedWith = collection;\r\n\r\n                if( this.refs ){\r\n                    this.reset( this.refs, { silent : true } );\r\n                    this.refs = null;\r\n                }\r\n            }\r\n\r\n            return this;\r\n        }\r\n\r\n        getModelIds() : RecordsIds { return this.toJSON(); }\r\n\r\n        toggle( modelOrId : any, val : boolean ) : boolean {\r\n            return super.toggle( this.resolvedWith.get( modelOrId ), val );\r\n        }\r\n\r\n        addAll() : Record[] {\r\n            if( this.resolvedWith ){\r\n                this.set( this.resolvedWith.models );\r\n                return this.models;\r\n            }\r\n\r\n            throw new Error( \"Cannot add elemens because the subset collection is not resolved yet.\" );\r\n        }\r\n\r\n        toggleAll() : Record[] {\r\n            return this.length ? this.reset() : this.addAll();\r\n        }\r\n    }\r\n\r\n    // Clean up all custom item events to prevent memory leaks.\r\n    SubsetOfCollection.prototype._itemEvents = void 0;\r\n\r\n    return SubsetOfCollection;\r\n}\r\n\r\nfunction resolveRefs( master, elements ){\r\n    const records = [];\r\n    \r\n    for( let el of elements ){\r\n        const record = master.get( el );\r\n        if( record ) records.push( record );\r\n    }\r\n\r\n    return records;\r\n}\r\n\r\nfunction delaySet( collection, elements, options ) : void {\r\n    if( tools.notEqual( collection.refs, elements ) ){\r\n        const isRoot = transactionApi.begin( collection );\r\n\r\n        // Save elements to resolve in future...\r\n        collection.refs = elements.slice();\r\n\r\n        transactionApi.markAsDirty( collection, options );\r\n        \r\n        // And throw the 'changes' event.\r\n        isRoot && transactionApi.commit( collection );\r\n    }\r\n}\r\n\r\nfunction toArray( elements ){\r\n    return elements ? ( \r\n        Array.isArray( elements ) ? elements : [ elements ]\r\n    ) : [];\r\n}","import { Record } from '../record';\r\nimport { Transactional } from '../transactions';\r\n\r\nlet _store : Store = null;\r\n\r\nexport class Store extends Record {\r\n    getStore() : Store { return this; }\r\n \r\n    // delegate item lookup to owner, and to the global store if undefined\r\n    get( name : string ) : any {\r\n        // Lookup for resource in the current store. \r\n        let local = this[ name ];\r\n\r\n        // If something is found or it's the global store, return result.\r\n        if( local || this === this._defaultStore ) return local;\r\n\r\n        // Forward failed lookup to owner or global store.\r\n        return this._owner ? this._owner.get( name ) : this._defaultStore.get( name ); \r\n    }\r\n\r\n    static get global(){ return _store; }\r\n    static set global( store : Store ){\r\n        if( _store ){\r\n          _store.dispose();\r\n        }\r\n\r\n        Transactional.prototype._defaultStore = _store = store;\r\n    }\r\n}\r\n\r\nStore.global = new Store();","// Dummy polyfill to prevent exception in IE.\r\nif( typeof Symbol === 'undefined' ){\r\n    Object.defineProperty( window, 'Symbol', { value : { iterator : 'Symbol.iterator' }, configurable : true  });\r\n}\r\n\r\nimport { Events, Mixable as Class } from './object-plus/';\r\n// Define synonims for NestedTypes backward compatibility.\r\nimport { Record as Model } from './record';\r\n\r\n/**\r\n * Export everything \r\n */\r\nexport * from './collection';\r\nexport * from './io-tools';\r\nexport * from './object-plus';\r\nexport * from './record';\r\nexport * from './relations';\r\nexport * from './transactions';\r\nexport { Model, Class };\r\n\r\n\r\nexport const { on, off, trigger, once, listenTo, stopListening, listenToOnce } = <any>Events;\r\n\r\n/** Wrap model or collection method in transaction. */\r\nexport function transaction< F extends Function >( method : F ) : F {\r\n    return <any>function( ...args ){\r\n        let result;\r\n        \r\n        this.transaction( () => {\r\n            result = method.apply( this, args );\r\n        });\r\n        \r\n        return result;\r\n    }\r\n}"],"names":["defaults","dest","source","name","hasOwnProperty","arguments","length","i","other","isValidJSON","value","proto","Object","getPrototypeOf","prototype","Array","every","getBaseClass","Class","constructor","isEmpty","obj","key","some","fun","ArrayProto","arr","result","someArray","someObject","predicate","x","omit","discard","transform","assign","once","func","memo","first","apply","this","DateProto","Date","ObjectProto","notEqual","a","b","protoA","arraysNotEqual","keysA","keys","objectsNotEqual","HashProto","create","hashMap","hash","definition","_i","names","names_1","_a","name_1","prop","desc","getOwnPropertyDescriptor","o","map","EventMap","handlers","slice","addEventsMap","concat","addEvent","split","eventSplitter","getBubblingHandler","callback","name_2","push","EventDescriptor","target","event_1","on","event_2","off","handler","_bubblingHandlers","event","c","d","e","trigger5","trigger3","trigger2","context","next","listOff","_events","filteredHead","prev","head","ev","_callback","listSend3","call","EventHandler","once_1","_once","name_3","strings","api","events","test","self","queue","all","listSend2","listSend4","listSend5","f","listSend6","extendStatics","setPrototypeOf","__proto__","p","__extends","__","__assign","t","s","n","__rest","indexOf","getOwnPropertySymbols","__decorate","decorators","r","Reflect","decorate","defineProperty","Mixable","protoProps","staticProps","BaseClass","mixins","defineMixin","merge","mergeObject","getStaticDefinitions","onDefine","definitions","mergeInheritedMembers","spec","statics","TheSubclass","tslib_1.__extends","predefine","define","Constructor","__super__","MixinsState","get","populate","onExtend","ClassOrDefinition","Ctor","rules","definitionRules","definitionDecorator","definitionKey","mergeRules","appliedMixins","rule","mixins_1","mixin","isArray","sourceMixins","ctors","ctors_1","unshift","object","ignore","dontMix","getOwnPropertyNames","forEachOwnProp","sourceProp","_this","assignProperty","mixinRules","protoValue","baseProto","resolveRule","function","caller","list","destProp","configurable","pipe","classFirst","classLast","_idCount","uniqueId","cid","initialize","Messenger","localEvents","_localEvents","properties","eventsMap","defineProperties","toPropertyDescriptor","addReference","a_source","_listeningTo","removeAll","second","_disposed","stopListening","Events","listener","isProduction","process","env","NODE_ENV","logEvents","Logger","level","filter","topic","msg","props","args","toString","console","Error","counter","_super","window","something","body","join","JSON","stringify","logger","logEvents_1","logToConsole","throwingLogger","throwOn","log","trigger","bind","startIO","promise","options","thenDo","abortIO","ioUpdate","_ioPromise","then","resp","triggerAndBubble","catch","err","abort","eventSource","collection","referenceMask","reference","splitTail","path","match","substr","tail","pop","local","resolve","Function","shift","resolveReference","root","action","skip","getStore","getOwner","ItemsBehavior","_validateNested","nested","error","validate","ValidationError","iteratee","each","eachError","cidPrefix","Transactional","endpoint","_endpoint","Transactional_1","_owner","_ownerKey","_changeEventName","listenTo","isRoot","transactionApi","begin","update","set","commit","transaction","__inner_state__","_changeToken","json","strict","validationError","eachValidationError","getClassName","data","_defaultStore","getOwnerEndpoint","_endpoints","_validationError","getValidationError","_transaction","markAsDirty","dirty","silent","_isDirty","initiator","originalOptions","_onChildrenChange","aquire","owner","child","ReferenceError","free","_begin","_markAsDirty","setAttribute","record","_attributes","doUpdate","attributes","_previousAttributes","AttributesCopy","_changedAttributes","UpdateRecordMixin","attribute","propagateChanges","forceAttributeChange","_createTransaction","a_values","unknown","changes","values","parse","shouldBeAnObject","unknownAttrsWarning","RecordTransaction","nested_1","_log","nested_2","changes_1","_b","emptyOptions","a_options","getHooks","transforms","changeHandlers","type","toJSON","changeEvents","hasCustomDefault","defaultValue","tools.isValidJSON","isRequired","convert","getHook_1","getHook","reduce","chainGetHooks","validate_1","chainTransforms","handleChange","chainChangeHandlers","doInit","AnyType","model","v","isChanged","code","text","New value","Prev. value","prevHook","nextHook","prevTransform","nextTransform","prevHandler","nextHandler","ImmutableClassType","PrimitiveType","NumericType","num","isFinite","ArrayType","ObjectType","doNothing","FunctionType","DateType","date","timestamp","getTime","toISOString","supportsDate","isNaN","struct","minutesOffset","isoDatePattern","exec","k","numericKeys","undefined","UTC","safeParseDate","AggregatedType","clone","canBeUpdated","nestedTransaction","_shared","persistent","_handleChange","unset","dispose","shareAndListen","listen","share","SharedType","implicitObject","_onChange","builtins","String","Number","Boolean","metatypes","getMetatype","_metatype","idx","ChainableAttributeSpec","check","metadata","required","ref","emptyFunction","changed","eventMap","unsubscribe","subscribe","cloned","Type","attrDef","shared","inferType","createAttribute","from","createAttributesMixin","attributesDefinition","baseClassAttributes","myAttributes","_.transform","allAttributes","_.defaults","ConstructorsMixin","attrDefs","attrs","attr","Attributes","constructorsMixin","_attributesArray","createPropertyDescriptor","attrSpecs","eventsApi.EventMap","createWatcherFromRef","wrapWatcher","localEventsMixin","watcher","IORecordMixin","save","getEndpoint","isNew","id","fetch","read","destroy","remove","_cidCounter","typeCheck","Record","idAttribute","extend","diff","hasChanged","val","old","nullify","forEach","_attributesArray_1","copy","pinStore","errors","asJson","l","newModel","clear","a_logger","Attributes definition","a_fun","tools.transform","Symbol","iterator","RecordEntriesIterator","Collection","BaseRecordAttributes","BaseRecordAttributesCopy","IdAttribute","metatype","done","DefaultCollection","dynamicMixin","_aquire","_free","convertAndAquire","_aggregationError","_itemEvents","sortElements","_comparator","sort","models","addIndex","index","removeIndex","updateIndex","previous","added","removed","sorted","CollectionTransaction","logAggregationError","added_1","_d","removed_1","_e","addTransaction","items","a_items","forceMerge","_byId","prevLength","a_items_1","item","appendElements","needSort","at","length_1","j","moveElements","sortOrMoveElements","removeMany","toRemove","_removeFromIndex","_reallocate","silentOptions","emptySetTransaction","len","src","_reallocateEmpty","setTransaction","_prevById","prevModels","toAdd","orderKept","reusedCount","previous_1","_garbageCollect","children","children_1","freeAll","addedOrChanged","ArrayMixin","res","init","end","modelOrId","idOrObj","toPredicateFunction","m","find","entries","noOp","keys_1","keys_2","_count","CollectionRefsType","records","comparator","toElements","RefsCollection","_SubsetOf","Refs","Subset","itemEvents","aa","bb","_store","objOrId","count","a_index","elements","add","reset","enabled","liveUpdates","filter_1","_liveUpdates","updated","tslib_1.__assign","aggregated","a_elements","previousModels","previousModels_1","toDispose","recordsOrIds","el","splice","notify","removeOne","a_next","Argument","Attributes spec","parsed","parseReference","collectionRef","RecordRefType","subsetOf","masterCollection","T","CollectionClass","SubsetOf","subsetOfBehavior","refs","toArray","SubsetOfCollection","resolvedWith","resolveRefs","delaySet","raw","toggle","addAll","getMasterCollection","createSubset","subset","master","elements_1","tools.notEqual","Store","store","global","listenToOnce","method","reject","onAbort","fn","Promise","a_resolve","a_reject","listName","DefaultRecord","attrName","getMetadata","value_1","as"],"mappings":"4MAEgBA,EAAeC,EAAUC,GACrC,IAAK,IAAIC,KAAQD,EACTA,EAAOE,eAAgBD,KAAWF,EAAKG,eAAgBD,KACvDF,EAAME,GAASD,EAAQC,IAI/B,GAAuB,EAAnBE,UAAUC,OACV,IAAK,IAAIC,EAAI,EAAGA,EAAIF,UAAUC,OAAQC,IAAK,CACvC,IAAMC,EAAQH,UAAWE,GACzBC,GAASR,EAAUC,EAAMO,GAIjC,OAAOP,WAIKQ,EAAaC,GACzB,GAAc,OAAVA,EACA,OAAO,EAGX,cAAeA,GACf,IAAK,SACL,IAAK,SACL,IAAK,UACD,OAAO,EAEX,IAAK,SACD,IAAIC,EAAQC,OAAOC,eAAgBH,GAEnC,GAAIC,IAAUC,OAAOE,WAAaH,IAAUI,MAAMD,UAC9C,OAAOE,EAAON,EAAOD,GAI7B,OAAO,WAOKQ,EAAcC,GAC1B,OAAON,OAAOC,eAAgBK,EAAMJ,WAAYK,qBAWpCC,EAASC,GACrB,GAAIA,EACA,IAAK,IAAIC,KAAOD,EACZ,GAAIA,EAAIjB,eAAgBkB,GACpB,OAAO,EAKnB,OAAO,WA8BKC,EAAMF,EAAKG,GACvB,OAAIZ,OAAOC,eAAgBQ,KAAUI,EAzBzC,SAAoBC,EAAaF,GAG7B,IAFA,IAAIG,EAEKpB,EAAI,EAAGA,EAAImB,EAAIpB,OAAQC,IAC5B,GAAIoB,EAASH,EAAKE,EAAKnB,GAAKA,GACxB,OAAOoB,EAqBJC,CAAWP,EAAKG,GAf/B,SAAqBH,EAAUG,GAC3B,IAAIG,EAEJ,IAAK,IAAIL,KAAOD,EACZ,GAAIA,EAAIjB,eAAgBkB,KAChBK,EAASH,EAAKH,EAAKC,GAAOA,IAC1B,OAAOK,EAYRE,CAAYR,EAAKG,YAKhBR,EAAOK,EAAWS,GAC9B,OAAQP,EAAMF,EAAK,SAAAU,GAAK,OAACD,EAAWC,cAgBxBC,EAAM9B,GAGlB,IAFA,IAAMD,EAAO,GAAIgC,EAAU,GAElB1B,EAAI,EAAGA,EAAIF,UAAUC,OAAQC,IAClC0B,EAAS5B,UAAWE,KAAQ,EAGhC,IAAK,IAAIJ,KAAQD,GACR+B,EAAQ7B,eAAgBD,IAAUD,EAAOE,eAAgBD,KAC1DF,EAAME,GAASD,EAAQC,IAI/B,OAAOF,WAMKiC,EAAmBjC,EAAiCC,EAAmCsB,GACnG,IAAK,IAAIrB,KAAQD,EACb,GAAIA,EAAOE,eAAgBD,GAAS,CAChC,IAAIO,EAAQc,EAAKtB,EAAQC,GAAQA,QACvB,IAAVO,IAAsBT,EAAME,GAAcO,GAIlD,OAAOT,WAyBKkC,EAAalC,EAAUC,GACnC,IAAK,IAAIC,KAAQD,EACTA,EAAOE,eAAgBD,KACvBF,EAAME,GAASD,EAAQC,IAI/B,GAAuB,EAAnBE,UAAUC,OACV,IAAK,IAAIC,EAAI,EAAGA,EAAIF,UAAUC,OAAQC,IAAK,CACvC,IAAMC,EAAQH,UAAWE,GACzBC,GAAS2B,EAAQlC,EAAMO,GAI/B,OAAOP,WASKmC,EAAMC,GAClB,IAAIC,EAAMC,GAAQ,EAClB,OAAO,WAMH,OALKA,IACDA,GAAQ,EACRD,EAAOD,EAAKG,MAAMC,KAAMpC,WACxBgC,EAAO,MAEJC,GAKf,IAAMb,EAAaV,MAAMD,UACnB4B,EAAYC,KAAK7B,UACjB8B,EAAchC,OAAOE,mBAOX+B,EAAUC,EAASC,GAC/B,GAAID,IAAMC,EAAI,OAAO,EAErB,GAAID,GAAKC,GAAiB,iBAALD,GAA6B,iBAALC,EAAgB,CACzD,IAAMC,EAASpC,OAAOC,eAAgBiC,GAEtC,GAAIE,IAAWpC,OAAOC,eAAgBkC,GAAM,OAAO,EAEnD,OAAQC,GACJ,KAAKN,EAAc,OAAQI,IAAOC,EAClC,KAAKtB,EAAc,OA4B/B,SAAyBqB,EAAGC,GACxB,GAAID,EAAExC,SAAWyC,EAAEzC,OAAS,OAAO,EAEnC,IAAK,IAAIC,EAAI,EAAGA,EAAIuC,EAAExC,OAAQC,IAC1B,GAAIsC,EAAUC,EAAGvC,GAAKwC,EAAGxC,IAAQ,OAAO,EAG5C,OAAO,EAnC2B0C,CAAgBH,EAAGC,GAC7C,KAAKH,EACL,KAAK,KACD,OAQhB,SAA0BE,EAAGC,GACzB,IAAMG,EAAQtC,OAAOuC,KAAML,GAE3B,GAAII,EAAM5C,SAAWM,OAAOuC,KAAMJ,GAAIzC,OAAS,OAAO,EAEtD,IAAK,IAAIC,EAAI,EAAGA,EAAI2C,EAAM5C,OAAQC,IAAM,CACpC,IAAMe,EAAM4B,EAAO3C,GAEnB,IAAKwC,EAAE3C,eAAgBkB,IAASuB,EAAUC,EAAGxB,GAAOyB,EAAGzB,IACnD,OAAO,EAIf,OAAO,EArBY8B,CAAiBN,EAAGC,IAIvC,OAAO,EAmCX,IAAMM,EAAYzC,OAAO0C,OAAQ,eAGjBC,EAASlC,GACrB,IAAMmC,EAAO5C,OAAO0C,OAAQD,GAC5B,OAAOhC,EAAMc,EAAQqB,EAAMnC,GAAQmC,EAJvCH,EAAUjD,eAAiBwC,EAAYxC,wGAhOmBc,EAAOuC,OAAgB,aAAAC,mBAAAA,IAAAC,oBAC7E,IAAiB,QAAAC,IAAAC,WAAAA,IAAO,CAAnB,IAAIC,OACCpD,EAAQ+C,EAAYK,QAChB,IAAVpD,IAAsBQ,EAAMJ,UAAWgD,GAASpD,6DA2DjBW,EAAU0C,GAG7C,IAFA,IAAIC,EAEKrD,EAAQU,GAAM2C,GAAQrD,EAAOA,EAAQC,OAAOC,eAAgBF,GACjEqD,EAAOpD,OAAOqD,yBAA0BtD,EAAOoD,GAGnD,OAAOC,0CAoCsB/D,EAAUC,GACvC,IAAK,IAAIC,KAAQD,EACbD,EAAME,GAASD,EAAQC,GAG3B,OAAOF,yBAIwBA,EAAUC,GACzC,IAAK,IAAIC,KAAQD,OACQ,IAAjBD,EAAME,KACNF,EAAME,GAASD,EAAQC,IAI/B,OAAOF,0BAuBWiE,GAClB,OAAOA,EAAItD,OAAOuC,KAAMe,GAAM,+CC9K9B,WAAaC,GAFb1B,cAA+B,GAGvB0B,IACIA,aAAeC,EACf3B,KAAK4B,SAAWF,EAAIE,SAASC,QAG7BH,GAAO1B,KAAK8B,aAAcJ,IAwC1C,OAnCIC,kBAAA,SAAOD,GACH1B,KAAK4B,SAAW5B,KAAK4B,SAASG,OAAQL,EAAIE,WAG9CD,yBAAA,SAAcD,GACV,IAAK,IAAIR,KAASQ,EACd1B,KAAKgC,SAAUd,EAAOQ,EAAKR,KAInCS,yBAAA,SAAcT,GACV,IAAiB,QAAAE,EAAAF,EAAMe,MAAOC,GAAbjB,WAAAA,IAA8B,CAA1C,IAAII,OACLrB,KAAKgC,SAAUX,EAAMc,EAAoBd,MAIjDM,qBAAA,SAAUT,EAAgBkB,GAGtB,IAFQ,IAAAR,oBAESR,EAAAF,EAAMe,MAAOC,GAAbjB,WAAAA,IAA8B,CAA1C,IAAIoB,OACLT,EAASU,KAAM,IAAIC,EAAiBF,EAAMD,MAIlDT,sBAAA,SAAWa,EAAa/E,GACpB,IAAkB,QAAA2D,EAAApB,KAAK4B,SAALX,WAAAA,IAAe,CAA5B,IAAIwB,OACLC,EAAIjF,EAAQgF,EAAM/E,KAAM+E,EAAML,SAAUI,KAIhDb,wBAAA,SAAaa,EAAa/E,GACtB,IAAkB,QAAA2D,EAAApB,KAAK4B,SAALX,WAAAA,IAAe,CAA5B,IAAI0B,OACLC,EAAKnF,EAAQkF,EAAMjF,KAAMiF,EAAMP,SAAUI,YASjD,SACW9E,EACP0E,GADOpC,UAAAtC,EAIHsC,KAAKoC,UADQ,IAAbA,EACgBD,EAAoBzE,GAEX,iBAAb0E,EAER,WACI,IAAMS,EAAU7C,KAAMoC,GACtBS,GAAWA,EAAQ9C,MAAOC,KAAMpC,YAIdwE,GAMhCU,EAAoB,GAG1B,SAASX,EAAoBY,GACzB,OAAOD,EAAmBC,KACtBD,EAAmBC,GAAU,SAAU1C,EAAIC,EAAI0C,EAAIC,EAAIC,QACzC,IAAND,QAAsB,IAANC,GAAeC,EAAUnD,KAAM+C,EAAO1C,EAAGC,EAAG0C,EAAGC,EAAGC,QAC5D,IAANF,EAAeI,EAAUpD,KAAM+C,EAAO1C,EAAGC,EAAG0C,GAC3CK,EAAUrD,KAAM+C,EAAO1C,EAAGC,KAW3C,MACI,SAAoB8B,EAA4BkB,EAAsBC,gBAAAA,QAAlDvD,cAAAoC,EAA4BpC,aAAAsD,EAAsBtD,UAAAuD,GAI1E,SAASC,EAASC,EAA2B/F,EAAe0E,EAAqBkB,GAK7E,IAJA,IAEII,EAAcC,EAFZC,EAAOH,EAAS/F,GAIbmG,EAAKD,EAAMC,EAAIA,EAAKA,EAAGN,KAEtBnB,GAAYA,IAAayB,EAAGzB,UAAYA,IAAayB,EAAGzB,SAAS0B,WACjER,GAAWA,IAAYO,EAAGP,SAE5BK,EAAOE,EACPH,IAAkBA,EAAeG,IAI7BF,IAAOA,EAAKJ,KAAOM,EAAGN,MAI9BK,IAASF,IAAeD,EAAS/F,GAASgG,GASlD,SAASK,EAAWH,EAAqBvD,EAAGC,EAAG0C,GAC3C,IAAK,IAAIa,EAAKD,EAAMC,EAAIA,EAAKA,EAAGN,KAAOM,EAAGzB,SAAS4B,KAAMH,EAAGP,QAASjD,EAAGC,EAAG0C,YAwB/DN,EAAIjF,EAAsBC,EAAe0E,EAAqBkB,GAC1E,GAAIlB,EAAU,CACV,IAAMqB,EAAUhG,EAAOgG,UAAahG,EAAOgG,QAAUtF,OAAO0C,OAAQ,OACpE4C,EAAS/F,GAAS,IAAIuG,EAAc7B,EAAUkB,EAASG,EAAS/F,cAKxDiC,EAAMlC,EAAsBC,EAAe0E,EAAqBkB,GAC5E,GAAIlB,EAAU,CACV,IAAM8B,EAAkBC,EAAO,WAC3BvB,EAAKnF,EAAQC,EAAMwG,GACnB9B,EAASrC,MAAMC,KAAMpC,aAGzBsG,EAAKJ,UAAY1B,EACjBM,EAAIjF,EAAQC,EAAMwG,EAAMZ,aAKhBV,EAAKnF,EAAsBC,EAAgB0E,EAAsBkB,GACrE,IAAAG,YACR,GAAIA,EACA,GAAIrB,GAAYkB,EACZ,GAAI5F,EACA8F,EAASC,EAAS/F,EAAM0E,EAAUkB,QAGlC,IAAK,IAAIc,KAAQX,EACbD,EAASC,EAASW,EAAMhC,EAAUkB,QAIrC5F,EACL+F,EAAS/F,QAAS,EAGlBD,EAAOgG,aAAU,EAW7B,IAAMvB,EAAgB,eAGNmC,EAASC,EAAgB7G,EAAsB8G,EAAiBnC,EAAqBkB,GACjG,GAAIpB,EAAcsC,KAAMD,GAEpB,IADA,QACiBpD,EADHoD,EAAOtC,MAAOC,GACXjB,WAAAA,KAAQqD,EAAK7G,OAAc2E,EAAUkB,QAErDgB,EAAK7G,EAAQ8G,EAAQnC,EAAUkB,YAWxBD,EAAUoB,EAAoB/G,EAAe2C,EAAGC,GACpD,IAAAmD,YACR,GAAIA,EAAS,CACH,IAAAiB,EAAQjB,EAAS/F,GACjBiH,SAtGd,SAAoBf,EAAqBvD,EAAGC,GACxC,IAAK,IAAIuD,EAAKD,EAAMC,EAAIA,EAAKA,EAAGN,KAAOM,EAAGzB,SAAS4B,KAAMH,EAAGP,QAASjD,EAAGC,GAuGpEsE,CAAWF,EAAOrE,EAAGC,GACrByD,EAAWY,EAAKjH,EAAM2C,EAAGC,aAKjB8C,EAAUqB,EAAoB/G,EAAe2C,EAAGC,EAAG0C,GACvD,IAAAS,YACR,GAAIA,EAAS,CACH,IAAAiB,EAAQjB,EAAS/F,GACjBiH,QAENZ,EAAWW,EAAOrE,EAAGC,EAAG0C,GA1GhC,SAAoBY,EAAqBvD,EAAGC,EAAG0C,EAAGC,GAC9C,IAAK,IAAIY,EAAKD,EAAMC,EAAIA,EAAKA,EAAGN,KAAOM,EAAGzB,SAAS4B,KAAMH,EAAGP,QAASjD,EAAGC,EAAG0C,EAAGC,GA0G1E4B,CAAWF,EAAKjH,EAAM2C,EAAGC,EAAG0C,aAKpBG,EAAUsB,EAAoB/G,EAAe2C,EAAGC,EAAG0C,EAAGC,EAAGC,GAC7D,IAAAO,YACR,GAAIA,EAAS,CACH,IAAAiB,EAAQjB,EAAS/F,GACjBiH,SA/Gd,SAAoBf,EAAqBvD,EAAGC,EAAG0C,EAAGC,EAAGC,GACjD,IAAK,IAAIW,EAAKD,EAAMC,EAAIA,EAAKA,EAAGN,KAAOM,EAAGzB,SAAS4B,KAAMH,EAAGP,QAASjD,EAAGC,EAAG0C,EAAGC,EAAGC,GAgH7E4B,CAAWJ,EAAOrE,EAAGC,EAAG0C,EAAGC,EAAGC,GA5GtC,SAAoBU,EAAqBvD,EAAGC,EAAG0C,EAAGC,EAAGC,EAAG6B,GACpD,IAAK,IAAIlB,EAAKD,EAAMC,EAAIA,EAAKA,EAAGN,KAAOM,EAAGzB,SAAS4B,KAAMH,EAAGP,QAASjD,EAAGC,EAAG0C,EAAGC,EAAGC,EAAG6B,GA4GhFC,CAAWL,EAAKjH,EAAM2C,EAAGC,EAAG0C,EAAGC,EAAGC,oIC9PtC+B,EAAgB,SAAShC,EAAG3C,GAI5B,OAHA2E,EAAgB9G,OAAO+G,gBAClB,CAAEC,UAAW,cAAgB7G,OAAS,SAAU2E,EAAG3C,GAAK2C,EAAEkC,UAAY7E,IACvE,SAAU2C,EAAG3C,GAAK,IAAK,IAAI8E,KAAK9E,EAAOA,EAAE3C,eAAeyH,KAAInC,EAAEmC,GAAK9E,EAAE8E,MACpDnC,EAAG3C,IAGrB,SAAS+E,EAAUpC,EAAG3C,GAEzB,SAASgF,IAAOtF,KAAKtB,YAAcuE,EADnCgC,EAAchC,EAAG3C,GAEjB2C,EAAE5E,UAAkB,OAANiC,EAAanC,OAAO0C,OAAOP,IAAMgF,EAAGjH,UAAYiC,EAAEjC,UAAW,IAAIiH,GAG5E,IAAIC,EAAW,WAQlB,OAPAA,EAAWpH,OAAOuB,QAAU,SAAkB8F,GAC1C,IAAK,IAAIC,EAAG3H,EAAI,EAAG4H,EAAI9H,UAAUC,OAAQC,EAAI4H,EAAG5H,IAE5C,IAAK,IAAIsH,KADTK,EAAI7H,UAAUE,GACOK,OAAOE,UAAUV,eAAeqG,KAAKyB,EAAGL,KAAII,EAAEJ,GAAKK,EAAEL,IAE9E,OAAOI,IAEKzF,MAAMC,KAAMpC,YAGzB,SAAS+H,EAAOF,EAAGvC,GACtB,IAAIsC,EAAI,GACR,IAAK,IAAIJ,KAAKK,EAAOtH,OAAOE,UAAUV,eAAeqG,KAAKyB,EAAGL,IAAMlC,EAAE0C,QAAQR,GAAK,IAC9EI,EAAEJ,GAAKK,EAAEL,IACb,GAAS,MAALK,GAAqD,mBAAjCtH,OAAO0H,sBACtB,CAAA,IAAI/H,EAAI,EAAb,IAAgBsH,EAAIjH,OAAO0H,sBAAsBJ,GAAI3H,EAAIsH,EAAEvH,OAAQC,IAASoF,EAAE0C,QAAQR,EAAEtH,IAAM,IAC1F0H,EAAEJ,EAAEtH,IAAM2H,EAAEL,EAAEtH,KACtB,OAAO0H,EAGJ,SAASM,EAAWC,EAAYvD,EAAQ3D,EAAK0C,GAChD,IAA2H0B,EAAvHD,EAAIpF,UAAUC,OAAQmI,EAAIhD,EAAI,EAAIR,EAAkB,OAATjB,EAAgBA,EAAOpD,OAAOqD,yBAAyBgB,EAAQ3D,GAAO0C,EACrH,GAAuB,iBAAZ0E,SAAoD,mBAArBA,QAAQC,SAAyBF,EAAIC,QAAQC,SAASH,EAAYvD,EAAQ3D,EAAK0C,QACpH,IAAK,IAAIzD,EAAIiI,EAAWlI,OAAS,EAAQ,GAALC,EAAQA,KAASmF,EAAI8C,EAAWjI,MAAIkI,GAAKhD,EAAI,EAAIC,EAAE+C,GAAS,EAAJhD,EAAQC,EAAET,EAAQ3D,EAAKmH,GAAK/C,EAAET,EAAQ3D,KAASmH,GAChJ,OAAW,EAAJhD,GAASgD,GAAK7H,OAAOgI,eAAe3D,EAAQ3D,EAAKmH,GAAIA,mBCxBhE,cAuDA,OA9CWI,SAAP,SAAeC,EAAqCC,gBAArCD,MACX,IAAME,EAAiC/H,EAAcwB,MAGrDsG,GAAe5G,EAAQM,KAAMsG,GAGrB,IAAAE,WAAQC,kBAehB,OAdAD,GAAUxG,KAAKwG,OAAOE,MAAOF,GAG7BxG,KAAKwG,OAAOG,YAAa3G,KAAK3B,UAAWoI,GAAa,GAGtDzG,KAAKwG,OAAOG,YAAa3G,KAAK3B,UAAW2B,KAAKwG,OAAOI,qBAAsBL,IAAa,GAGxFvG,KAAK6G,UAAY7G,KAAK6G,SAAU7G,KAAKwG,OAAOM,YAAaP,GAGzDvG,KAAKwG,OAAOO,sBAAuBR,GAE5BvG,MAIJoG,SAAP,SAAiCY,EAAWC,GACxC,IAAIC,EAiBJ,OAbIF,GAAQA,EAAKrJ,eAAgB,eAG7B0H,EADA6B,EAAcF,EAAKtI,YACKsB,MAIxBkH,cAAc,4DAA6B,OAANC,UAAAnH,MAGzCoH,EAAWF,GACXF,GAAQE,EAAYG,OAAQL,EAAMC,GAE3BC,iBAOCE,EAAWE,GACvB,IAAMf,EAAiC/H,EAAc8I,GAGrDA,EAAYC,UAAYhB,EAAUlI,UAGlCiJ,EAAYD,QAAUG,EAAYC,IAAKrB,GAAUsB,SAAUJ,GAG3DE,EAAYC,IAAKH,GAGjBA,EAAYK,UAAYL,EAAYK,SAAUpB,YAQlCc,EAAQO,GAEpB,GAAiC,mBAAtBA,EAMP,OAAO,SAAUC,GACbT,EAAWS,GACXA,EAAKR,OAAQO,IAPjBR,EAAWQ,GACTA,EAA0CP,kBAWpCP,EAAagB,GACzB,OAAO,SAAErJ,GACL,IAAM+H,EAASgB,EAAYC,IAAKhJ,GAChC+H,EAAOuB,gBAAkBxK,EAAUuD,IAAWgH,EAAOtB,EAAOuB,2BAcpDC,EAAqBC,EAAehK,GAChD,OAAO,SAAEC,EAAgBR,WACrB8J,EACKC,IAAKvJ,EAAMQ,aACXiI,YAAazI,UACR+J,WACIvK,GAASO,2BAoB3B,WAAoBQ,GAAAuB,WAAAvB,EAXpBuB,iBAAuB,GAYX,IAAAwG,cAERxG,KAAKkI,WAAe1B,GAAUA,EAAO0B,YAAgBpH,IACrDd,KAAK+H,gBAAoBvB,GAAUA,EAAOuB,iBAAqBjH,IAC/Dd,KAAKmI,cAAkB3B,GAAUA,EAAO2B,eAAmB,GA4FnE,OAxGWX,MAAP,SAAY/I,GACA,IAAA+H,WAER,OAAOA,GAAU/H,IAAU+H,EAAO/H,MAAQ+H,EACrC/H,EAAM+H,OAAS,IAAIgB,EAAa/I,IAWzC+I,iCAAA,SAAsBjB,GACZ,IAAAO,EAAchG,IACdrC,aAEN,OAAOgB,EAAWqH,EAAa9G,KAAK+H,gBAAiB,SAAEK,EAAM1K,GACzD,GAAI6I,EAAW7I,KAAWe,EAAOf,GAC7B,OAAOe,EAAOf,MAK1B8J,kBAAA,SAAOhB,GAQH,IAPM,IAAAtI,EAAa8B,KAAKvB,MAAMJ,UAIxB8J,mBAAgBnI,KAAKmI,cAAgBnI,KAAKmI,cAActG,aAG5CwG,IAAApH,WAAAA,IAAS,CAAtB,IAAIqH,OAEL,GAAIhK,MAAMiK,QAASD,GACftI,KAAK0G,MAAO4B,QAGX,GAAIH,EAAcvC,QAAS0C,GAAU,EAItC,GAHAH,EAAc7F,KAAMgG,GAGC,mBAAVA,EAAsB,CAE7BtI,KAAK2G,YAAa3G,KAAKvB,MAAO6J,GAG9B,IAAME,EAAiBF,EAAe9B,OAClCgC,IACAxI,KAAKkI,WAAa3K,EAAUuD,IAAWd,KAAKkI,WAAYM,EAAaN,YACrElI,KAAK+H,gBAAkBxK,EAAUuD,IAAWd,KAAK+H,gBAAiBS,EAAaT,iBAC/E/H,KAAKmI,cAAgBnI,KAAKmI,cAAcpG,OAAQyG,EAAaL,gBAIjEnI,KAAK2G,YAAazI,EAAOoK,EAAMjK,gBAI/B2B,KAAK2G,YAAazI,EAAOoK,KAMzCd,qBAAA,eAAU,aAAAvG,mBAAAA,IAAAwH,kBACN,IAAiB,QAAAC,IAAAtH,WAAAA,IAAQ,CAApB,IAAIyG,OACLL,EAAYC,IAAKI,GAAOnB,MAAM,CAAE1G,KAAKvB,UAI7C+I,wBAAA,SAAahK,EAAeC,EAAiBkL,GAA7C,YAgDJ,SAAyBC,EAAiB7J,GAGtC,IAFA,IAAM8J,EAASC,SAAgBF,OAEdxH,EAAAjD,OAAO4K,oBAAqBH,GAA5B3H,WAAAA,IAAuC,CAAnD,IAAIoB,OACLwG,EAAQxG,IAAUtD,EAAKsD,IAnDvB2G,CAAgBvL,EAAQ,SAAAC,GACpB,IACI0K,EADEa,EAAa9K,OAAOqD,yBAA0B/D,EAAQC,IAGxD0K,EAAOc,EAAKnB,gBAAiBrK,KAC7ByL,EAAgBD,EAAKpC,YAAapJ,EAAMuL,EAAYb,EAAMO,GAGzDP,GAAQA,IAASgB,EAAWC,YAC7BF,EAAgB3L,EAAME,EAAMuL,EAAYC,EAAKhB,WAAYxK,GAAQiL,MAK7EnB,kCAAA,SAAuBjB,GACb,IAAE2B,kBAAYzJ,aAEpB,GAAIyJ,EAAY,CACZ,IAAMhK,EAAQO,EAAMJ,UAChBiL,EAAY/C,EAAUlI,UAE1B,IAAK,IAAIgD,KAAQ6G,EAAa,CAC1B,IAAME,EAAOF,EAAY7G,GAErBnD,EAAMP,eAAgB0D,IAAUA,KAAQiI,IACxCpL,EAAOmD,GAASkI,EAAarL,EAAOmD,GAAQiI,EAAWjI,GAAQ+G,YAO7EU,EAAU,CACZU,SAAW1I,EAAQ,CACfjD,QAAS,EACTQ,WAAY,EACZoL,QAAS,EACT7L,WAAY,EACZF,MAAO,EACP6J,WAAY,IAGhBqB,OAAS9H,EAAQ,CACbpC,aAAc,SAiCT8H,EAAS,eAAE,aAAAvF,mBAAAA,IAAAyI,kBAAuB,gBACzCjL,GAAsB,OAAA+I,EAAYC,IAAKhJ,GAAQiI,MAAOgD,KAI/CN,WAAiBtB,GAA6B,gBACrDrJ,GACE,IAAM+H,EAASgB,EAAYC,IAAKhJ,GAChC+H,EAAO0B,WAAa3K,EAAUuK,EAAOtB,EAAO0B,cA4DpD,SAASiB,EAAgB3L,EAAeE,EAAeuL,EAAiCb,EAAuBO,GAE3G,GAAInL,EAAKG,eAAgBD,GAAQ,CAC7B,IAAMiM,EAAWxL,OAAOqD,yBAA0BhE,EAAME,GAEpDiM,EAASC,cAAgB,UAAWD,IACpCnM,EAAME,GAASiL,EACXY,EAAaN,EAAWhL,MAAO0L,EAAS1L,MAAOmK,GAC/CmB,EAAaI,EAAS1L,MAAOgL,EAAWhL,MAAOmK,SAKvDjK,OAAOgI,eAAgB3I,EAAME,EAAMuL,GAI3C,SAASM,EAAa/L,EAAMC,EAAQ2K,GAEhC,YAAa,IAAT5K,EAAyBC,EAGxB2K,QAAmB,IAAX3K,EAGN2K,EAAM5K,EAAMC,GAHqBD,EA5E5C4L,EAAWnL,MAAQ,SAAEoC,EAAGC,GAAO,OAAAD,GAE/B+I,EAAWC,WAAa,SAAEhJ,EAAGC,GAAO,OAAAD,GAGpC+I,EAAW1C,MAAQ,SAAErG,EAAGC,GAAO,OAAA/C,EAAU,GAAI8C,EAAGC,IAGhD8I,EAAWS,KAAO,SAAExJ,EAAGC,GAAO,gBAChBhB,GACN,OAAOe,EAAE2D,KAAMhE,KAAMM,EAAE0D,KAAMhE,KAAMV,MAK3C8J,EAAW7L,SAAW,SAAE8C,EAAcC,GAAkB,kBAEhD,OAAO/C,EAAU8C,EAAEN,MAAOC,KAAMpC,WAAa0C,EAAEP,MAAOC,KAAMpC,cAKpEwL,EAAWU,WAAa,SAAEzJ,EAAcC,GAAkB,kBAElDD,EAAEN,MAAOC,KAAMpC,WACf0C,EAAEP,MAAOC,KAAMpC,aAKvBwL,EAAWW,UAAY,SAAE1J,EAAcC,GAAkB,kBAEjDA,EAAEP,MAAOC,KAAMpC,WACfyC,EAAEN,MAAOC,KAAMpC,aAKvBwL,EAAW7K,MAAQ,SAAE8B,EAAcC,GAAiB,kBAE5C,OAAOD,EAAEN,MAAOC,KAAMpC,YAAe0C,EAAEP,MAAOC,KAAMpC,aAI5DwL,EAAWtK,KAAO,SAAEuB,EAAcC,GAAiB,kBAE3C,OAAOD,EAAEN,MAAOC,KAAMpC,YAAe0C,EAAEP,MAAOC,KAAMpC,aC/WpD,IAAAyG,IAAS3B,IAAIE,IAAKjD,IAAMwD,KAAUE,KAAUD,KAGhD4G,GAAW,EAGf,SAASC,KACL,MAAO,IAAMD,uBAyEb,aAZAhK,kBAA4B,EAG5BA,uBAAiC,EAU7BA,KAAKkK,IAAMD,KACXjK,KAAKmK,WAAWpK,MAAOC,KAAMpC,WAgGrC,OAhIWwM,WAAP,SAAgBhJ,EAAiEmF,OAA/D8D,gBAAaC,iBAAcC,eAEzC,GAAIF,GAAeC,EAAc,CAC7B,IAAME,EAAY,IAAI7I,EAAU3B,KAAK3B,UAAUiM,cAE/CD,GAAeG,EAAU1I,aAAcuI,GACvCC,GAAgBE,EAAU9D,MAAO4D,GAEjCtK,KAAK3B,UAAUiM,aAAeE,EAI9BD,GACApM,OAAOsM,iBAAkBzK,KAAK3B,UAAWoB,EAAW,GAAiB8K,EAAYG,MAyBzFN,uBAAA,aAEAA,eAAA,SAAI7F,EAAqCnC,EAAUkB,GAC/C,GAAsB,iBAAXiB,EAAsBF,EAAS3B,EAAI1C,KAAMuE,EAAQnC,EAAUkB,QACjE,IAAK,IAAIjC,KAAQkD,EAASF,EAAS3B,EAAI1C,KAAMqB,EAAMkD,EAAQlD,GAAQiC,GAAWlB,GAEnF,OAAOpC,MAGXoK,iBAAA,SAAM7F,EAAqCnC,EAAUkB,GACjD,GAAsB,iBAAXiB,EAAsBF,EAAS1E,EAAMK,KAAMuE,EAAQnC,EAAUkB,QACnE,IAAK,IAAIjB,KAAQkC,EAASF,EAAS1E,EAAMK,KAAMqC,EAAMkC,EAAQlC,GAAQiB,GAAWlB,GAErF,OAAOpC,MAGXoK,gBAAA,SAAK7F,EAAsCnC,EAAWkB,GAClD,GAAKiB,EACA,GAAsB,iBAAXA,EAAsBF,EAASzB,EAAK5C,KAAMuE,EAAQnC,EAAUkB,QACvE,IAAK,IAAIc,KAAQG,EAASF,EAASzB,EAAK5C,KAAMoE,EAAMG,EAAQH,GAAQd,GAAWlB,QAFtEQ,EAAK5C,UAAM,EAAQoC,EAAUkB,GAI3C,OAAOtD,MAOXoK,oBAAA,SAAQ1M,EAAe2C,EAAIC,EAAI0C,EAAIC,EAAIC,GAInC,YAHU,IAAND,QAAsB,IAANC,EAAeC,GAAUnD,KAAMtC,EAAM2C,EAAGC,EAAG0C,EAAGC,EAAGC,QACtD,IAANF,EAAeI,GAAUpD,KAAMtC,EAAM2C,EAAGC,EAAG0C,GAC/CK,GAAUrD,KAAMtC,EAAM2C,EAAGC,GACvBN,MAGXoK,qBAAA,SAAU3M,EAAoB4C,EAAgCC,GAM1D,OALI7C,IACAkN,GAAc3K,KAAMvC,GACpBA,EAAOiF,GAAIrC,EAAIC,GAAkB,iBAAND,EAAwBC,EAAPN,KAAUA,OAGnDA,MAGXoK,yBAAA,SAAc3M,EAAoB4C,EAAgCC,GAM9D,OALI7C,IACAkN,GAAc3K,KAAMvC,GACpBA,EAAOkC,KAAMU,EAAIC,GAAkB,iBAAND,EAAwBC,EAAPN,KAAUA,OAGrDA,MAGXoK,0BAAA,SAAeQ,EAAuBvK,EAAiCC,GAC3D,IAAAuK,oBACR,GAAIA,EAAc,CACd,IAAMC,IAAezK,GAAKC,GACpByK,EAAUzK,GAAkB,iBAAND,EAAwBC,EAAPN,KAE7C,GAAI4K,EAAU,CACV,IAAMnN,EAASoN,EAAcD,EAASV,KAClCzM,IACIqN,UAAmBD,EAAcD,EAASV,KAC9CzM,EAAOmF,IAAKvC,EAAG0K,EAAQ/K,YAG1B,GAAgB,MAAZ4K,EAAkB,CACvB,IAAK,IAAIV,KAAOW,EAAeA,EAAcX,GAAMtH,IAAKvC,EAAG0K,EAAQ/K,MAE/D8K,IAAc9K,KAAK6K,kBAAe,IAI9C,OAAO7K,MASXoK,oBAAA,WACQpK,KAAKgL,YAEThL,KAAKiL,gBACLjL,KAAK4C,MAEL5C,KAAKgL,WAAY,IArIZZ,KALZ/C,EACAP,EAAY,CACTyD,WAAanB,EAAW1C,MACxB2D,YAAcjB,EAAW1C,SAEhB0D,MA4IAc,GAAiC3L,EAAM6K,GAAU/L,UAAW,cAAe,cAMxF,SAASqM,GAAsBpL,GAC3B,GAAIA,EACA,MAAoB,mBAANA,EAAmB,CAAEmI,IAAmBnI,EAAGsK,cAAe,GAA8BtK,EAK9G,SAASqL,GAAcQ,EAAsB1N,IACnB0N,EAASN,eAAiBM,EAASN,aAAe1M,OAAO0C,OAAQ,QACzEpD,EAAOyM,MAASzM,EAAOyM,IAAMD,OAEpBxM,MCvMd2N,GAAkC,oBAAZC,SAA2BA,QAAQC,KAAgC,eAAzBD,QAAQC,IAAIC,SACrFC,GAA0BJ,GACtB,CAAE,QAAS,QACX,CAAE,QAAS,OAAQ,QAAS,OAAQ,sBAE5C,aAAA,qDAEIlC,UAAgD,KA8CpD,OA/C4B/B,OAIxBsE,yBAAA,SAAcC,EAAkBC,GAC5B,OAAO3L,KAAK0C,GAAIgJ,EAAO,SAAEE,EAAOC,EAAKC,GACjC,IAAKH,GAAUA,EAAOnH,KAAMoH,GAAS,CACjC,IAAMG,EAAO,CAAE,IAAIH,OAAUC,GAE7B,IAAK,IAAIxK,KAAQyK,EACbC,EAAKzJ,KAAM,OAAOjB,MAAS2K,GAAUF,EAAOzK,KAGhD4K,QAASP,GAAQ3L,MAAOkM,QAASF,OAM7CN,oBAAA,SAASC,EAAkBC,GACvB,OAAO3L,KAAK0C,GAAIgJ,EAAO,SAAEE,EAAOC,EAAKC,GACjC,IAAKH,GAAUA,EAAOnH,KAAMoH,GACxB,MAAM,IAAIM,MAAO,IAAIN,OAAUC,MAM3CJ,kBAAA,SAAOC,EAAkBC,GAAzB,WACI,OAAO3L,KAAK0C,GAAIgJ,EAAO,SAAEE,EAAOC,EAAKC,GAC5BH,IAAUA,EAAOnH,KAAMoH,KACxB1C,EAAKiD,QAAST,IAAYxC,EAAKiD,QAAST,IAAW,GAAM,MAarED,eAAA,SAAIpL,EAASC,GACT,OAAO8L,YAAM1J,aAAIrC,EAAGC,IA7CfmL,KADZpE,GACYoE,IAAerB,IAqDxB4B,GAA6B,oBAAXK,OAClB,SAAAC,GACI,GAAIA,GAAkC,iBAAdA,EAAwB,CACpC,IACJrO,qBAA2BqO,EAGzBC,EAFQjO,MAAMiK,QAAStK,GAEN,cAAeA,EAAMJ,YAAc,KAAMM,OAAOuC,KAAMzC,GAAQuO,KAAM,WAE3F,OAAOF,EAAU5N,YAAYhB,KAAO,IAAM6O,EAG9C,OAAOE,KAAKC,UAAWJ,IAEzB,SAAAhN,GAAK,OAAAA,GAEEqN,GAAS,IAAIlB,GAE1B,GAAuB,oBAAZQ,QACP,IAAkB,SAAAW,MAAA3L,aAAAA,KAAW,CAAxB,IAAIwB,UACLkK,GAAOE,aAAcpK,QAIhBqK,GAAiB,IAAIrB,GAClCqB,GAAeC,QAAS,SAAUA,QAAS,YAE9BC,GAA8BL,GAAOM,QAAQC,KAAMP,aCpBhDQ,GAAS1I,EAAe2I,EAA0BC,EAAqBC,GA4BnF,OA1BAC,GAAS9I,GAGT4I,EAAQG,UAAW,EAEnB/I,EAAKgJ,WAAaL,EACbM,KAAM,SAAAC,GACHlJ,EAAKgJ,WAAa,KAElB,IAAMvO,EAASoO,EAASA,EAAQK,GAASA,EAIzC,OAFAC,GAAkBnJ,EAAM,OAAQA,EAAMkJ,EAAMN,GAErCnO,IAEV2O,MAAO,SAAAC,GAMJ,MALArJ,EAAKgJ,WAAa,KAGlBG,GAAkBnJ,EAAM,QAASA,EAAMqJ,EAAKT,GAEtCS,IAGdrJ,EAAKgJ,WAAWM,MAAQX,EAAQW,MAEzBtJ,EAAKgJ,oBAGAF,GAAS9I,GACjBA,EAAKgJ,YAAchJ,EAAKgJ,WAAWM,QACnCtJ,EAAKgJ,WAAWM,QAChBtJ,EAAKgJ,WAAa,eAIVG,GAAkBI,OAAa,aAAA/M,mBAAAA,IAAA8K,oBAC3CiC,EAAYf,QAAQlN,MAAOiO,EAAajC,GAChC,IAAAkC,eACRA,GAAcA,EAAWhB,QAAQlN,MAAOkO,EAAYlC,GCxGxD,IAAMmC,GAAiB,gCAUnB,SAAaC,EAAoBC,gBAAAA,MAC7B,IAAMC,EAAOF,EACIG,MAAOJ,IACPxM,IAAK,SAAA7C,GACF,MAAY,MAARA,GAAuB,UAARA,EAAyB,aAE3B,MAAbA,EAAK,GAAqB,mBAAoBA,EAAI0P,OAAQ,QAE9B,IAA5B1P,EAAI+G,QAAS,UAA0B,mBAAoB/G,EAAI0P,OAAQ,QAEpE1P,IAG3BmB,KAAKwO,KAAOJ,GAAaC,EAAKI,MAC9BzO,KAAK0O,OAASL,EAAKxQ,OAEnBmC,KAAK2O,QAAgB,IAAIC,SAAU,OAAQ,8BACvBP,EAAKQ,uDAElBR,EAAK3M,IAAK,SAAApC,GAAK,MAAA,gCACAA,sBACfkN,KAAK,qDAOJsC,GAAkBC,EAAoBZ,EAAoBa,GAMtE,IALA,IAAMX,EAAOF,EAAUG,MAAOJ,IACxBe,EAAOZ,EAAKxQ,OAAS,EAEvB4G,EAAOsK,EAEFjR,EAAI,EAAGA,EAAImR,EAAMnR,IAAK,CAC3B,IAAMe,EAAMwP,EAAMvQ,GAClB,OAAQe,GACJ,IAAK,IAAM4F,EAAOA,EAAKyK,WAAY,MACnC,IAAK,IAAMzK,EAAOA,EAAK0K,WAAY,MACnC,QAAW1K,EAAOA,EAAKgD,IAAK5I,GAIhC,IAAK4F,EAAO,OAGhB,OAAOuK,EAAQvK,EAAM4J,EAAMY,ICtD/B,ICMYG,iBDER,WAAaxQ,GACToB,KAAKnC,OAASe,EAAIyQ,gBAAiBrP,KAAKsP,OAAS,KAE7CtP,KAAKuP,MAAQ3Q,EAAI4Q,SAAU5Q,KAC3BoB,KAAKnC,SAwBjB,OApBI4R,iBAAA,SAAMC,GACI,IAAEH,aAAOD,cAIf,IAAK,IAAMzQ,KAFP0Q,GAAQG,EAAUH,EAAO,MAEXD,EACdI,EAAUJ,EAAQzQ,GAAOA,IAIjC4Q,sBAAA,SAAWC,EAAwE9G,GAC/E5I,KAAK2P,KAAM,SAAE1R,EAAaY,GAClBZ,aAAiBwR,EACCxR,EAAO2R,UAAWF,EAAU9G,EAAOnB,IAAK5I,IAG1D6Q,EAAUzR,EAAOY,EAAK+J,WCtC9BxF,KAAUV,KAAIE,MAYVwM,GAAAA,kBAAAA,yCAERA,yBACAA,mDA6HA,WAAalF,GAzDblK,kBAAsC,EAatCA,kBAAoB,GAIpBA,mBAAyB,EAIzBA,cAAiC,KAIjCA,iBAAiB,EAKjBA,oBAAqB,EA6IrBA,2BAAqC,EAjHjCA,KAAKkK,IAAMlK,KAAK6P,UAAY3F,QAiKpC,SAtRsB4F,YASlB,SAAiBhJ,EAAuCP,GAChDO,EAAYiJ,WAAW/P,KAAK3B,UAAU2R,UAAYlJ,EAAYiJ,UAClE3F,GAAUvD,SAAS7C,KAAMhE,KAAM8G,EAAaP,IAGzCuJ,WAAP,SAAiBvJ,GAETA,EAAU1F,SAAWb,KAAKa,SAC1Bb,KAAKa,OAASoP,EAAcpP,SAK7BiP,SAAP,SAAezP,EAASC,GACpB,OAAO,IAAKN,KAAcK,EAAGC,IAqBjCwP,oBAAA,WACQ9P,KAAKgL,YAETuC,GAASvN,MACTA,KAAKkQ,YAAS,EACdlQ,KAAKmQ,eAAY,EACjBnQ,KAAK4C,MACL5C,KAAKiL,gBACLjL,KAAKgL,WAAY,IAIrB8E,uBAAA,aA0CAA,sBAAA,SAAWjN,EAAoBL,GAC3BE,GAAI1C,KAAMA,KAAKoQ,iBAAkBvN,EAASL,IAM9CsN,uBAAA,SAAYjN,EAAqBL,GAC7BI,GAAK5C,KAAMA,KAAKoQ,iBAAkBvN,EAASL,IAM/CsN,4BAAA,SAAiBtN,EAAwBK,GACrC7C,KAAKqQ,SAAU7N,EAAQA,EAAO4N,iBAAkBvN,IAWpDiN,wBAAA,SAAa/Q,EAA+BsO,gBAAAA,MACxC,IAAMiD,EAASC,GAAeC,MAAOxQ,MAC/ByQ,EAAS1R,EAAIiF,KAAMhE,KAAMA,MAC/ByQ,GAAUzQ,KAAK0Q,IAAKD,GACpBH,GAAUC,GAAeI,OAAQ3Q,OAIrC8P,uBAAA,SAAYrS,GAAZ,WAaI,OAXAuC,KAAK4Q,YAAa,WACd1H,EAAKwH,IAAYjT,EAASoT,iBAAmBpT,EAAQ,CAAEiJ,OAAQ,IAGvD,IAAAoK,iBAEJA,IACA5H,EAAK4H,aAAeA,KAIrB9Q,MAIJ8P,OAAP,SAAmEiB,EAAY3P,gBAAAA,MAAE,IAAA4P,WAAQ3D,kBAC/EzO,EAAwBoB,KAAca,OAAQkQ,OAAW1D,GAASV,OAASqE,EAASlE,QAAiB,KAQ3G,OANIkE,GAAUpS,EAAIqS,iBACdrS,EAAIsS,oBAAqB,SAAE3B,EAAO1Q,EAAKD,GACnC,MAAM,IAAIsN,MAAWtN,EAAIuS,mBAAoBtS,OAAU0Q,KAIxD3Q,GAcXkR,kBAAA,SAAOsB,EAAY/D,GAAwC,OAAO+D,GAalEtB,oBAAA,SAAS3B,GACL,OAAOW,GAAkB9O,KAAMmO,EAAW,SAAEvF,EAAQ/J,GAAS,OAAA+J,EAAOnB,IAAMmB,EAAOnB,IAAK5I,GAAQ+J,EAAQ/J,MAM1GiR,qBAAA,WACI,OAAO9P,KAAKkQ,QAQhBJ,qBAAA,WACY,IAAAI,cACR,OAAOA,EAAyBA,EAAOhB,WAAalP,KAAKqR,eAa7DvB,yBAAA,WAAmC,OAAO9P,KAAKyN,YAE/CqC,kBAAA,SAAOzC,GAAwC,MAAM,IAAInB,MAAO,oBAEhE4D,wBAAA,WACI,OA6MR,SAASwB,EAAkB7M,GAEf,IAAAwJ,eACR,GAAIA,EACA,OAAOqD,EAAkBrD,GAI7B,GAAIxJ,EAAKyL,OAAQ,CACL,IAAAqB,sBACR,OAAOA,GAAcA,EAAY9M,EAAK0L,YAvN/BmB,CAAkBtR,OAAUA,KAAKgQ,WAY5C7R,sBAAI2R,mCAAJ,WACI,IAAMP,EAAQvP,KAAKwR,mBAAsBxR,KAAKwR,iBAAmB,IAAI/B,GAAiBzP,OACtF,OAAOuP,EAAM1R,OAAS0R,EAAQ,sCAQlCO,qBAAA,SAAUlR,KAGVkR,+BAAA,SAAoBjR,GAChB,IAAI0Q,EAAQvP,KAAKiR,gBACjB,OAASpS,EAAM0Q,GAASA,EAAMD,OAAQzQ,GAAQ0Q,IAAW,MAI7DO,gCAAA,SAAqB3B,GACjB,OAAOW,GAAkB9O,KAAMmO,EAAW,SAAEvF,EAAQ/J,GAAS,OAAA+J,EAAO6I,mBAAoB5S,MAI5FiR,gCAAA,SAAqBJ,GACT,IAAAuB,uBACRA,GAAmBA,EAAgBrB,UAAWF,EAAU1P,OAI5D8P,oBAAA,SAASjR,GACL,OAAQmB,KAAKyR,mBAAoB5S,IAGrCiR,oBAAA,WAAqB,OAAO9P,KAAKkK,KACjC4F,qBAAA,WAAY,OAAO9P,KAAKkK,KAGxB4F,yBAAA,WACY,IAAApS,wBACR,GAAa,aAATA,EAAsB,OAAOA,GAjRnBoS,OALrBzI,EACAP,EAAY,CACTiJ,SAAW3G,EAAWnL,QAEzBuI,EAAQ4D,KACa0F,MA6VTS,GAAiB,CAG1BC,MAAA,SAAO5H,GACH,OAAOA,EAAO8I,eAAyB9I,EAAO8I,cAAe,IAMjEC,YAAA,SAAa/I,EAAwByE,GAEjC,IAAMuE,GAASvE,EAAQwE,OASvB,OARID,IAAQhJ,EAAOkJ,SAAWzE,GAG9BzE,EAAOkI,aAAe,GAGtBlI,EAAO4I,sBAAmB,EAEnBI,GAMXjB,gBAAQ/H,EAAwBmJ,GAC5B,IAAIC,EAAkBpJ,EAAOkJ,SAE7B,GAAIE,EAAiB,CAEjB,KAAOpJ,EAAOkJ,UAAU,CACpB,IAAMzE,EAAUzE,EAAOkJ,SACvBlJ,EAAOkJ,SAAW,KAClB1O,GAAUwF,EAAQA,EAAOwH,iBAAkBxH,EAAQyE,EAAS0E,GAIhEnJ,EAAO8I,cAAe,EAGd,IAAAxB,WACJA,GAAUA,IAAiB6B,GAC3B7B,EAAO+B,kBAAmBrJ,EAAQoJ,QAKtCpJ,EAAOkJ,SAAW,KAClBlJ,EAAO8I,cAAe,GAU9BQ,OAAA,SAAQC,EAAeC,EAAuBvT,GAC1C,GAAIuT,EAAMlC,OAAS,MAAM,IAAImC,eAAgB,oEAE7CD,EAAMlC,OAASiC,EACfC,EAAMjC,UAAYtR,GAKtByT,KAAA,SAAMH,EAAeC,GACbD,IAAUC,EAAMlC,SAChBkC,EAAMlC,YAAS,EACfkC,EAAMjC,eAAY,KChctB,IAAAoC,YAAgBC,kBAA4B7B,aAE5CvN,cA0CQqP,GAAcC,EAA8BhV,EAAeO,GAEvE,IAAMqS,EAAUE,GAAOkC,GACjBrF,EAAU,GAGZqF,EAAOC,YAAajV,GAAOkV,SAAU3U,EAAOyU,EAAQrF,KAEpDsE,GAAae,EAAQrF,GACrBjK,GAAUsP,EAAQ,UAAYhV,EAAMgV,EAAQA,EAAOG,WAAYnV,GAAQ2P,IAI3EiD,GAAUK,GAAQ+B,GAGtB,SAASlC,GAAOkC,GACZ,QAAIH,GAAQG,KACRA,EAAOI,oBAAsB,IAAIJ,EAAOK,eAAgBL,EAAOG,cAC/DH,EAAOM,mBAAqB,OAOpC,SAASrB,GAAae,EAA8BrF,GAMhD,OAJIqF,EAAOM,qBACPN,EAAOM,mBAAqB,MAGzBR,GAAcE,EAAQrF,GAe1B,IAAM4F,GAAoB,CAE7BrC,YAAA,SAAyC7R,EAA8CsO,gBAAAA,MACnF,IAAMiD,EAASE,GAAOxQ,MACtBjB,EAAIiF,KAAMhE,KAAMA,MAChBsQ,GAAUK,GAAQ3Q,OAItBiS,kBAAA,SAAmBG,EAAuB/E,GAC9B,IAAA8C,cACF+C,EAAYlT,KAAK2S,YAAaxC,GAE/B+C,IAA6DA,EAAUC,kBAAmBnT,KAAKoT,qBAAsBjD,EAAW9C,IAIzI+F,8BAAsBvU,EAAcwO,gBAAAA,MAEhC,IAAMiD,EAASE,GAAOxQ,MAElB2R,GAAa3R,KAAMqN,IACnBjK,GAAUpD,KAAM,UAAYnB,EAAKmB,KAAMA,KAAK6S,WAAYhU,GAAOwO,GAGnEiD,GAAUK,GAAQ3Q,OAGtBqT,mBAAA,SAAgDC,EAAejG,gBAAAA,MAC3D,IAMIkG,EANEjD,EAASE,GAAOxQ,MACdwT,EAAqB,GACrBlE,EAA8B,GAC5BqD,mBACFc,EAASpG,EAAQqG,MAAQ1T,KAAK0T,MAAOJ,EAAUjG,GAAYiG,EAInE,GAAIK,GAAkB3T,KAAMyT,EAAQpG,GAAW,CAC3C,IAAK,IAAIhM,KAAQoS,EAAQ,CACrB,IAAMzM,EAAO2L,EAAatR,GAEtB2F,EACIA,EAAK4L,SAAUa,EAAQpS,GAAQrB,KAAMqN,EAASiC,IAC9CkE,EAAQlR,KAAMjB,IAIlBkS,IAAaA,EAAU,IACvBA,EAAQjR,KAAM,IAAKjB,QAIvBkS,GACAK,GAAqB5T,KAAMuT,EAAS,CAAEE,UAAUpG,GAIxD,GAAImG,EAAQ3V,QAAU8T,GAAa3R,KAAMqN,GACrC,OAAO,IAAIwG,GAAmB7T,KAAMsQ,EAAQhB,EAAQkE,GAIxD,IAA+B,QAAAM,IAAA7S,WAAAA,IAAQ,MAChB0P,OAAQ3Q,MAG/BsQ,GAAUK,GAAQ3Q,iBAIV4T,GAAqBlB,EAA8Ba,EAAoBzH,EAAOuB,GAC1FqF,EAAOqB,KAAM,OAAQ,sBAAuB,wBAAyBR,EAAQ/G,KAAK,sBAAsBV,EAAOuB,EAAQV,iBA+B3GgH,GAAkBjB,EAA8Be,EAAiBpG,GAC7E,SAAIoG,GAAUA,EAAO/U,cAAgBP,UAErCuU,EAAOqB,KAAM,QAAS,uBAAwB,qCAAsC,CAAEN,UAAUpG,EAAQV,SACjG,GAKX,kBAEI,WAAoB/D,EACA0H,EACAhB,EACAkE,GAHAxT,YAAA4I,EACA5I,YAAAsQ,EACAtQ,YAAAsP,EACAtP,aAAAwT,EAoBxB,OAjBIK,mBAAA,SAAQ9B,GAIJ,IAHM,IAAEzC,cAAQ1G,cAAQ4K,mBAGAQ,IAAA/S,WAAAA,IAAQ,MAChB0P,OAAQ/H,GAMxB,IADQ,IAAAiK,eAAYf,iBACJmC,IAAAC,WAAAA,IAAS,CAApB,IAAIrV,OACLuE,GAAUwF,EAAQ,UAAY/J,EAAK+J,EAAQiK,EAAYhU,GAAOiT,GAGlE9R,KAAKsQ,QAAUK,GAAQ/H,EAAQmJ,SC9N/B3R,KAAUV,KAkCZyU,GAAoC,iBAsItC,WAAoBzW,EAAe0W,GAAfpU,UAAAtC,EAgFpBsC,aAA2C,KA9EvCA,KAAKqN,QAAU+G,EAGf,IAAM/G,EAA6B3N,GAAQ,CAAE2U,SAAW,GAAIC,WAAa,GAAIC,eAAiB,IAAMH,GACpG/G,EAAQgH,SAAWhH,EAAQgH,SAASxS,QACpCwL,EAAQiH,WAAajH,EAAQiH,WAAWzS,QACxCwL,EAAQkH,eAAiBlH,EAAQkH,eAAe1S,QAGtC,IA6FO2N,EA7FPvR,UAAOuW,SAAMd,UAAOe,WAAQC,iBAC5BlF,aAAU6E,aAAUC,eAAYC,mBA4C1C,GAxCAvU,KAAK/B,MAAQA,EACb+B,KAAKwU,KAAQA,GAGRnH,EAAQsH,kBAAoBH,EAC7BxU,KAAK4U,aAAe5U,KAAKa,OAEpBgU,EAAmB5W,GAExB+B,KAAK4U,aAAe,IAAIhG,SAAU,UAAWnC,KAAKC,UAAWzO,QAG7D+B,KAAK4U,aAAe5U,KAAK4U,aAI7B5U,KAAKmT,kBAAoC,IAAjBuB,EAExB1U,KAAKyU,YAAoB,IAAXA,EAAoBzU,KAAKyU,OAASA,EAEhDzU,KAAKwP,SAAWA,GAAYxP,KAAKwP,SAE7BnC,EAAQyH,aACR9U,KAAKwP,UAiEQA,EAjEmBxP,KAAKwP,SAkEtC,SAAUkD,EAA8BzU,EAAaY,GACxD,OAAOZ,EAAQuR,EAASxL,KAAMhE,KAAM0S,EAAQzU,EAAOY,GAAQ,cA3D3DyV,EAAW3L,QAAS3I,KAAK+U,SAGrB/U,KAAKyH,KAAM4M,EAAS1L,QAAS3I,KAAKyH,KAGtCzH,KAAKmK,WAAWnG,KAAMhE,KAAMqN,GAGxBgH,EAASxW,OAAQ,CACjB,IAAMmX,EAAUhV,KAAKiV,QAAUZ,EAASa,OAAQC,IAExCC,gBACRpV,KAAKwP,SAAW,SAAUkD,EAA8BzU,EAAaY,GACjE,OAAOuW,EAASpR,KAAMhE,KAAM0S,EAAQsC,EAAQhR,KAAM0O,EAAQzU,EAAOY,GAAOA,IAIhFmB,KAAKP,UAAY6U,EAAWzW,OAASyW,EAAWY,OAAQG,IAAoBrV,KAAKP,UAEjFO,KAAKsV,aAAef,EAAe1W,OAAS0W,EAAeW,OAAQK,IAAwBvV,KAAKsV,aAG1F,IAAEE,cAAQ5C,gBAChB5S,KAAKwV,OAAS9B,EAAQ,SAAUzV,EAAOyU,EAA8BrF,GACjE,OAAOmI,EAAOxR,KAAMhE,KAAMqN,EAAQqG,YAAmB,IAAVzV,EAAmByV,EAAM1P,KAAM0O,EAAQzU,EAAO+B,KAAKtC,MAASO,EAAOyU,EAAQrF,IACtHmI,EAEJxV,KAAK4S,SAAWc,EAAQ,SAAUzV,EAAOyU,EAA8BrF,EAA8BiC,GACjG,OAAOsD,EAAS5O,KAAMhE,KAAMqN,EAAQqG,YAAmB,IAAVzV,EAAmByV,EAAM1P,KAAM0O,EAAQzU,EAAO+B,KAAKtC,MAASO,EAAOyU,EAAQrF,EAASiC,IACjIsD,EAKZ,OAxMI6C,yBAAA,SAAc9R,EAAMJ,EAAM8J,KAK1BoI,sBAAA,SAAWlS,EAAYI,EAAY+R,EAA6BrI,GAAuC,OAAO9J,GAG9GkS,oBAAA,SAASlS,EAAYI,EAAY+R,EAA6BrI,GAAuC,OAAO9J,GAK5GkS,sBAAA,SAAWpV,EAASC,GAChB,OAAOF,GAAUC,EAAGC,IAMxBmV,yBAAA,SAAclS,EAAYI,EAAY+R,EAA6BrI,KAOnEoI,mBAAA,aAIAA,kBAAA,SAAOxX,EAAayU,GAChB,OAAOzU,GAGXwX,oBAAA,SAAS/C,EAA8BzU,GACnC+B,KAAKsV,kBAAc,EAAQrX,EAAOyU,EAAQyB,KAG9CsB,qBAAA,SAAU/C,EAA8BzU,EAAaY,KAErD4W,mBAAA,SAAQxX,EAAOY,EAAKwO,GAChB,OAAOpP,GAASA,EAAMwW,OAASxW,EAAMwW,OAAQpH,GAAYpP,GAG7DwX,qCAAA,WACU,IAAE/X,YAAMuX,eAEd,GAAa,OAATvX,EACA,MAAO,CAEHgT,aAAKzS,GACDwU,GAAczS,KAAMtC,EAAMO,IAI9BwJ,IACIwN,EACI,WACI,OAAOA,EAAQjR,KAAMhE,KAAMA,KAAK6S,WAAYnV,GAAQA,IAExD,WAAa,OAAOsC,KAAK6S,WAAYnV,IAG7CkM,cAAe,IAY3B6L,uBAAA,SAAY/X,EAAe2P,KAI3BoI,mBAAA,SAAQxX,EAAOyU,EAA8BrF,GACzC,IAAMsI,OAAc,IAAV1X,EAAmB+B,KAAK4U,eAAiB3W,EAC/CqB,EAAIU,KAAKP,UAAWkW,OAAG,EAAQjD,EAAQrF,GAG3C,OADArN,KAAKsV,aAAchW,OAAG,EAAQoT,EAAQrF,GAC/B/N,GAGXmW,qBAAA,SAAUxX,EAAOyU,EAA8BrF,EAA8BiC,GACjE,IAAA5R,YACFmV,eACAlP,EAAOkP,EAAYnV,GAEnB6F,EAAOvD,KAAKP,UAAWxB,EAAO0F,EAAM+O,EAAQrF,GAGlD,OAFAwF,EAAYnV,GAAS6F,IAEjBvD,KAAK4V,UAAWrS,EAAMI,KAEtB3D,KAAKsV,aAAc/R,EAAMI,EAAM+O,EAAQrF,IAChC,IAQLoI,iBAAV,SAAgB/J,EAAkBmK,EAAeC,EAAe7X,EAAOyU,EAA8B/F,GACjG+F,EAAOqB,KAAMrI,EAAOmK,EAASnD,EAAOvB,mBAAmBnR,KAAKtC,SAAUoY,EAAS,CAC3EC,YAAc9X,EACd+X,cAAgBtD,EAAOG,WAAY7S,KAAKtC,OACzCiP,IAGP8I,yBAAA,WACI,OAAOzV,KAAK/B,YAwFpB,SAASkX,GAAec,EAAoBC,GACxC,OAAO,SAAUjY,EAAOP,GACpB,OAAOwY,EAASlS,KAAMhE,KAAMiW,EAASjS,KAAMhE,KAAM/B,EAAOP,GAAQA,IAIxE,SAAS2X,GAAiBc,EAA2BC,GACjD,OAAO,SAAU7S,EAAMI,EAAM+O,EAAQrF,GACjC,OAAO+I,EAAcpS,KAAMhE,KAAMmW,EAAcnS,KAAMhE,KAAMuD,EAAMI,EAAM+O,EAAQrF,GAAW1J,EAAM+O,EAAQrF,IAIhH,SAASkI,GAAqBc,EAA6BC,GACvD,OAAO,SAAU/S,EAAMI,EAAM+O,EAAQrF,GACjCgJ,EAAYrS,KAAMhE,KAAMuD,EAAMI,EAAM+O,EAAQrF,GAC5CiJ,EAAYtS,KAAMhE,KAAMuD,EAAMI,EAAM+O,EAAQrF,uBCnQpD,4DAsBA,OAtBwClG,OAGpCoP,mBAAA,WACI,OAAO,IAAIvW,KAAKwU,MAGpB+B,oBAAA,SAAShT,GACL,OAAe,MAARA,GAAgBA,aAAgBvD,KAAKwU,KAAOjR,EAAO,IAAIvD,KAAKwU,KAAMjR,IAG7EgT,mBAAA,SAAQtY,EAAOY,EAAewO,GAC1B,OAAOpP,GAASA,EAAMwW,OAASxW,EAAMwW,OAAQpH,GAAYpP,GAG7DsY,kBAAA,SAAOtY,GACH,OAAO,IAAI+B,KAAKwU,KAAMxU,KAAKyU,OAAQxW,KAGvCsY,sBAAA,SAAWlW,EAAGC,GACV,OAAOD,IAAMC,MApBmBmV,mBA6BxC,4DA+BA,OA/BmCtO,OAG/BqP,oBAAA,aACAA,mBAAA,WAAW,OAAOxW,KAAKwU,QAEvBgC,mBAAA,SAAQvY,GAAU,OAAOA,GAEzBuY,oBAAA,SAASjT,GAAS,OAAe,MAARA,EAAeA,EAAOvD,KAAKwU,KAAMjR,IAE1DiT,sBAAA,SAAWnW,EAAGC,GAAM,OAAOD,IAAMC,GAEjCkW,kBAAA,SAAOvY,GAAU,OAAOA,GAExBuY,mBAAA,SAAQvY,EAAOyU,EAA8BrF,GACzC,OAAOrN,KAAKP,eAAqB,IAAVxB,EAAmB+B,KAAK/B,MAAQA,OAAO,EAAQyU,EAAQrF,IAGlFmJ,qBAAA,SAAUvY,EAAOyU,EAAQrF,EAASiC,GACpB,IAAA5R,YACAmV,eACFlP,EAAOkP,EAAYnV,GAE3B,OAAOiG,KAAWkP,EAAYnV,GAASsC,KAAKP,UAAWxB,EAAO0F,EAAM+O,EAAQrF,KAGhFmJ,uBAAA,WACSxW,KAAKqN,QAAQsH,mBACd3U,KAAK/B,MAAQ+B,KAAKwU,YA5BKiB,mBAmCnC,4DAuBA,OAvBiCtO,OAG7BsP,mBAAA,WACI,OAAO,GAGXA,oBAAA,SAASlT,EAAMI,EAAO+O,EAASrF,GAC3B,IAAMqJ,EAAc,MAARnT,EAAeA,EAAOvD,KAAKwU,KAAMjR,GAM7C,OAJImT,GAAQA,GACR1W,KAAK+T,KAAM,QAAS,uBAAwB,sDAAuDxQ,EAAMmP,EAAQrF,EAAQV,QAGtH+J,GAGXD,qBAAA,SAAUf,EAAOzX,EAAOP,GAEpB,GAAa,MAATO,IAAkB0Y,SAAU1Y,GAC5B,OAAOP,EAAO,2BApBO8Y,mBA6BjC,4DAiBA,OAjB+BrP,OAC3ByP,mBAAA,SAAQ3Y,GAAU,OAAOA,GACzB2Y,oBAAA,aACAA,mBAAA,WAAU,MAAO,IAEjBA,oBAAA,SAASrT,EAAMI,EAAM+O,EAAQrF,GAEzB,OAAY,MAAR9J,GAAgBjF,MAAMiK,QAAShF,GAAgBA,GAEnDvD,KAAK+T,KAAM,QAAS,sBAAuB,gDAAiDxQ,EAAMmP,EAAQrF,EAAQV,QAE3G,KAGXiK,kBAAA,SAAO3Y,GACH,OAAOA,GAASA,EAAM4D,YAfC4T,mBAmB/B,4DASA,OATgCtO,OAC5B0P,mBAAA,WAAU,MAAO,IAEjBA,oBAAA,SAAStT,EAAMI,EAAM+O,EAAQrF,GACzB,OAAY,MAAR9J,GAAgC,iBAATA,EAA2BA,GAEtDvD,KAAK+T,KAAM,QAAS,uBAAwB,qDAAsDxQ,EAAMmP,EAAQrF,EAAQV,QACjH,QAPiB8I,aAWhBqB,yBAEhB,4DAiBA,OAjBkC3P,OAE9B4P,mBAAA,SAAQ9Y,KACR8Y,mBAAA,WAAU,OAAOD,IACjBC,oBAAA,aAEAA,oBAAA,SAASxT,EAAMI,EAAM+O,EAAQrF,GAEzB,OAAY,MAAR9J,GAAgC,mBAATA,EAA6BA,GAExDvD,KAAK+T,KAAM,QAAS,yBAA0B,sDAAuDxQ,EAAMmP,EAAQrF,EAAQV,QAEpHmK,KAIXC,kBAAA,SAAO9Y,GAAS,OAAOA,MAhBOwX,mBC/HlC,4DA6CA,OA7C8BtO,OAC1B6P,mBAAA,WACI,OAAO,IAAI9W,MAGf8W,oBAAA,SAASzT,EAAYlD,EAAGqS,EAAQrF,GAC5B,GAAY,MAAR9J,GAAgBA,aAAgBrD,KAAO,OAAOqD,EAElD,IAAM0T,EAAO,IAAI/W,KAAMqD,GACjB2T,EAAYD,EAAKE,UAMvB,OAJID,GAAcA,GACdlX,KAAK+T,KAAM,QAAS,qBAAsB,4CAA6CxQ,EAAMmP,EAAQrF,EAAQV,QAG1GsK,GAGXD,qBAAA,SAAUtB,EAAOzX,EAAOP,GACpB,GAAa,MAATO,EAAe,CACf,IAAMiZ,EAAYjZ,EAAMkZ,UACxB,GAAID,GAAcA,EAAY,OAAOxZ,EAAO,qBAIpDsZ,mBAAA,SAAQ/Y,GAAU,OAAOA,GAASA,EAAMmZ,eAExCJ,sBAAA,SAAW3W,EAAGC,GAAM,OAASD,GAAKA,EAAE8W,cAAkB7W,GAAKA,EAAE6W,YAE7DH,mBAAA,SAAQ/Y,EAAOyU,EAA8BrF,GAEzC,OAAOrN,KAAKP,eAAqB,IAAVxB,EAAmB+B,KAAK4U,eAAiB3W,OAAO,EAAQyU,EAAQrF,IAG3F2J,qBAAA,SAAU/Y,EAAOyU,EAAQrF,EAASiC,GACpB,IAAA5R,YACAmV,eACFlP,EAAOkP,EAAYnV,GAG3B,OAAOsC,KAAK4V,UAAWjS,EAAOkP,EAAYnV,GAASsC,KAAKP,UAAWxB,EAAO0F,EAAM+O,EAAQrF,KAG5F2J,kBAAA,SAAO/Y,GAAU,OAAOA,GAAS,IAAIiC,KAAMjC,EAAMkZ,YACjDH,oBAAA,gBA5C0BvB,IAgD9B,SAAS4B,GAAcJ,GACnB,OAAQK,MAAO,IAAMpX,KAAM+W,GAASE,WAGnCE,GAAa,0BACbA,GAAa,2BACbA,GAAa,4BACbA,GAAa,6BACbA,GAAa,mCAEdL,GAAS3Y,UAAU0W,QAAU,SAAU9W,GACnC,OAAgB,MAATA,GAAiBA,aAAiBiC,KAAOjC,EAAQ,IAAIiC,KAOpE,SAAwB+W,GACpB,IAAIC,EAAWK,EAAgBC,EAAgB,EAE/C,GAAMD,EAASE,GAAeC,KAAMT,GAAU,CAE1C,IAAK,IAAWU,EAAP7Z,EAAI,EAAQ6Z,EAAIC,GAAa9Z,KAASA,EAC3CyZ,EAAQI,IAAOJ,EAAQI,IAAO,EAIlCJ,EAAQ,KAAQA,EAAQ,IAAO,GAAK,EACpCA,EAAQ,IAAOA,EAAQ,IAAO,EAEV,MAAhBA,EAAQ,SAA+BM,IAAhBN,EAAQ,KAC/BC,EAA+B,GAAfD,EAAQ,IAAYA,EAAQ,IAExB,MAAhBA,EAAQ,KACRC,EAAgB,EAAIA,IAI5BN,EACIhX,KAAK4X,IAAKP,EAAQ,GAAKA,EAAQ,GAAKA,EAAQ,GAAKA,EAAQ,GAAKA,EAAQ,GAAMC,EAAeD,EAAQ,GAC3FA,EAAQ,SAGpBL,EAAYhX,KAAKwT,MAAOuD,GAG5B,OAAOC,EApC+Da,CAAe9Z,MAIzF,IAAM2Z,GAAiB,CAAE,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,IACtCH,GAAiB,qICvEf,IAAAnF,WAAMJ,4BAEd,4DAsHA,OAtHoC/K,OAGhC6Q,kBAAA,SAAO/Z,GACH,OAAOA,EAAQA,EAAMga,QAAUha,GAGnC+Z,mBAAA,SAAQ1Y,EAAGT,EAAcwO,GAAoB,OAAO/N,GAAKA,EAAEmV,OAAQpH,IAEnE2K,mBAAA,SAAQ/Z,EAAOyU,EAA8BrF,GACzC,IAAMsI,EAAItI,EAAQ4K,MAAQjY,KAAKiY,MAAOha,QACxB,IAAVA,EAAmB+B,KAAK4U,eAAiB3W,EAGvCqB,EAAIU,KAAKP,UAAWkW,OAAG,EAAQjD,EAAQrF,GAE7C,OADArN,KAAKsV,aAAchW,OAAG,EAAQoT,EAAQrF,GAC/B/N,GAGX0Y,qBAAA,SAAU/Z,EAAOyU,EAAQrF,EAASiC,GACxB,IAEFmB,EAFE5R,EAAMmB,KAAKtC,KAAQmV,eACnBlP,EAAOkP,EAAYhU,GAIzB,GAAI4R,EAASzQ,KAAKkY,aAAcvU,EAAM1F,EAAOoP,GAAY,CACrD,IAAM8K,EAAoBxU,EAAK0P,mBAAoB5C,EAAQpD,GAC3D,SAAI8K,IACI7I,EACAA,EAAOhN,KAAM6V,GAGbA,EAAkBxH,OAAQ+B,IAG1B1S,KAAKmT,mBAMjB,IAAM5P,EAAOvD,KAAKP,UAAWxB,EAAO0F,EAAM+O,EAAQrF,GAGlD,OAFAwF,EAAYhU,GAAQ0E,IAEhBvD,KAAK4V,UAAWrS,EAAMI,KAEtB3D,KAAKsV,aAAc/R,EAAMI,EAAM+O,EAAQrF,IAEhC,IAMf2K,yBAAA,SAAcrU,EAAsBJ,EAAY8J,GAE5C,GAAI1J,GAAgB,MAARJ,EAAc,CACtB,KAAIA,aAAgBvD,KAAKwU,MAKrB,OAAOjR,EAHP,GAAI8J,EAAQ3G,MAAQ,OAAOnD,EAAKsN,kBAQ5CmH,oBAAA,SAASzU,EAAYI,EAAY+O,EAA8BrF,GAE3D,OAAY,MAAR9J,EAAsBA,EAEtBA,aAAgBvD,KAAKwU,OACjBjR,EAAK6U,SAAc7U,EAAK6U,QAAUhJ,gBAAciJ,YAChDrY,KAAK+T,KAAM,QAAS,2BAA4B,0EAA2ExQ,EAAMmP,EAAQrF,EAAQV,QAKjJU,EAAQ3G,MAAenD,EAAK0U,QAE5B1U,EAAK2M,QACLlQ,KAAK+T,KAAM,OAAQ,sBAAuB,kGAAmGxQ,EAAMmP,EAAQrF,EAAQV,QAC5JpJ,EAAK0U,SAGT1U,GAGFvD,KAAKwU,KAAa3T,OAAQ0C,EAAM8J,IAG7C2K,oBAAA,SAAUtF,EAA8BzU,GAChCA,GACA+B,KAAKsV,kBAAc,EAAQrX,EAAOyU,EAAQ,KAIlDsF,qBAAA,SAAUtF,EAA8BzU,GACpC,IAAIsR,EAAQtR,GAASA,EAAMgT,gBAC3B,GAAI1B,EAAQ,OAAOA,GAGvByI,mBAAA,WACI,OAAahY,KAAKwU,KAAM3T,UAG5BmX,uBAAA,SAAY3K,GACRA,EAAQkH,eAAe5L,QAAS3I,KAAKsY,gBAGzCN,0BAAA,SAAezU,EAAsBI,EAAsB+O,EAA8BrF,GACjF1J,IACA2O,GAAMI,EAAQ/O,GACd0J,EAAQkL,OAAS5U,EAAK6U,WAGtBjV,GAAO2O,GAAQQ,EAAQnP,EAAMvD,KAAKtC,UApHV+X,ICD5B/S,KAAIE,KACN0P,WAAMJ,aAUNuG,GAAiBrJ,gBAAcsJ,OAAStJ,gBAAcuJ,qBAG5D,4DA8HA,OA9HgCxR,OAG3ByR,mBAAA,SAAQ3a,EAAOyU,EAA8BrF,GAC1C,IAAMsI,EAAItI,EAAQ4K,MAAQjY,KAAKiY,MAAOha,EAAOyU,QAC/B,IAAVzU,EAAmB+B,KAAK4U,eAAiB3W,EAGvCqB,EAAIU,KAAKP,UAAWkW,OAAG,EAAQjD,EAAQrF,GAE7C,OADArN,KAAKsV,aAAchW,OAAG,EAAQoT,EAAQrF,GAC/B/N,GAGXsZ,qBAAA,SAAU3a,EAAOyU,EAAQrF,EAASiC,GACxB,IAEFmB,EAFE5R,EAAMmB,KAAKtC,KAAQmV,eACnBlP,EAAOkP,EAAYhU,GAIzB,GAAI4R,EAASzQ,KAAKkY,aAAcvU,EAAM1F,EAAOoP,GAAY,CACrD,IAAM8K,EAAoBxU,EAAK0P,mBAAoB5C,EAAQpD,GAC3D,SAAI8K,IACI7I,EACAA,EAAOhN,KAAM6V,GAGbA,EAAkBxH,OAAQ+B,IAG1B1S,KAAKmT,mBAMjB,IAAM5P,EAAOvD,KAAKP,UAAWxB,EAAO0F,EAAM+O,EAAQrF,GAGlD,OAFAwF,EAAYhU,GAAQ0E,IAEhBvD,KAAK4V,UAAWrS,EAAMI,KAEtB3D,KAAKsV,aAAc/R,EAAMI,EAAM+O,EAAQrF,IAEhC,IAMfuL,kBAAA,SAAO3a,EAAuByU,GAE1B,IAAKzU,GAASA,EAAMiS,SAAWwC,EAAS,OAAOzU,EAG/C,IAAMga,EAAQha,EAAMga,QAEpB,OADA/F,GAAQQ,EAAQuF,EAAOjY,KAAKtC,MACrBua,GAIXW,mBAAA,aAEAA,yBAAA,SAAcjV,EAAsBJ,EAAY8J,GAE5C,GAAI1J,GAAgB,MAARJ,KAAmBA,aAAgBvD,KAAKwU,MAChD,OAAOjR,GAIfqV,oBAAA,SAASrV,EAAYI,EAAY+O,EAA8BrF,GAC3D,GAAY,MAAR9J,GAAgBA,aAAgBvD,KAAKwU,KAAO,OAAOjR,EAGvD,IAAMsV,EAAiB,IAAM7Y,KAAKwU,KAAejR,EAAM8J,EAASoL,IAKhE,OAFAvG,GAAQQ,EAAQmG,EAAgB7Y,KAAKtC,MAE9Bmb,GAIXD,qBAAA,SAAUlD,EAAOzX,EAAOP,KAGxBkb,mBAAA,WACI,OAAO,MAIXA,0BAAA,SAAerV,EAAsBI,EAAsB+O,EAA8BrF,GACjF1J,IAEIA,EAAKuM,SAAWwC,GAChBJ,GAAMI,EAAQ/O,GACd0J,EAAQkL,OAAS5U,EAAK6U,WAGtB5V,GAAKe,EAAMA,EAAKyM,iBAAkBpQ,KAAK8Y,UAAWpG,IAItDnP,GAEIA,EAAK2M,SAAWwC,GAChBhQ,GAAIa,EAAMA,EAAK6M,iBAAkBpQ,KAAK8Y,UAAWpG,IAK7DkG,oBAAA,SAASlG,EAA8BzU,GAC/BA,GACA+B,KAAKsV,kBAAc,EAAQrX,EAAOyU,EAAQ,KAMlDkG,uBAAA,SAAYvL,GAER,IAAM6F,EAAYlT,KAClBA,KAAK8Y,UAAY9Y,KAAKmT,iBAAmB,SAAUf,EAAO/E,EAAS0E,GAC/D/R,OAAS+R,GAAa/R,KAAKoT,qBAAsBF,EAAUxV,KAAM2P,IACjExE,GAEJwE,EAAQkH,eAAe5L,QAAS3I,KAAKsY,mBA5Hb7C,IAgIhC,SAAS5M,MCpIT,IAAMkQ,GAAwB,CAAEC,OAAQC,OAAQC,QAAShZ,KAAM/B,OAAQG,MAAOsQ,UACxEuK,GAAY,CAAE3C,GAAeC,GAAaD,GAAeQ,GAAUH,GAAYD,GAAWG,aAEhFqC,GAAavR,GACzB,OAASA,EAAcwR,YAUDxR,EAV+BA,GAW/CyR,EAAMP,GAASnT,QAASiC,IACjB,EAAI0O,GAAqB4C,GAAWG,IAFrD,IAA0BzR,EAChByR,EARV7D,GAAQ5U,OAAS,SAAEwM,EAA4B3P,GAC3C,IAAM8W,EAAOnH,EAAQmH,KAGrB,OAAO,IAFenH,EAAQgM,YAAe7E,EAAO4E,GAAa5E,GAAQiB,KAE/C/X,EAAM2P,ICjB5B,IAAA3N,mBAuBJ,WAAa2N,GAETrN,KAAKqN,QAAU,CAAEgH,SAAW,GAAIC,WAAa,GAAIC,eAAiB,IAC9DlH,GAAU3N,GAAQM,KAAKqN,QAASA,GAsH5C,OAnHIkM,kBAAA,SAAOC,EAAwBjK,GAC3B,SAASC,EAAUkG,EAAOzX,EAAOP,GAC7B,IAAK8b,EAAMxV,KAAM0R,EAAOzX,EAAOP,GAAQ,CACnC,IAAMmO,EAAM0D,GAASiK,EAAMjK,OAAS7R,EAAO,gBAC3C,MAAsB,mBAARmO,EAAqBA,EAAI7H,KAAM0R,EAAOhY,GAASmO,GAIrE,IAAMlI,EAAO3D,KAAKqN,QAAQmC,SAE1B,OAAOxP,KAAKyZ,SAAS,CACjBjK,SAAW7L,WACe+R,EAAOzX,EAAOP,GACpB,OAAOiG,EAAM+R,EAAOzX,EAAOP,IAAU8R,EAAUkG,EAAOzX,EAAOP,IAElE8R,KAIvBrR,sBAAIob,sBAAJ,WACI,OAAOvR,EAAqB,aAAchI,uCAG9C7B,sBAAIob,8BAAJ,WACI,OAAOvZ,KAAK0Z,0CAGhBvb,sBAAIob,4BAAJ,WACI,OAAOvZ,KAAKyZ,SAAS,CAAE3E,YAAa,qCAGxCyE,qBAAA,SAAUxJ,GACN,OAAO/P,KAAKyZ,SAAS,CAAE1J,cAG3BwJ,oBAAA,SAASI,GACL,OAAO3Z,KAAKyZ,SAAS,CAAEX,UAAYa,KAIvCJ,kBAAA,SAAOxa,GACH,OAAOiB,KAAKyZ,SAAS,CAAE/F,MAAQ3U,KAGnCwa,mBAAA,SAAQxa,GACJ,OAAOiB,KAAKyZ,SAAS,CACjBhF,OAAwB,mBAAR1V,EAAqBA,EAAQA,EAAM,SAAEO,EAAGqY,EAAGlW,GAAO,OAAAnC,GAAKA,EAAEmV,OAAQhT,IAAMmY,MAK/FL,gBAAA,SAAKxa,GACD,OAAOiB,KAAKyZ,SAAS,CACjBpF,SAAWrU,KAAKqN,QAAQgH,SAAStS,OAAQhD,MAKjDwa,gBAAA,SAAKxa,GAUD,OAAOiB,KAAKyZ,SAAS,CACjBnF,WAAatU,KAAKqN,QAAQiH,WAAWvS,OAVzC,SAAwBwB,EAAMI,EAAM+O,EAA8BrF,GAC9D,GAAIrN,KAAK4V,UAAWrS,EAAMI,GAAS,CAC/B,IAAMkW,EAAU9a,EAAIiF,KAAM0O,EAAQnP,EAAMvD,KAAKtC,MAC7C,YAAmB,IAAZmc,EAAqBlW,EAAO3D,KAAK+U,QAAS8E,EAASlW,EAAM+O,EAAQrF,GAG5E,OAAO1J,OAQf4V,yBAAA,SAAchV,GACV,OAAOvE,KAAKyZ,SAAS,CAAE/E,aAAenQ,KAI1CgV,mBAAA,SAAQ7X,GACJ,IAAMoY,EAAW,IAAInY,EAAUD,GAQ/B,OAAO1B,KAAKyZ,SAAS,CACjBlF,eAAiBvU,KAAKqN,QAAQkH,eAAexS,OAPjD,SAAmCwB,EAAMI,EAAM+O,GAC3C/O,GAAQA,EAAKsJ,SAAW6M,EAASC,YAAarH,EAAQ/O,GAEtDJ,GAAQA,EAAK0J,SAAW6M,EAASE,UAAWtH,EAAQnP,QAS5DpF,sBAAIob,uBAAJ,WACI,OAAOvZ,sCAGXuZ,qBAAA,SAAUlM,GACN,IAAM4M,EAAS,IAAIV,EAAwBvZ,KAAKqN,SAEhD,OADA3N,GAAQua,EAAO5M,QAASA,GACjB4M,GAGXV,kBAAA,SAAOja,GACH,OAAOU,KAAKyZ,SAAS,CAAExb,MAAQqB,EAAGqV,kBAAmB,KAGlD4E,OAAP,SAAavS,GAET,OAAIA,GAAQA,aAAgBuS,EACjBvS,EAGY,mBAATA,EAAsBwN,GAAMxN,GAAS/I,GAAO+I,SAIlE,SAAS4S,eAEOpF,GAAuC0F,EAAsCjc,GACzF,GAAIic,aAAgBX,GAAyB,OAAOW,EAEpD,IAAMC,EAAU,IAAIZ,GAA0B,CAAE/E,KAAO0F,IACjDtF,EAAesF,QAAkB,IAAVjc,EAAmBmb,GAAac,GAAOtF,aAAe3W,EAEnF,YAAwB,IAAjB2W,EAA0BuF,EAAUA,EAAQlc,MAAO2W,YAG9CwF,GAAyC9S,GACrD,OAAO,IAAIiS,GAA0B,CACjCtb,MAAQ,KACRuW,KAAOlN,EACP+R,UAAYT,cAKJ3a,GAAoBqB,GAChC,IAAM4a,EAQV,SAAoBjc,GAChB,cAAeA,GACX,IAAK,SACD,OAAOgb,OACX,IAAK,SACD,OAAOD,OACX,IAAK,UACD,OAAOE,QACX,IAAK,WACD,OAAOtK,SACX,IAAK,YACD,OACJ,IAAK,SACD,OAAO3Q,EAAcA,EAAMS,iBAAc,GArBpC2b,CAAW/a,GAKxB,OAHc4a,GAAQA,EAAK7b,qBAAqByR,GAAgBsK,GAAQF,GAC1D1F,GAAM0F,IAELjc,MAAOqB,YC5JVgb,GAAiBtT,EAAYtJ,GACzC,OAAO+X,GAAQ5U,OAAQ0Y,GAAuBgB,KAAMvT,GAAOqG,QAAS3P,YAIxD8c,GAAuBC,EAA+BC,GAClE,IAAMC,EAAeC,EAAa,GAA4BH,EAAsBH,IAC9EO,EAAgBC,EAAY,GAA4BH,EAAcD,GAEtEK,WRwIyBC,GAC/B,IAAMC,EAAQ9c,OAAOuC,KAAMsa,GAErBjI,EAA6C,IAAInE,SAAU,SAAU,aACpEqM,EAAMvZ,IAAK,SAAAwZ,GAAO,MAAA,sBACTA,eAAmBA,kBAC5B1O,KAAM,cAGbuG,EAAe1U,UAAYF,OAAOE,UAElC,IAAM8c,EAAqC,IAAIvM,SAAU,SAAU,SAAU,UAAW,yDAGjFqM,EAAMvZ,IAAK,SAAAwZ,GAAO,MAAA,sBACTA,eAAmBA,qBAAyBA,qCACrD1O,KAAM,cAKb,OAFA2O,EAAW9c,UAAYF,OAAOE,UAEvB,CAAE8c,aAAYpI,kBQ7JKqI,CAAmBP,GAE7C,YACOE,GACHpI,YAAc,IAAIoI,EAAkBhI,eAAgB8H,GACpDQ,iBAAmBld,OAAOuC,KAAMma,GAAgBnZ,IAAK,SAAA7C,GAAO,OAAAgc,EAAehc,KAC3E0L,WAAaqQ,EAAoC,GAAID,EAAc,SAAArb,GAAK,OAAAA,EAAEgc,8BAUlF,SAA2BC,GACvB,IAAIjR,EAEJ,IAAK,IAAIzL,KAAO0c,EAAW,CACjB,IAAArI,EAAYqI,EAAW1c,GACvBia,sBAEFA,IACAxO,IAAkBA,EAAe,IAAIkR,GAErClR,EAAatI,SAAU,UAAYnD,EACV,iBAAdia,EACH2C,GAAsB3C,EAAWja,GACjC6c,GAAa5C,EAAWja,KAIxC,OAAOyL,EAAe,CAAEA,gBAAiB,GA1BlCqR,CAAkBhB,IACrBpJ,WAAaqJ,EAAa,GAAIC,EAAe,SAAAV,GAAW,OAAAA,EAAQ9M,QAAQ0C,aA4BhF,SAAS2L,GAAaE,EAAS/c,GAC3B,OAAO,SAAU6T,EAAQzU,GACrB2d,EAAQ5X,KAAM0O,EAAQzU,EAAOY,IAIrC,SAAS4c,GAAsB9B,EAAc9a,GACnC,IAAAuC,eAAEsN,UAAOC,YAASH,SACxB,OAAOE,EACH,SAAUgE,EAAQzU,GACdyU,EAAQlE,GAAQvQ,EAAOY,IAE3B,SAAU6T,EAAQzU,GACd0Q,EAAS+D,GAAUlE,GAAQvQ,EAAOY,ICvEvC,IAAMgd,GAAgB,CACzBC,cAAuBzO,GAAvB,wBAAuBA,MACnB,IAAM0C,EAAW/P,KAAK+b,cAChBhL,EAAO/Q,KAAKyU,OAAQpH,GAE1B,OAAOF,GACHnN,KACAA,KAAKgc,QACDjM,EAASlP,OAAQkQ,EAAM1D,EAASrN,MAChC+P,EAASU,OAAQzQ,KAAKic,GAAIlL,EAAM1D,EAASrN,MAC7CqN,EAEA,SAAAoD,GACIvH,EAAKwH,IAAKD,KAAUiD,OAAQ,GAASrG,OAKjD6O,eAAO7O,GAAP,WACI,oBADGA,MACIF,GACHnN,KACAA,KAAK+b,cAAcI,KAAMnc,KAAKic,GAAI5O,EAASrN,MAC3CqN,EAEA,SAAA0D,GAAQ,OAAA7H,EAAKwH,IAAKK,KAAQ2C,OAAQ,GAASrG,OAInD+O,iBAAS/O,GAAT,WACI,oBADKA,MACEF,GACHnN,KACAA,KAAK+b,cAAcK,QAASpc,KAAKic,GAAI5O,EAASrN,MAC9CqN,EAEA,WACY,IAAAY,eAQR,OAPIA,EACAA,EAAWoO,OAAQnT,EAAMmE,GAGzBnE,EAAKsP,UAGFtP,MCxCfxJ,KAAQf,KAWZ2d,GAAuB,iBA2NvB,WAAahJ,EAAiBc,GAA9B,MACIhI,YAAOkQ,YACPpT,EAAK2J,WAAa,GAElB,IAAMxF,EAAU+G,GAAa,GACvBX,GAAWpG,EAAQqG,MAAQxK,EAAKwK,MAAOJ,EAAUjG,GAAaiG,IAAc,UAElFlI,IAiPR,SAAoBsH,EAAiBe,EAAiBpG,GAClD,GAAIsG,GAAkBjB,EAAQe,EAAQpG,GAAW,CACrC,IAAAsF,gBACJY,SAEJ,IAAK,IAAInP,KAAQqP,EACRd,EAAavO,KACdmP,IAAaA,EAAU,IACvBA,EAAQjR,KAAM,IAAK8B,QAIvBmP,GACAK,GAAqBlB,EAAQa,EAAS,CAAEE,UAAUpG,IA9PtCkP,CAAWrT,EAAMuK,EAAQpG,GAEzCnE,EAAK4J,oBAAsB5J,EAAK2J,WAAa,IAAI3J,EAAKiS,WAAYjS,EAAMuK,EAAQpG,GAEhFnE,EAAKiB,WAAYmJ,EAAUc,GAEvBlL,EAAKoB,cAAepB,EAAKoB,aAAa0P,UAAW9Q,EAAMA,KA2MnE,OAtZ4B/B,OAAfqV,WAIT,SAAiBxb,EAAYuF,KAS7BpI,sBAAWqe,aAAX,WAAA,WACI,OAAOhI,GAAMxU,MACRyU,OAAQ,SAAAnV,GAAK,OAAAA,EAAIA,EAAE2c,GAAK,OACxBvI,MAAO,SAAApU,SACJ,aAAW4J,EAAK7K,UAAUoe,aAAgBnd,uCAI/Ckd,WAAP,SAAiBvB,GACb,OAAYjb,KAAK0c,OAAO,CAAE7J,WAAaoI,KAW1CuB,iBAAA,SAAMnP,GAAwC,MAAM,IAAInB,MAAO,yBAG/DsQ,oBAAA,SAASnP,GAAwC,MAAM,IAAInB,MAAO,yBAQnEsQ,+BAAA,WAAsB,OAAO,IAAIxc,KAAK+S,eAAgB/S,KAAK8S,sBAM3D3U,sBAAIqe,mCAAJ,WAAuB,OAAOxc,KAAK6S,4CAKnC1U,sBAAIqe,2BAAJ,WACI,IAAI3C,EAAU7Z,KAAKgT,mBAEnB,IAAK6G,EAAS,CACV,IAAMlW,EAAO3D,KAAK8S,oBAClB+G,EAAU,GAIV,IAFQ,IAAAhH,sBAESzR,EAAApB,KAAKqb,iBAALpa,WAAAA,IAAuB,CAAnC,IAAIia,OACCrc,EAAMqc,EAAKxd,KACbO,EAAQ4U,EAAYhU,GAEpBqc,EAAKtF,UAAW3X,EAAO0F,EAAM9E,MAC7Bgb,EAAShb,GAAQZ,GAIzB+B,KAAKgT,mBAAqB6G,EAG9B,OAAOA,mCAGX2C,8BAAA,SAAmBG,GACf,IAAKA,EAAO,QAAO3c,KAAK4c,cAAeld,GAAQ,GAAIM,KAAK6Z,SAExD,IAAIgD,EAAKhD,GAAyB,EAC9BiD,EAAe9c,KAAK0R,aAAe1R,KAAK8S,oBAAsB9S,KAAK6S,WACnE0I,EAAevb,KAAK2S,YAExB,IAAK,IAAIuI,KAAQyB,EACRpB,EAAWL,GAAOtF,UAAWkH,EAAK5B,GAAU2B,EAAMF,EAAMzB,OAC5DrB,IAAYA,EAAU,KAAMqB,GAAS2B,GAG1C,OAAOhD,GAGX2C,uBAAA,SAAY3d,GACA,IAAAiU,2BACR,QAAKA,IAEEjU,EACCmB,KAAK2S,YAAa9T,GAAM+W,UAAW5V,KAAK6S,WAAYhU,GAAOiU,EAAqBjU,KAC/EF,GAASqB,KAAK6Z,WAG3B2C,qBAAA,SAAU3d,GACN,GAAIA,EAAK,CACG,IAAAiU,2BACR,GAAIA,EAAsB,OAAOA,EAAqBjU,GAG1D,OAAO,MAGX2d,kBAAA,WACI,OAAkB,MAAXxc,KAAKic,IAGhBO,gBAAA,SAAK3d,GACD,OAAsB,MAAfmB,KAAMnB,IAKjB2d,kBAAA,SAAO3d,EAAcwO,SACXpP,EAAQ+B,KAAMnB,GAEpB,OADAmB,KAAK0Q,YAAQ7R,QAAQ,QAAY0Z,OAAQ,GAASlL,IAC3CpP,GAIXue,kBAAA,SAAOnP,GAAP,WACU0P,EAAU1P,GAAWA,EAAQ0P,QAMnC,OAJA/c,KAAK4Q,YAAa,WACd1H,EAAK8T,QAAS,SAAE/e,EAAOY,GAAS,OAAAqK,EAAMrK,GAAQke,EAAU,UAAO,KAChE1P,GAEIrN,MAIXwc,qBAAA,WACI,IAAMrK,EAAcnS,KAAKkQ,OAIzB,OAAOlQ,KAAKmQ,UAAYgC,EAAQA,GAASA,EAAMjC,QAWnD/R,sBAAIqe,sBAAJ,WAAoB,OAAOxc,KAAK6S,WAAY7S,KAAKyc,kBACjD,SAAQnd,GAAcmT,GAAczS,KAAMA,KAAKyc,YAAand,oCAe5Dkd,qBAAA,SAAU/I,gBAAAA,MAIN,IAHM,IAAAlW,EAAW,OAGA0f,wBAAAhc,WAAAA,IAAkB,CAA9B,IAAIia,OACCrc,EAAMqc,EAAKxd,KACjBO,EAAQwV,EAAQ5U,GAEhBtB,EAAUsB,QAAkB,IAAVZ,EAAmBid,EAAKtG,eAAiB3W,EAG/D,OAAOV,GAwBXif,uBAAA,SAAY/I,EAAyBpG,KAGrCmP,kBAAA,SAAOnP,gBAAAA,MACH,IAAM6P,EAAc,IAAUld,KAAKtB,YAAcsB,KAAK6S,WAAY,CAAEoF,OAAQ,IAI5E,OAFI5K,EAAQ8P,WAAWD,EAAK7L,cAAgBrR,KAAKkP,YAE1CgO,GAIXV,4BAAA,SAAiBY,GAKb,IAJA,IAAIvf,EAAY,EAERgV,sBAEczR,EAAApB,KAAKqb,iBAALpa,WAAAA,IAAuB,CAAxC,IAAIiS,OACG7R,SACJkO,EAAQ2D,EAAU1D,SAAUxP,KAAM6S,EAAYxR,GAAQA,GAEtDkO,IACA6N,EAAQ/b,GAASkO,EACjB1R,KAIR,OAAOA,GAIX2e,gBAAA,SAAK3d,GACD,OAAOmB,KAAMnB,IAIjB2d,gBAAA,SAAK/I,EAAcpG,GACf,GAAIoG,EAAQ,CACR,IAAM7C,EAAc5Q,KAAKqT,mBAAoBI,EAAQpG,GACrDuD,GAAeA,EAAYD,SAG/B,OAAO3Q,MAQXwc,mBAAA,SAAQnP,GAIJ,IAHM,IAAA0D,EAAO,GACP8B,sBAEgBzR,EAAApB,KAAKqb,iBAALpa,WAAAA,IAAuB,CAAxC,IAAIiS,OACG7Q,SACJpE,EAAQ4U,EAAYxQ,GAExB,QAAc,IAAVpE,EAAkB,CAElB,IAAMof,EAASnK,EAAUuB,OAAOzQ,KAAMhE,KAAM/B,EAAOoE,EAAMgL,QAG1C,IAAXgQ,IAAoBtM,EAAM1O,GAASgb,IAI/C,OAAOtM,GAIXyL,kBAAA,SAAOpL,EAAM/D,GACT,OAAO+D,GAMXoL,oBAAA,SAAS9e,EAAeO,EAAaoP,GAArC,WA8CI,OA5CArN,KAAK4Q,YAAa,WAQd,UAPMvC,EAAQ3Q,EAAKuE,MAAO,KACtBqb,EAAQjP,EAAKxQ,OAAS,EACtBqd,EAAQ7M,EAAMiP,GAEd5H,EAAQxM,EAGHpL,EAAI,EAAGA,EAAIwf,EAAGxf,IAAK,CACxB,IAAMe,EAAMwP,EAAMvQ,GAGdyF,EAAUmS,EAAMjO,IAAMiO,EAAMjO,IAAK5I,GAAQ6W,EAAO7W,GAGpD,IAAK0E,EAAM,CACP,IAAMgY,EAAY7F,EAAM/C,YACxB,IAAI4I,EAYC,OAVD,IAAIgC,EAAWhC,EAAW1c,GAAMgC,SAG5BwM,GAAWA,EAAQ0P,SAAWQ,EAAS5K,aACvC4K,EAASC,MAAOnQ,GAGpBqI,EAAO7W,GAAQ0E,EAAOga,EAM9B7H,EAAQnS,EAIRmS,EAAMhF,IACNgF,EAAMhF,YAAQwK,GAASjd,KAASoP,GAGhCqI,EAAOwF,GAASjd,IAIjB+B,MAIX7B,sBAAIqe,8BAAJ,WACI,OAAOxc,KAAKmQ,UAAY,KAAOnQ,KAAKkQ,wCAIxCsM,oBAAA,WACI,IAAIxc,KAAKgL,UAAT,CAIA,IAFQ,IAAA6H,sBAESzR,EAAApB,KAAKqb,iBAALpa,WAAAA,IAAuB,CAAnC,IAAIia,OACLA,EAAK1C,QAASxY,KAAM6S,EAAYqI,EAAKxd,OAGzC0O,YAAMoM,qBAGVgE,iBAAA,SAAM9Q,EAAkBE,EAAekK,EAAehK,EAAgB2R,IAChEA,GAAY9Q,IAASM,QAASvB,EAAOE,EAAO5L,KAAKmR,eAAiB,IAAM2E,OACnEhK,GACH0Q,OAAWxc,KACX0d,wBAA0B1d,KAAK2S,gBAIvC6J,yBAAA,WACI,OAAOpQ,YAAM+E,yBAAkB,UAInCqL,+BAAA,SAAoB/I,EAAiBpG,KAUrCmP,oBAAA,SAAS9M,EAAoDpM,GACnD,IAAAvE,OAAkB,IAAZuE,EAAqB,SAAEqS,EAAGgC,GAAO,OAAAjI,EAAS1L,KAAMV,EAASqS,EAAGgC,IAAMjI,EACxEmD,kBAEN,IAAK,IAAMhU,KAAOmB,KAAK6S,WAAY,CAC/B,IAAM5U,EAAQ4U,EAAYhU,QACZ,IAAVZ,GAAmBc,EAAKd,EAAOY,KAI3C2d,sBAAA,SAAWmB,EAA+Bra,GACtC,IAAMvE,OAAkB,IAAZuE,EAAqBqa,EAAQA,EAAMzQ,KAAM5J,GACrD,OAAOsa,EAAiB,GAAI5d,KAAK6S,WAAY9T,IAGjDyd,YAAEqB,OAAOC,UAAT,WACI,OAAO,IAAIC,GAAuB/d,OAGtCwc,oBAAA,WACI,OAAO,IAAIuB,GAAuB/d,OAItCwc,iBAAA,WACI,IAAM9b,EAAkB,GAIxB,OAFAV,KAAKgd,QAAS,SAAE/e,EAAOY,GAAS,OAAA6B,EAAK4B,KAAMzD,KAEpC6B,GAnZJ8b,YAAYxE,GASZwE,KAAKhI,GAAMwE,QAAS/a,MAAO,MAVzBue,KAjBZnV,EAAO,CAEJwI,UAAY,IAGZO,iBAAmB,SAGnBqM,YAAc,OAEjB3V,EAAY,CACTvJ,SAAW6L,EAAW1C,MACtBmM,WAAazJ,EAAW1C,MACxBuH,WAAa7E,EAAW1C,MACxBsX,WAAa5U,EAAWnL,MACxBwe,YAAcrT,EAAWC,cAEhBmT,IAAe1M,OAwZpB0M,GAAOne,UAAW4U,GAAmB4I,IAM7C,OAGI,SAAanJ,EAAiBpT,EAAsB+N,GAChDrN,KAAKic,GAAK3c,EAAE2c,IAIpBO,GAAOne,UAAU8c,WAAa8C,GAE9B,OAGI,SAAa3e,GACTU,KAAKic,GAAK3c,EAAE2c,IAIpBO,GAAOne,UAAU0U,eAAiBmL,GAElC,IAAMC,GAAc1I,GAAQ5U,OAAO,CAAE5C,WAAQ,GAAU,MACvDue,GAAOne,UAAUsU,YAAc,CAAEsJ,GAAKkC,IACtC3B,GAAOne,UAAUgd,iBAAmB,CAAE8C,IAoBtC,kBAGI,WAA8BzL,GAAA1S,YAAA0S,EAFtB1S,SAAM,EAalB,OATI+d,iBAAA,WACY,IAAArL,cACJ0L,EAAW1L,EAAO2I,iBAAkBrb,KAAKsZ,OAE7C,MAAO,CACH+E,MAAQD,EACRngB,MAAQmgB,EAAW,CAAEA,EAAS1gB,KAAMgV,EAAQ0L,EAAS1gB,YAAW,SChgBpEgC,KAAQnC,KAoBhBif,GAAO7U,SAAW,SAAgCpB,GAC9CuJ,GAAcnI,SAAS3D,KAAMhE,KAAMuG,GAGnC,IAAM9H,EAAQuB,mBAEH,4DAEX,OAF2CmH,OAChCmX,QAAQ7f,EADF6f,KAAhBlX,GAAgBkX,IAA0B/X,EAAUyX,YAIrDhe,KAAKse,kBAAoBA,EAIrB7f,EAAMuf,aAAezX,EAAUyX,aAC/Bhe,KAAKge,WAAaM,IAI1B9B,GAAO3V,SAAW,SAAU7F,EAA+BuF,GACvD,IAAM+C,EAAqB/C,EAAUlI,UAG/B+C,qBAkBV,SAAuBA,OAAE7D,aAAUsV,eAAY4J,gBACrCzb,EAAa6R,GAActV,GAAY,IAGzCkf,GAAkBA,KAAezb,IACjCA,EAAYyb,QAAgB,GAGhC,OAAOzb,qBA1BCuJ,eAAYD,iBAAciU,qCAClC7e,GAAQM,KAAK3B,UAAWkgB,GAExBvd,EAAWuJ,WAAahN,GAAUyD,EAAWuJ,YAAc,GAAIA,GAC/DvJ,EAAWsJ,aAAeA,EAE1BwF,GAAcjJ,SAAS7C,KAAMhE,KAAMgB,EAAYuF,GAG/CvG,KAAKse,kBAAkBjX,OAAQrG,EAAWiN,YAAc,IAGxDjO,KAAKge,WAAahd,EAAWgd,WAC7Bhe,KAAKge,WAAW3f,UAAUqX,MAAQ1V,KAE9BgB,EAAW+O,WAAW/P,KAAKge,WAAW3f,UAAU2R,UAAYhP,EAAW+O,WChEvE,IAAA1M,KAAUD,KAAUV,KAAIE,KACxB+N,aACF6N,GAAUjO,GAAe2B,OAAQuM,GAAQlO,GAAe+B,cAsC9CoM,GAAkBzQ,EAA6BgN,EAAqB5N,GACxE,IAEJqF,EAFIgD,UAIJzH,EAAWmK,SACX1F,EAASuI,aAAiBvF,EAAQuF,EAAgBvF,EAAM7U,OAAQoa,EAAO5N,GAEnEY,EAAWmK,QAAUhJ,gBAAcsJ,QACnChW,GAAIgQ,EAAQA,EAAOtC,iBAAkBnC,EAAWgE,kBAAmBhE,KAIvEyE,EAASuI,aAAiBvF,EAAUrI,EAAQ3G,MAAQuU,EAAMhD,QAAUgD,EAAkBvF,EAAM7U,OAAQoa,EAAO5N,IAEhG6C,OACHwC,EAAOxC,SAAWjC,IAClBuQ,GAASvQ,EAAYyE,EAAOuF,UACbhK,EAAW0Q,oBAAuB1Q,EAAW0Q,kBAAoB,KACzErc,KAAMoQ,IAIjB8L,GAASvQ,EAAYyE,GAKrB,IAAAkM,gBAGR,OAFAA,GAAeA,EAAY5E,UAAW/L,EAAYyE,GAE3CA,WAIKJ,GAAMH,EAAwBC,EAAgBmG,GACtDpG,EAAMiG,QACFjG,EAAMiG,QAAUhJ,gBAAcsJ,QAC9B9V,GAAKwP,EAAOA,EAAMhC,iBAAkB+B,EAAMF,kBAAmBE,IAIjEsM,GAAOtM,EAAOC,GACdmG,GAASnG,EAAMoG,WAGX,IAAAoG,gBACRA,GAAeA,EAAY7E,YAAa5H,EAAOC,YAgBnCyM,GAAc5Q,EAA6BZ,GACjD,IAAAyR,gBACN,SAAIA,IAAgC,IAAjBzR,EAAQ0R,QACvB9Q,EAAW+Q,OAAOD,KAAMD,IACjB,YAeCG,GAAUC,EAAiBxJ,GAEvC,IAAIuG,GADJiD,EAAOxJ,EAAMxL,KAAQwL,GACMuG,IAEvBA,GAAwB,IAAhBA,KACRiD,EAAOjD,GAAOvG,YAKNyJ,GAAaD,EAAiBxJ,UACnCwJ,EAAOxJ,EAAMxL,KACpB,IAAI+R,EAAKvG,EAAMuG,IACXA,GAAwB,IAAhBA,WACDiD,EAAOjD,YAINmD,GAAaF,EAAiBxJ,UACnCwJ,EAAOxJ,EAAM2J,SAAU3J,EAAM+G,cAE5B,IAAAR,OACF,MAANA,IAAgBiD,EAAOjD,GAAOvG,GAkBlC,kBAEI,WAAuB9M,EACA0H,EACAgP,EACAC,EACAjQ,EACAkQ,GALAxf,YAAA4I,EACA5I,YAAAsQ,EACAtQ,WAAAsf,EACAtf,aAAAuf,EACAvf,YAAAsP,EACAtP,YAAAwf,EA+C3B,OA5CIC,mBAAA,SAAQ1N,GAKJ,IAJM,IAAEzC,cAAQ1G,cACRkJ,iBAGgBgC,IAAA7S,WAAAA,IAAQ,EAAvB2P,QACOD,OAAQ/H,GAGpBA,EAAO+V,mBACPe,GAAqB9W,EAAQkJ,GAKjC,IAAwB,QAAAkC,IAAAE,WAAAA,IAAQ,CAA3B,IAAItD,OACLvN,GAAUuF,EAAQ,SAAUgI,EAAYhI,OAAQkJ,GAOpD,IAHM,IAAEwN,aAAOC,mBAGII,IAAAC,WAAAA,IAAO,CAArB,IAAIlN,OACLtP,GAAUsP,EAAQ,MAAOA,EAAQ9J,EAAQkJ,GACzC1O,GAAUwF,EAAQ,MAAO8J,EAAQ9J,EAAQkJ,GAI7C,IAAmB,QAAA+N,IAAAC,WAAAA,IAAS,CAAnBpN,OACLtP,GAAUsP,EAAQ,SAAUA,EAAQ9J,EAAQkJ,GAC5C1O,GAAUwF,EAAQ,SAAU8J,EAAQ9J,EAAQkJ,GAG5C9R,KAAKwf,QACLnc,GAAUuF,EAAQ,OAAQA,EAAQkJ,IAGlCwN,EAAMzhB,QAAU0hB,EAAQ1hB,SACxBwF,GAAUuF,EAAQ,SAAUA,EAAQkJ,GAGxC9R,KAAKsQ,QAAUK,GAAQ/H,EAAQmJ,kBAIvB2N,GAAqBzR,EAA6BZ,GAC9DY,EAAW8F,KAAM,OAAQ,sBAAuB,4GAA6G9F,EAAW0Q,kBAAmBtR,EAAQV,QACnMsB,EAAW0Q,uBAAoB,EC7N3B,IAAAnO,YAAOG,aAAQgB,2BAOPoO,GAAgB9R,EAA6B+R,EAAe3S,EAAsB3G,GAC9F,IAAM4J,EAASE,GAAOvC,GAChBqB,EAAwB,GAE1BgQ,EAoDR,SAAyBrR,EAA6BgS,EAAiB3Q,EAAwB8E,EAAwB8L,GAOnH,IANM,IAAAC,UAAOnB,WACTtY,GAAgBwZ,GAAc9L,EAAU1N,SAAYuH,EAAWmK,QAE/DqE,GADcrI,EAAUV,MACVzF,EAAWyH,MAAMrX,UAAUoe,aACzC2D,EAAapB,EAAOnhB,WAELwiB,IAAApf,WAAAA,IAAS,CAAvB,IAAMqf,OACH5K,EAAQ4K,EAAOH,EAAOG,EAAM7D,KAAmB0D,EAAOG,EAAKpW,KAAQ,KAEvE,GAAIwL,GACA,GAAIhP,GAAS4Z,IAAS5K,EAAO,CACzB,IAAIuF,EAAQqF,EAAKzN,YAAcyN,EACzB1P,EAAc8E,EAAMrC,mBAAoB4H,EAAO7G,GACrDxD,GAAetB,EAAOhN,KAAMsO,GAExB8E,EAAMkH,WAAYH,IAClB2C,GAAae,EAAOzK,SAK5BA,EAAQgJ,GAAkBzQ,EAAYqS,EAAMlM,GAC5C4K,EAAO1c,KAAMoT,GACbuJ,GAAUkB,EAAOzK,GAIzB,OAAOsJ,EAAOnd,MAAOue,GAhFTG,CAAgBtS,EAAY+R,EAAO1Q,EAAQjC,EAAS3G,GAEhE,GAAI4Y,EAAMzhB,QAAUyR,EAAOzR,OAAQ,CAC/B,IAAI2iB,EAcZ,SAA6BvS,EAA6BqR,EAAkBjS,GACxE,IAAIoT,EAAKpT,EAAQoT,GAGjB,GAAU,MAANA,EAeJ,OAAO5B,GAAc5Q,EAAYZ,GAb7B,IAAMqT,EAASzS,EAAW+Q,OAAOnhB,OAASyhB,EAAMzhB,QAGhD4iB,EAAKxH,OAAQwH,IACJ,IAAIA,GAAMC,EAAS,GACxBD,EAAK,IAAIA,EAAK,GACTC,EAALD,IAAcA,EAAKC,GAIvB,OAOR,SAAuBjjB,EAAgBgjB,EAAanB,GAChD,IAAK,IAAIqB,EAAIljB,EAAOI,OAAS,EAAGC,EAAI6iB,EAAIrB,EAAMzhB,OAAa4iB,GAAL3iB,EAASA,IAAK6iB,IAChEljB,EAAQkjB,GAAMljB,EAAQK,GAG1B,IAAKA,EAAI,EAAG6iB,EAAIF,EAAI3iB,EAAIwhB,EAAMzhB,OAAQC,IAAK6iB,IACvCljB,EAAQkjB,GAAMrB,EAAOxhB,GAdrB8iB,CAAc3S,EAAW+Q,OAAQyB,EAAInB,IAC9B,EA9BQuB,CAAoB5S,EAAYqR,EAAOjS,GACtD,GAAIsE,GAAa1D,EAAYZ,GACzB,OAAO,IAAIoS,GAAuBxR,EAAYqC,EAAQgP,EAAO,GAAIhQ,EAAQkR,GAGzEvS,EAAW0Q,mBAAoBe,GAAqBzR,EAAYZ,GAIxEiD,GAAUK,GAAQ1C,GCZd,IAAA5K,KAAUD,KACZuO,kBAAanB,YAAOG,sBAyCVmQ,GAAY7S,EAA6B8S,EAAkB1T,GACvE,IAAMkS,EAqBV,SAA2BtR,EAAY8S,EAAUxI,GAI7C,IAHA,IAAIgH,EAAUjhB,MAAOyiB,EAASljB,QAC1BsiB,EAAUlS,EAAWkS,MAEhBriB,EAAI,EAAG6iB,EAAI,EAAG7iB,EAAIijB,EAASljB,OAAQC,IAAK,CAC7C,IAAI4X,EAAQzH,EAAWxG,IAAKsZ,EAAUjjB,IAClC4X,IACA6J,EAASoB,KAAQjL,EACjByJ,GAAagB,EAAOzK,GACpBpD,GAAMrE,EAAYyH,EAAO6C,IAMjC,OAFAgH,EAAQ1hB,OAAS8iB,EAEVpB,EApCSyB,CAAkB/S,EAAY8S,EAAU1T,EAAQkL,OAChE,GAAIgH,EAAQ1hB,OAAQ,CAChB,IAAMyS,EAASE,GAAOvC,GAItB,GAmCR,SAAsBA,EAAYsR,GAK9B,IAJA,IAAI5b,EAASsK,EAAW+Q,OACpBA,EAAS/Q,EAAW+Q,OAAS1gB,MAAOqF,EAAK9F,OAAS0hB,GAClDY,EAAQlS,EAAWkS,MAEdriB,EAAI,EAAG6iB,EAAI,EAAG7iB,EAAI6F,EAAK9F,OAAQC,IAAK,CACzC,IAAI4X,EAAQ/R,EAAM7F,GAEdqiB,EAAOzK,EAAMxL,OACb8U,EAAQ2B,KAAQjL,GAIxBsJ,EAAOnhB,OAAS8iB,EAlDZM,CAAahT,EAAYsR,EAAQ1hB,QAE7B8T,GAAa1D,EAAYZ,GACL,IAAIoS,GAAuBxR,EAAYqC,EAAQ,GAAIiP,EAAS,IAAI,GACxE5O,cAIZL,GAAUK,GAAQ1C,GAI1B,OAAOsR,ECtEH,IAAA/O,YAAOG,aAAQgB,kBAGjBuP,GAAgB,CAAErP,QAAS,YAGjBsP,GAAqBlT,EAA6B+R,EAAkB3S,EAA6BwE,GAC7G,IAAMvB,EAASE,GAAOvC,GAEhBqR,EAsHV,SAA2B7a,EAAMhH,EAAQ4P,GAMrC,IALA,IAAI+T,EAAc3jB,EAASA,EAAOI,OAAS,EACvCmhB,EAAc1gB,MAAO8iB,GACrBjB,EAAkB,GAClB1D,EAAchY,EAAKiR,MAAMrX,UAAUoe,YAE9B3e,EAAI,EAAG6iB,EAAI,EAAG7iB,EAAIsjB,EAAKtjB,IAAK,CACjC,IAAIujB,EAAM5jB,EAAQK,GAElB,IAAIujB,IAASlB,EAAOkB,EAAK5E,MAAmB0D,EAAOkB,EAAInX,KAAvD,CAIA,IAAIwL,EAAQgJ,GAAkBja,EAAM4c,EAAKhU,GACzC2R,EAAQ2B,KAAQjL,EAChBuJ,GAAUkB,EAAOzK,IAMrB,OAHAsJ,EAAOnhB,OAAS8iB,EAChBlc,EAAK0b,MAAWA,EAET1b,EAAKua,OAASA,EA3IPsC,CAAkBrT,EAAY+R,EAAO3S,GAEnD,GAAIiS,EAAMzhB,OAAQ,CACd,IAAM2iB,EAAW3B,GAAc5Q,EAAYZ,GAE3C,GAAIsE,GAAa1D,EAAY4D,EAASqP,GAAgB7T,GAElD,OAAO,IAAIoS,GAAuBxR,EAAYqC,EAAQgP,EAAMzd,QAAS,GAAI,GAAI2e,GAG7EvS,EAAW0Q,mBAAoBe,GAAqBzR,EAAYZ,GAIxEiD,GAAUK,GAAQ1C,YAINsT,GAAgBtT,EAAY+R,EAAO3S,GAC/C,IAAMiD,EAASE,GAAOvC,GAChBqB,EAAS,GAEX+P,EAAWpR,EAAW+Q,OACtBM,EA2CR,SAAsBrR,EAA6BxQ,EAAgB6R,EAAwBjC,GAWvF,IAVA,IAAI2R,EAAc1gB,MAAOb,EAAOI,QAC5BsiB,EAAkB,GAClBzZ,GAAiC,MAAjB2G,EAAQ3G,OAAuB2G,EAAQ3G,SAAYuH,EAAWmK,QAC9EoJ,EAAcvT,EAAWkS,MACzBsB,EAAcxT,EAAW+Q,OACzBvC,EAAcxO,EAAWyH,MAAMrX,UAAUoe,YACzCiF,EAAc,GACdC,GAAc,EAGT7jB,EAAI,EAAG6iB,EAAI,EAAG7iB,EAAIL,EAAOI,OAAQC,IAAK,CAC3C,IAAIwiB,EAAQ7iB,EAAQK,GAChB4X,EAAiB,KAErB,GAAI4K,EAAM,CACN,IAAIrE,EAAMqE,EAAM7D,GACZvS,EAAMoW,EAAKpW,IAEf,GAAIiW,EAAOlE,IAAQkE,EAAOjW,GAAQ,SAElCwL,EAAQ8L,EAAWvF,IAAQuF,EAAWtX,GAG1C,GAAIwL,GACA,GAAIhP,GAAS4Z,IAAS5K,EAAO,CACrBiM,GAAaF,EAAYd,KAAQjL,IAAQiM,GAAY,GAEzD,IAAI1G,EAAQqF,EAAKzN,YAAcyN,EACzB1P,EAAc8E,EAAMrC,mBAAoB4H,EAAO5N,GACrDuD,GAAetB,EAAOhN,KAAMsO,SAIhC8E,EAAQgJ,GAAkBzQ,EAAYqS,EAAMjT,GAC5CqU,EAAMpf,KAAMoT,GAGhBsJ,EAAQ2B,KAAQjL,EAChBuJ,GAAUkB,EAAOzK,GAGrBsJ,EAAOnhB,OAAS8iB,EAChB1S,EAAW+Q,OAAWA,EACtB/Q,EAAWkS,MAAWA,EAEjBwB,IAAYtU,EAAQmS,QAAS,GAElC,OAAOkC,EA3FQT,CAAahT,EAAY+R,EAAO1Q,EAAQjC,GAEjDuU,EAAc3T,EAAW+Q,OAAOnhB,OAASyhB,EAAMzhB,OAC/C0hB,EAAUqC,EAAcvC,EAASxhB,OACnB+jB,EAsBxB,SAA0B3T,EAA6BoR,GAKnD,IAJQ,IAAAc,UACFZ,EAAU,OAGGsC,IAAA5gB,WAAAA,IAAU,CAAxB,IAAIyR,OACAyN,EAAOzN,EAAOxI,OACfqV,EAAQjd,KAAMoQ,GACdJ,GAAMrE,EAAYyE,IAI1B,OAAO6M,EAlC2BuC,CAAiB7T,EAAYoR,YHwD1CpR,EAA6B8T,GAClD,IAAkB,QAAAC,IAAA/gB,WAAAA,IACdqR,GAAMrE,QAGV,OAAO8T,EG5D6BE,CAAShU,EAAYoR,GACrC,GAEd6C,EAAiB5S,EAAOzR,QAAUyhB,EAAMzhB,OAExC2hB,EAAWX,GAAc5Q,EAAYZ,IAAa6U,GAAoB5C,EAAMzhB,QAAUwP,EAAQmS,OAEpG,GAAI0C,GAAkB3C,EAAQ1hB,QAAU2hB,EAAQ,CAC5C,GAAI7N,GAAa1D,EAAYZ,GACzB,OAAO,IAAIoS,GAAuBxR,EAAYqC,EAAQgP,EAAOC,EAASjQ,EAAQkQ,GAG9EvR,EAAW0Q,mBAAoBe,GAAqBzR,EAAYZ,GAGxEiD,GAAUK,GAAQ1C,GCtDtB,kBAAA,cAoFA,OAhFIkU,gBAAA,SAAQxE,EAAyCra,GAK7C,IAJQ,IAAA0b,cACJoD,EAAM9jB,MAAO0gB,EAAOnhB,QACpB6R,EAAWpM,EAAUqa,EAAMzQ,KAAM5J,GAAYqa,EAExC7f,EAAI,EAAG6iB,EAAI,EAAG7iB,EAAIkhB,EAAOnhB,OAAQC,IAAK,CAC3C,IAAM+e,EAAMnN,EAAUsP,EAAQlhB,GAAKA,QAC3B,IAAR+e,IAAoBuF,EAAKzB,KAAQ9D,GAOrC,OAJI/e,IAAM6iB,IACNyB,EAAIvkB,OAAS8iB,GAGVyB,GAKXD,mBAAA,SAAWzS,EAAmF2S,GAC1F,YAAgB,IAATA,EAAkBriB,KAAKgf,OAAO9J,OAAQxF,GAAa1P,KAAKgf,OAAO9J,OAAQxF,EAAU2S,IAI5FF,kBAAA,SAAO3R,EAAiB8R,GACpB,OAAOtiB,KAAKgf,OAAOnd,MAAO2O,EAAO8R,IAGrCH,oBAAA,SAASI,GACL,OAAOviB,KAAKgf,OAAOpZ,QAAS5F,KAAKyH,IAAK8a,KAG1CJ,qBAAA,SAAUK,GACN,OAAOtJ,QAASlZ,KAAKyH,IAAK+a,KAG9BL,mBAAA,SAAQzS,EAAyBpM,GAC7B,IAAMvE,EAAM0jB,GAAqB/S,GACjC,OAAO1P,KAAK0B,IAAK,SAAAghB,GAAK,OAAA3jB,EAAK2jB,GAAMA,OAAI,GAAQpf,IAGjD6e,iBAAA,SAAMzS,EAAyBpM,GAC3B,IAAMvE,EAAM0jB,GAAqB/S,GACjC,OAAO1P,KAAK2P,KAAM,SAAA+S,GAAK,OAAA3jB,EAAK2jB,GAAMA,OAAI,GAAQpf,IAGlD6e,iBAAA,SAAMzS,EAAyBpM,GAC3B,OAAO4V,QAASlZ,KAAK2iB,KAAMjT,EAAUpM,KAGzC6e,iBAAA,SAASxE,EAAyCra,GAI9C,IAHQ,IAAA0b,cACJtP,EAAWpM,EAAUqa,EAAMzQ,KAAM5J,GAAYqa,EAExC7f,EAAI,EAAGA,EAAIkhB,EAAOnhB,OAAQC,IAAK,CACpC,IAAMskB,EAAM1S,EAAUsP,EAAQlhB,GAAKA,GACnC,QAAY,IAARskB,EAAiB,OAAOA,IAIpCD,oBAAA,SAASzS,EAA+CpM,GACpDtD,KAAK2P,KAAMD,EAAUpM,IAGzB6e,mBAAA,WACI,OAAOniB,KAAKgf,OAAOvL,UAGvB0O,oBAAA,WACI,OAAOniB,KAAKgf,OAAO4D,WAGvBT,kBAAA,SAAOzS,EAAyBpM,GAC5B,IAAMvE,EAAM0jB,GAAqB/S,GACjC,YAAgE,IAAzD1P,KAAK2P,KAAM,SAAA+S,GAAK,QAAA3jB,EAAK2jB,SAAM,GAAgBpf,IAGtD6e,kBAAA,SAA0BtjB,GACtB,OAAOmB,KAAK0B,IAAK,SAAAgU,GAAS,OAAAA,EAAO7W,WAInCgkB,GAAO,SAAAvjB,GAAK,OAAAA,GAElB,SAASmjB,GAAwB/S,GAC7B,GAAgB,MAAZA,EAAmB,OAAOmT,GAE9B,cAAenT,GACX,IAAK,WAAa,OAAOA,EACzB,IAAK,SACD,IAAMoT,EAAO3kB,OAAOuC,KAAMgP,GAE1B,OAAO,SAAApQ,GACH,IAAgB,QAAAyjB,EAAAD,EAAA7hB,WAAAA,IAAM,CAAjB,IAAIpC,OACL,GAAI6Q,EAAU7Q,KAAUS,EAAGT,GACvB,OAAO,EAGf,OAAO,GAEf,QAAU,MAAM,IAAIqN,MAAO,qBChG3B,IAAA7I,KACFmN,YAAOG,aAAQgB,kBACfjS,KAAQnC,KAEVylB,GAAS,iBAeb,4DAEA,OAFiC7b,OACtB8b,eAAe,MADOrK,mBAwL7B,WAAasK,EAA2B7V,EAAkC+M,gBAAlC/M,MAAxC,MACIjB,YAAO4W,aACP9Z,EAAK8V,OAAS,GACd9V,EAAKiX,MAAQ,GAEbjX,EAAKia,WAAcja,EAAKia,gBAEG,IAAvB9V,EAAQ8V,aACRja,EAAKia,WAAa9V,EAAQ8V,WAC1B9V,EAAQ8V,gBAAa,GAGzBja,EAAKwM,MAAcxM,EAAKwM,MAEpBrI,EAAQqI,QACRxM,EAAKwM,MAAQrI,EAAQqI,MACrBrI,EAAQqI,WAAQ,GAGpBxM,EAAKuT,YAAcvT,EAAKwM,MAAMrX,UAAUoe,YAExCvT,EAAKkP,QAAUgC,GAAU,EAErB8I,IAEA/B,GAAqBjY,EADJka,GAAYla,EAAMga,EAAS7V,GACPA,GAAS,UAGlDnE,EAAKiB,WAAWpK,MAAOmJ,EAAMtL,WAEzBsL,EAAKoB,cAAepB,EAAKoB,aAAa0P,UAAW9Q,EAAMA,KA+QnE,OA9c4D/B,OAA/C6W,yBAQT,SAAcgB,EAAyB3R,GACnC,MAAM,IAAIgF,eAAgB,gCAGvB2L,WAAP,SAAiBzX,GAEb,IAAMsB,EAAO7H,KAGb,SAASqjB,EAAgBhjB,EAAGC,EAAGoY,GAC3B7Q,EAAK7D,KAAMhE,KAAMK,EAAGC,EAAG8O,gBAAcuJ,OAAUD,EAAStJ,gBAAcsJ,OAAS,IAHnF1Y,KAAKsjB,UAAY,KAMjBld,EAAQI,OAAOkB,SAAU2b,GAEzBA,EAAehlB,UAAY2B,KAAK3B,UAChCglB,EAAehK,UAAY4J,GAE3BjjB,KAAKujB,KAAOvjB,KAAKwjB,OAAcH,EAE/BvT,GAAcnI,SAAS3D,KAAMhE,KAAMuG,IAGhCyX,WAAP,SAAiBhd,EAAmCuF,GAChD,GAAIvF,EAAWyiB,WAAY,CACvB,IAAMjZ,EAAY,IAAI7I,EAAU4E,EAAUlI,UAAUugB,aACpDpU,EAAU1I,aAAcd,EAAWyiB,YACnCzjB,KAAK3B,UAAUugB,YAAcpU,OAGH,IAA1BxJ,EAAWmiB,aAAwBnjB,KAAK3B,UAAU8kB,WAAaniB,EAAWmiB,YAE9ErT,GAAcjJ,SAAS7C,KAAMhE,KAAMgB,IAYvC7C,sBAAI6f,mCAAJ,WAAuB,OAAOhe,KAAKgf,wCAKnC7gB,sBAAI6f,8BAmCJ,WAAkB,OAAOhe,KAAK8e,iBAnC9B,SAAgBxf,GAAhB,WAEI,cAAeA,GACX,IAAK,SACDU,KAAK8e,YAAc,SAAEze,EAAGC,GACpB,IAAMojB,EAAKrjB,EAAWf,GAAKqkB,EAAKrjB,EAAWhB,GAC3C,OAAIokB,IAAOC,EAAY,EAChBD,EAAKC,GAAM,EAAI,GAE1B,MACJ,IAAK,WACgB,IAAbrkB,EAAEzB,OACFmC,KAAK8e,YAAc,SAAEze,EAAGC,GACpB,IAAMojB,EAAWpkB,EAAG0E,KAAMkF,EAAM7I,GAAKsjB,EAAWrkB,EAAG0E,KAAMkF,EAAM5I,GAC/D,OAAIojB,IAAOC,EAAY,EAChBD,EAAKC,GAAM,EAAI,GAI1B3jB,KAAK8e,YAAc,SAAEze,EAAGC,GAAO,OAAMhB,EAAG0E,KAAMkF,EAAM7I,EAAGC,IAE3D,MAEJ,QACIN,KAAK8e,YAAc,uCAK/Bd,qBAAA,WACI,OAAOhe,KAAK4jB,SAAY5jB,KAAK4jB,OAAS5jB,KAAKkQ,OAASlQ,KAAKkQ,OAAOhB,WAAalP,KAAKqR,gBAQtF2M,8BAAA,SAAmBtL,EAAYrF,EAAmC0E,GAE9D,gBAF2B1E,MAEvB0E,IAAc/R,KAAlB,CAEQ,IAAAyc,mBAEJ/J,EAAOkK,WAAYH,IACnB2C,GAAapf,KAAKmgB,MAAOzN,GAG7B,IAAMpC,EAASE,GAAOxQ,MAElB2R,GAAa3R,KAAMqN,IAEnBhK,GAAUrD,KAAM,SAAU0S,EAAQrF,GAGtCiD,GAAUK,GAAQ3Q,QAGtBge,gBAAA,SAAK6F,GACD,GAAe,MAAXA,EAAJ,CAEA,GAAuB,iBAAZA,EAKP,OAAO7jB,KAAKmgB,MAAO0D,GAJnB,IAAM5H,EAAK4H,EAAS7jB,KAAKyc,aACzB,YAAgB,IAAPR,GAAiBjc,KAAKmgB,MAAOlE,IAAUjc,KAAKmgB,MAAO0D,EAAQ3Z,OAO5E8T,YAAEH,OAAOC,UAAT,WACI,OAAO9d,KAAKgf,OAAQnB,OAAOC,aAK/BE,uBAAA,SAAYtO,GACR,IAAMY,EAASC,GAAeC,MAAOxQ,MACrCA,KAAK2P,KAAMD,GACXY,GAAUC,GAAeI,OAAQ3Q,OAGrCge,4BAAA,SAAiBZ,GAEb,GAAIpd,KAAKoY,QAAU,OAAO,EAE1B,IAAI0L,EAAQ,EAUZ,OARA9jB,KAAK2P,KAAM,SAAA+C,GACP,IAAMnD,EAAQmD,EAAOzB,gBACjB1B,IACA6N,EAAQ1K,EAAOxI,KAAQqF,EACvBuU,OAIDA,GAyCX9F,uBAAA,aAEAA,kBAAA,WAAc,OAAOhe,KAAKgf,OAAQ,IAClChB,iBAAA,WAAa,OAAOhe,KAAKgf,OAAQhf,KAAKgf,OAAOnhB,OAAS,IACtDmgB,eAAA,SAAI+F,GACA,IAAM7E,EAAQ6E,EAAU,EAAIA,EAAU/jB,KAAKgf,OAAOnhB,OAASkmB,EAC3D,OAAO/jB,KAAKgf,OAAQE,IAIxBlB,kBAAA,SAAO3Q,gBAAAA,MACH,IAAM2R,EAAShf,KAAKoY,QAAUhJ,gBAAcuJ,MAAQ3Y,KAAKgf,OAAShf,KAAK0B,IAAK,SAAAgU,GAAS,OAAAA,EAAMuC,UACrFiF,EAAc,IAAUld,KAAKtB,YAAcsgB,EAAQ,CAAEtJ,MAAQ1V,KAAK0V,MAAOyN,WAAanjB,KAAKmjB,YAAcnjB,KAAKoY,SAIpH,OAFI/K,EAAQ8P,WAAWD,EAAK7L,cAAgBrR,KAAKkP,YAE1CgO,GAGXc,mBAAA,SAAQ3Q,GACJ,OAAOrN,KAAK0B,IAAK,SAAAgU,GAAS,OAAAA,EAAMjB,OAAQpH,MAI5C2Q,gBAAA,SAAKgG,EAAgC3W,GAMjC,gBANC2W,mBAAgC3W,WACN,IAAjBA,EAAS4W,KACfjkB,KAAK+T,KAAM,OAAQ,uBAAwB,oFAAqF1G,GAIhIA,EAAQ6W,MACRlkB,KAAKkkB,MAAOF,EAAU3W,OAEtB,CACA,IAAMuD,EAAc5Q,KAAKqT,mBAAoB2Q,EAAU3W,GACvDuD,GAAeA,EAAYD,SAG/B,OAAO3Q,MAUXge,wBAAA,SAAamG,GAAb,WACI,GAAIA,EAAS,CACTnkB,KAAKokB,aAAa,GAElB,IAAMC,EAA4B,mBAAZF,EAAyBA,EAAU,WAAM,OAAA,GAU/D,OARAnkB,KAAKskB,aAAe,CAChBC,QAAU,SAAAxT,GACNsT,EAAQtT,IAAU7H,EAAK+a,IAAKlT,EAAM,CAAE2C,OAAQ,EAAMhN,OAAQ,KAG9D6Y,QAAU,SAAAtD,GAAM,OAAA/S,EAAKmT,OAAQJ,KAG1Bjc,KAAK+b,cAAc/B,UAAWha,KAAKskB,aAActkB,MAAO0N,KAAM,WAAM,OAAAxE,IAGvElJ,KAAKskB,eACLtkB,KAAK+b,cAAchC,YAAa/Z,KAAKskB,aAActkB,MACnDA,KAAKskB,aAAe,OAShCtG,kBAAA,SAAO5J,GAAP,wBAAOA,MACH,IAAM/G,KAAYqG,OAAQ,GAASU,GAGnC,OAAOjH,GACHnN,KAHWA,KAAK+b,cAIPrS,KAAM2D,EAASrN,MACxBqN,EAEA,SAAA0D,GACI,IAAI7R,EAAegK,EAAKwH,IAAKK,EAAMyT,GAAE9Q,OAAQ,GAASrG,IAMtD,OAJIA,EAAQ+W,cACRllB,EAASgK,EAAKkb,YAAa/W,EAAQ+W,cAGhCllB,KAKnB8e,oBAAA,WACI,IAAIhe,KAAKgL,UAAT,CAIA,IAFA,IAAMyZ,GAAczkB,KAAKoY,YAENhX,EAAApB,KAAKgf,OAAL/d,WAAAA,IAAa,CAA3B,IAAIyR,OACLJ,GAAMtS,KAAM0S,GAER+R,GAAa/R,EAAO8F,UAG5BxY,KAAKokB,aAAa,GAElBhY,YAAMoM,qBAGVwF,kBAAA,SAAO0G,EAA8BrX,gBAAAA,MACjC,IAAMiD,EAASE,GAAOxQ,MAChB2kB,EAAiB3kB,KAAKgf,OAGxB0F,EACAvD,GAAqBnhB,KAAMojB,GAAYpjB,KAAM0kB,EAAYrX,GAAWA,GAAS,IAG7ErN,KAAKmgB,MAAQ,GACbngB,KAAKgf,OAAS,IAGlBrN,GAAa3R,KAAMqN,GAEnBA,EAAQwE,QAAUxO,GAAUrD,KAAM,QAASA,KAAMzC,GAAU,CAAEonB,eAAiBA,GAAkBtX,IAKhG,IAFQ,IAAA8S,iBAEcyE,IAAA3jB,WAAAA,IAAgB,CAAjC,IAAI4jB,OACL1E,EAAO0E,EAAU3a,MAASoI,GAAMtS,KAAM6kB,GAI1C,OADAvU,GAAUK,GAAQ3Q,MACXA,KAAKgf,QAIhBhB,gBAAA,SAAK0G,EAA8BrX,gBAAAA,MAC/B,IAAM2W,EAAWZ,GAAYpjB,KAAM0kB,EAAYrX,GACzCuD,EAAc5Q,KAAKgf,OAAOnhB,OACpBkiB,GAAgB/f,KAAMgkB,EAAU3W,GAChC8T,GAAqBnhB,KAAMgkB,EAAU3W,GAEjD,GAAIuD,EAEA,OADAA,EAAYD,SACLC,EAAY0O,OAK3BtB,mBAAA,SAAQ8G,EAAoBzX,GACxB,oBADwBA,MACpByX,EACOxmB,MAAMiK,QAASuc,GACVhE,GAAY9gB,KAAM8kB,EAAczX,YHjY7BY,EAA6B8W,EAA2B1X,GAC/E,IAAIqI,EAAiBzH,EAAWxG,IAAKsd,GAErC,GAAIrP,EAAO,CACP,IAAMpF,EAASE,GAAOvC,GAChB+Q,EAAS/Q,EAAW+Q,OAG1BA,EAAOgG,OAAQhG,EAAOpZ,QAAS8P,GAAS,GACxCyJ,GAAalR,EAAWkS,MAAOzK,GAG/B,IAAMuP,EAAStT,GAAa1D,EAAYZ,GAexC,OAZI4X,IACA7hB,GAAUsS,EAAO,SAAUA,EAAOzH,EAAYZ,GAC9CjK,GAAU6K,EAAY,SAAUyH,EAAOzH,EAAYZ,IAGvDiF,GAAMrE,EAAYyH,EAAOrI,EAAQkL,OAEjC0M,GAAU5hB,GAAU4K,EAAY,SAAUA,EAAYZ,GAGtDiD,GAAUK,GAAQ1C,GAEXyH,GGuWSwP,CAAWllB,KAAM8kB,EAAczX,GAGxC,IAKX2Q,+BAAA,SAAoB0G,EAA6BrX,gBAAAA,MAC7C,IAAM2W,EAAWZ,GAAYpjB,KAAM0kB,EAAYrX,GAE/C,OAAIrN,KAAKgf,OAAOnhB,QACc,IAAnBwP,EAAQgP,OACH0D,GAAgB/f,KAAMgkB,EAAU3W,GAAS,GACzCkU,GAAgBvhB,KAAMgkB,EAAU3W,GAGrC8T,GAAqBnhB,KAAMgkB,EAAU3W,IAUpD2Q,iBAAA,SAAM3Q,GACF,gBADEA,MACEwR,GAAc7e,KAAMqN,GAAW,CAC/B,IAAMiD,EAASE,GAAOxQ,MAElB2R,GAAa3R,KAAMqN,IACnBhK,GAAUrD,KAAM,OAAQA,KAAMqN,GAGlCiD,GAAUK,GAAQ3Q,MAGtB,OAAOA,MAIXge,kBAAA,SAAOuE,EAAwBlV,GAC3B,IAAMpP,EAAQ+B,KAAKyH,IAAK8a,GAExB,OADAviB,KAAKqc,OAAQkG,KAAahK,OAAQ,GAASlL,IACpCpP,GAGX+f,oBAAA,SAAS/C,GACL,OAAOA,EAAOjb,KAAK0V,MAAMrX,UAAUoe,cAIvCuB,mBAAA,SAAQtI,EAAWyP,GACf,IAAIxhB,EAAOuV,QAASlZ,KAAKyH,IAAKiO,IAC1BnS,OAAkB,IAAX4hB,GAAqBxhB,EAAOuV,QAASiM,GAWhD,OATIxhB,IAASJ,IACLI,EACA3D,KAAKqc,OAAQ3G,GAGb1V,KAAKikB,IAAKvO,IAIXnS,GAGXya,iBAAA,SAAMtS,EAAkBE,EAAgBkK,EAAe7X,EAAgBwf,IACjEA,GAAY9Q,IAASM,QAASvB,EAAOE,EAAW5L,KAAK0V,MAAMrX,UAAU8S,mBAAoBnR,KAAKmR,oBAAsB2E,EAAM,CACxHsP,SAAWnnB,EACXonB,kBAAoBrlB,KAAK0V,MAAMrX,UAAUsU,eAIjDqL,yBAAA,WACI,OAAO5R,YAAM+E,yBAAkB,cAOnChT,sBAAI6f,0BAAJ,WAAwB,OAAOhe,KAAKgf,OAAOnhB,wCAG3CmgB,iBAAA,SAAKtI,EAAwBrI,GACzB,OAAOrN,KAAKikB,IAAIvO,EAAOhW,GAAO,CAAC+gB,GAAIzgB,KAAKnC,QAASwP,KAIrD2Q,gBAAA,SAAK3Q,GACD,IAAIqI,EAAQ1V,KAAKygB,GAAGzgB,KAAKnC,OAAS,GAElC,OADAmC,KAAKqc,OAAO3G,KAAS6C,OAAQ,GAASlL,IAC/BqI,GAIXsI,oBAAA,SAAQtI,EAAwBrI,GAC5B,OAAOrN,KAAKikB,IAAIvO,EAAOhW,GAAO,CAAC+gB,GAAI,GAAIpT,KAI3C2Q,kBAAA,SAAO3Q,GACH,IAAMqI,EAAQ1V,KAAKygB,GAAG,GAEtB,OADAzgB,KAAKqc,OAAQ3G,KAAS6C,OAAQ,GAASlL,IAChCqI,GAtFJsI,YAAYhG,GAtXVgG,KAbZ3W,EAAO,CAEJwI,UAAY,IACZ6F,MAAQ8G,GACRpM,iBAAmB,UACnBuO,kBAAoB,OAEvBnY,EAAQ2b,IACRrb,EAAY,CACTqc,WAAa/Z,EAAWnL,MACxByX,MAAQtM,EAAWC,WACnBoa,WAAara,EAAW1C,SAEfsX,IAA+ClO,IA4d5D,SAASsT,GAA8BnV,EAA4B+V,EAA2B3W,GAC1F,IAAMiY,EAASjY,EAAQqG,MAAQzF,EAAWyF,MAAOsQ,EAAU3W,GAAY2W,EACvE,OAAO1lB,MAAMiK,QAAS+c,GAAWA,EAAS,CAAEA,YC3gBhCC,GAAgBC,GAC5B,cAAeA,GACX,IAAK,WACD,OAAO,SAAAzW,GAAQ,OAAMyW,EAAexhB,KAAM+K,IAC9C,IAAK,SACD,OAAO,WAAM,OAAYyW,GAC7B,IAAK,SAED,0BDsgBZhJ,GAAOwB,WAAaA,GEpgBpB,mBAAA,4DAqBA,OArB4B7W,OAExBse,mBAAA,SAAQxnB,GACJ,OAAOA,GAA0B,iBAAVA,EAAqBA,EAAMge,GAAKhe,GAI3DwnB,kBAAA,SAAOxnB,GACH,OAAOA,GAA0B,iBAAVA,EAAqBA,EAAMge,GAAKhe,GAI3DwnB,sBAAA,SAAWplB,EAAoBC,GAI3B,OAHUD,IAAyB,MAATA,EAAG4b,GAAa5b,EAAaA,EAAG4b,QAChD3b,IAAyB,MAATA,EAAG2b,GAAa3b,EAAaA,EAAG2b,MAM9DwJ,qBAAA,SAAU/P,EAAOzX,EAAOP,QApBA+X,aCRZiQ,GAA6EC,EAAwCC,GACjI,MAAMC,EAAkBD,GAAK5H,GAEzB8H,EAAWD,EAAgBvC,YAAeuC,EAAgBvC,0BA8B1D,WAAawB,EAAezX,GAA5B,MACIjB,YAAO,GAAIiB,EAAS0Y,iBAPxB7c,eAA4B,KAQxBA,EAAK8c,KAAOC,GAASnB,KAyH7B,OAnIyC3d,OAMrChJ,sBAAI+nB,mCAAJ,WAAuB,OAAOlmB,KAAKgmB,MAAQhmB,KAAKgf,wCAQhDkH,gBAAA,SAAKxB,EAAYrX,gBAAAA,MACL,IAAA8Y,oBACAzE,EAAQuE,GAASvB,GAEzB,GAAIyB,EAEA,OAAO/Z,YAAM6X,cAAKmC,GAAaD,EAAczE,GAASrU,GAItD,GAAIqU,EAAM7jB,OAAQ,CACd,IAAMyS,EAASC,GAAeC,MAAOxQ,MAGrCA,KAAKgmB,KAAOhmB,KAAKgmB,KAAOhmB,KAAKgmB,KAAKjkB,OAAQ2f,GAAUA,EAAM7f,QAE1D0O,GAAeoB,YAAa3R,KAAMqN,GAGlCiD,GAAUC,GAAeI,OAAQ3Q,QAK7CkmB,kBAAA,SAAOxB,EAAarX,gBAAAA,MACR,IAAA8Y,oBACJnC,EAAWiC,GAASvB,GAExB,OAAOyB,EAEH/Z,YAAM8X,gBAAOkC,GAAaD,EAAcnC,GAAY3W,GAEpDgZ,GAAUrmB,KAAMgkB,EAAU3W,IAAoB,IAGtD6Y,+BAAA,SAAoBxB,EAAYrX,GACpB,IAAA8Y,oBACJnC,EAAWiC,GAASvB,GAExB,OAAOyB,EAEH/Z,YAAMiH,6BAAoB+S,GAAaD,EAAcnC,GAAY3W,GAEjEgZ,GAAUrmB,KAAMgkB,EAAU3W,IAIlC6Y,mBAAA,WACI,OAAOlmB,KAAKgmB,KACRhmB,KAAKgmB,KAAKtkB,IAAK,SAAAmiB,GAAW,OAAAA,EAAQ5H,IAAM4H,IACxC7jB,KAAKgf,OAAOtd,IAAK,SAAAgU,GAAS,OAAAA,EAAMuG,MAIxCiK,4BAAA,WAAmB,OAAO,GAE1B/nB,sBAAI+nB,0BAAJ,WACI,OAAOlmB,KAAKgf,OAAOnhB,SAAYmC,KAAKgmB,KAAOhmB,KAAKgmB,KAAKnoB,OAAS,oCAIlEqoB,kBAAA,SAAO/T,GACH,IAAItK,EAAa7H,KAAMtB,YACnBwe,EAAO,IAAIrV,EAAM,GAAI,CACjB6N,MAAQ1V,KAAK0V,MACbyN,WAAanjB,KAAKmjB,aAa1B,OAVInjB,KAAKmmB,cAELjJ,EAAKiJ,aAAenmB,KAAKmmB,aACzBjJ,EAAK8I,KAAO,KACZ9I,EAAKgH,MAAOlkB,KAAKgf,OAAQ,CAAEnN,QAAS,KAGpCqL,EAAK8I,KAAOhmB,KAAKgmB,KAAKnkB,QAGnBqb,GAIXgJ,kBAAA,SAAOI,GACH,OAAOA,GAGXJ,oBAAA,SAASjY,GAUL,OATIA,GAAcA,EAAWpQ,SACzBmC,KAAKmmB,aAAelY,EAEhBjO,KAAKgmB,OACLhmB,KAAKkkB,MAAOlkB,KAAKgmB,KAAM,CAAEnU,QAAS,IAClC7R,KAAKgmB,KAAO,OAIbhmB,MAGXkmB,wBAAA,WAA6B,OAAOlmB,KAAKyU,UAEzCyR,mBAAA,SAAQ3D,EAAiB1F,GACrB,OAAOzQ,YAAMma,iBAAQvmB,KAAKmmB,aAAa1e,IAAK8a,GAAa1F,IAG7DqJ,mBAAA,WACI,GAAIlmB,KAAKmmB,aAEL,OADAnmB,KAAK0Q,IAAK1Q,KAAKmmB,aAAanH,QACrBhf,KAAKgf,OAGhB,MAAM,IAAI9S,MAAO,0EAGrBga,sBAAA,WACI,OAAOlmB,KAAKnC,OAASmC,KAAKkkB,QAAUlkB,KAAKwmB,UAjInCN,KAAb7e,GAAa6e,IAtBoFL,IA4J/ExnB,UAAUugB,iBAAc,EAEpCsH,IA7JHO,EAAsBlB,GAAgBI,GAE1C,OAAOnR,GAAMsR,GAAWre,IACpB,SAAUue,GAEN,OADCA,GAAQA,EAAKG,cAAgBH,EAAKrX,QAAS8X,EAAqBzmB,OAC1DgmB,IAKnBhI,GAAW3f,UAAUqoB,aAAe,SAAU1H,EAAc3R,GACxD,IACMsZ,EAAW,IADAjB,GAAU1lB,KAAMA,KAAKtB,aAAc2O,QAAQmH,MAC7BwK,EAAQ3R,GAGvC,OADAsZ,EAAOhY,QAAS3O,MACT2mB,GAGX,IAAMZ,GAAmB3W,gBAAcuJ,MAAQvJ,gBAAciJ,WA8I7D,SAAS+N,GAAaQ,EAAQ5C,GAG1B,IAFA,IAAMd,EAAU,OAED2D,IAAA5lB,WAAAA,IAAU,CAApB,IAAI8jB,OACCrS,EAASkU,EAAOnf,IAAKsd,GACvBrS,GAASwQ,EAAQ5gB,KAAMoQ,GAG/B,OAAOwQ,EAGX,SAASmD,GAAUpY,EAAY+V,EAAU3W,GACrC,GAAIyZ,EAAgB7Y,EAAW+X,KAAMhC,GAAY,CAC7C,IAAM1T,EAASC,GAAeC,MAAOvC,GAGrCA,EAAW+X,KAAOhC,EAASniB,QAE3B0O,GAAeoB,YAAa1D,EAAYZ,GAGxCiD,GAAUC,GAAeI,OAAQ1C,IAIzC,SAASgY,GAASjC,GACd,OAAOA,EACH1lB,MAAMiK,QAASyb,GAAaA,EAAW,CAAEA,GACzC,GCtMR,OAAIJ,GAAiB,oBAErB,4DAuBA,OAvB2Bzc,OACvB4f,qBAAA,WAAqB,OAAO/mB,MAG5B+mB,gBAAA,SAAKrpB,GAED,IAAIgR,EAAQ1O,KAAMtC,GAGlB,OAAIgR,GAAS1O,OAASA,KAAKqR,cAAuB3C,EAG3C1O,KAAKkQ,OAASlQ,KAAKkQ,OAAOzI,IAAK/J,GAASsC,KAAKqR,cAAc5J,IAAK/J,IAG3ES,sBAAW4oB,gBAAX,WAAqB,OAAOnD,QAC5B,SAAmBoD,GACXpD,IACFA,GAAOpL,UAGT1I,GAAczR,UAAUgT,cAAgBuS,GAASoD,sCArB9BxK,IAyB3BuK,GAAME,OAAS,IAAIF,GC7BG,oBAAXlJ,QACP1f,OAAOgI,eAAgBkG,OAAQ,SAAU,CAAEpO,MAAQ,CAAE6f,SAAW,mBAAqBlU,cAAe,QAmBzFlH,cAAIE,UAAKqK,cAAStN,WAAM0Q,eAAUpF,oBAAeic,kLAGbC,GAC/C,OAAY,eAAA,IACJjoB,kBADc+B,mBAAAA,IAAA8K,kBAOlB,OAJA/L,KAAK4Q,YAAa,WACd1R,EAASioB,EAAOpnB,MAAOmJ,EAAM6C,KAG1B7M,gD1BJCoS,EAAkB7M,GAEtB,IAAAwJ,eACR,GAAIA,EACA,OAAOqD,EAAkBrD,GAI7B,GAAIxJ,EAAKyL,OAAQ,CACL,IAAAqB,sBACR,OAAOA,GAAcA,EAAY9M,EAAK0L,wCAYbhG,GAC7B,IAAIwE,EAASyY,EAAQC,EAErB,SAAStZ,EAAOuZ,GACZD,EAAUC,EAGd,IAAMla,EAA2B,IAAIma,QAAS,SAAEC,EAAWC,GAGvDtd,EADAwE,EAAU6Y,EADVJ,EAASK,EAEoB1Z,KAOjC,OAJAX,EAAQW,MAAQ,WACZsZ,EAAUA,EAAS1Y,EAASyY,GAAWA,EAAQ,IAAIlb,MAAO,iBAGvDkB,mRHmE4Bsa,GACnC,OAAO,SAAkBxpB,EAAOR,IACfQ,EAAMP,eAAgB+pB,GAC/BxpB,EAAOwpB,GAAcxpB,EAAOwpB,IAAcxpB,EAAOwpB,IAAc,IAAI7lB,SAElES,KAAK5E,6FkBpH4Bsd,GAK1C,mBAJQ,4DAER,OAFoC7T,OACzBwgB,aAAa3M,EADV2M,KAAbtgB,GAAasgB,IAAsBnL,qBA+DlBte,EAAO0pB,GACzB,GAAuB,oBAAZ3hB,SAA2BA,QAAQ4hB,YAAa,CACvD,IAAID,EAGA,CACA,IAAME,EAAQ5pB,EACd,OAAO,SAAEA,EAAgB0pB,GACrBpT,GAAMvO,QAAQ4hB,YAAa,cAAe3pB,EAAO0pB,IAAa3pB,MAAO6pB,GAAQC,GAAI7pB,EAAO0pB,IAL5FpT,GAAMvO,QAAQ4hB,YAAa,cAAe3pB,EAAO0pB,IAAaG,GAAI7pB,EAAO0pB,QAU7E1pB,EAAM6V,KAAM,QAAS,uBAAwB,+VQ5DW4R,EAAwCC,GACpG,IAAMa,EAAsBlB,GAAgBI,GAO5C,OALiB,IAAIpM,GAA0B,CAC3Ctb,MAAQ,KACRob,UAAYoM,KAIXhe,IAAK,SAAUoc,EAA0BnmB,GACtC,GAAuB,iBAAZmmB,EAAuB,OAAOA,EAGzC,IAAM5V,EAAawY,EAAqBzmB,MAClC0S,EAAkB,KAYxB,OATIzE,GAAcA,EAAWpQ,SAEzB6U,EAASzE,EAAWxG,IAAKoc,IAAa,MACtC7jB,KAAK6S,WAAYnV,GAASgV,IAGhB1S,KAAK2S,YAAajV,GAAO4X,aAAc5C,EAAQ,KAAM1S,KAAM,KAGlE0S"}