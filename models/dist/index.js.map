{"version":3,"file":"index.js","sources":["../../mixture/src/tools.ts","../../mixture/src/eventsource.ts","../../node_modules/tslib/tslib.es6.js","../../mixture/src/mixins.ts","../../mixture/src/events.ts","../../mixture/src/logging.ts","../src/io-tools.ts","../src/traversable.ts","../src/validation.ts","../../node_modules/@linked/value/src/helpers.ts","../../node_modules/@linked/value/src/index.ts","../src/transactions.ts","../src/model/updates.ts","../src/model/metatypes/any.ts","../src/model/metatypes/basic.ts","../src/model/metatypes/date.ts","../src/model/metatypes/owned.ts","../src/model/metatypes/shared.ts","../src/model/metatypes/index.ts","../src/model/attrDef.ts","../src/model/mixin.ts","../src/model/io-mixin.ts","../src/model/model.ts","../src/model/linked-attrs.ts","../src/model/index.ts","../src/collection/commons.ts","../src/collection/add.ts","../src/collection/arrayMethods.ts","../src/collection/remove.ts","../src/collection/set.ts","../src/collection/index.ts","../src/relations/commons.ts","../src/relations/from.ts","../src/relations/subsetOf.ts","../src/relations/store.ts","../src/index.ts"],"sourcesContent":[" /** Similar to underscore `_.defaults` */\r\nexport function defaults< T >( dest : T, ...sources : Object[] ) : T\r\nexport function defaults< T >( dest : T, source : Object ) : T {\r\n    for( var name in source ) {\r\n        if( source.hasOwnProperty( name ) && !dest.hasOwnProperty( name ) ) {\r\n            dest[ name ] = source[ name ];\r\n        }\r\n    }\r\n\r\n    if( arguments.length > 2 ){\r\n        for( let i = 2; i < arguments.length; i++ ){\r\n            const other = arguments[ i ];\r\n            other && defaults( dest, other );\r\n        }\r\n    }\r\n\r\n    return dest;\r\n}\r\n\r\n/** Check if value is raw JSON */\r\nexport function isValidJSON( value : any ) : boolean {\r\n    if( value === null ){\r\n        return true;\r\n    }\r\n\r\n    switch( typeof value ){\r\n    case 'number' :\r\n    case 'string' :\r\n    case 'boolean' :\r\n        return true;\r\n\r\n    case 'object':\r\n        var proto = Object.getPrototypeOf( value );\r\n\r\n        if( proto === Object.prototype || proto === Array.prototype ){\r\n            return every( value, isValidJSON );\r\n        }\r\n    }\r\n\r\n    return false;\r\n}\r\n\r\n/** Get the base class constructor function.\r\n * @param Class Subclass constructor function.\r\n * @returns Base class constructor function.\r\n */\r\nexport function getBaseClass( Class : Function ) {\r\n    return Object.getPrototypeOf( Class.prototype ).constructor\r\n}\r\n\r\nexport function assignToClassProto<T, K extends keyof T>( Class, definition : T, ...names : K[] ) : void {\r\n    for( let name of names ){\r\n        const value = definition[ name ];\r\n        value === void 0 || ( Class.prototype[ name ] = value );\r\n    }\r\n}\r\n\r\n/** Checks whenever given object is an empty hash `{}` */\r\nexport function isEmpty( obj : {} ) : boolean {\r\n    if( obj ){\r\n        for( let key in obj ){\r\n            if( obj.hasOwnProperty( key ) ){\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nexport type Iteratee = ( value : any, key? : string | number ) => any;\r\n\r\nfunction someArray( arr : any[], fun : Iteratee ) : any {\r\n    let result;\r\n\r\n    for( let i = 0; i < arr.length; i++ ){\r\n        if( result = fun( arr[ i ], i ) ){\r\n            return result;\r\n        }\r\n    }\r\n}\r\n\r\nfunction someObject( obj : {}, fun : Iteratee ) : any {\r\n    let result;\r\n\r\n    for( let key in obj ){\r\n        if( obj.hasOwnProperty( key ) ){\r\n            if( result = fun( obj[ key ], key ) ){\r\n                return result;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/** Similar to underscore `_.some` */\r\nexport function some( obj, fun : Iteratee ) : any {\r\n    if( Object.getPrototypeOf( obj ) === ArrayProto ){\r\n        return someArray( obj, fun );\r\n    }\r\n    else{\r\n        return someObject( obj, fun );\r\n    }\r\n}\r\n\r\n/** Similar to underscore `_.every` */\r\nexport function every( obj : { }, predicate : Iteratee ) : boolean {\r\n    return !some( obj, x => !predicate( x ) );\r\n}\r\n\r\n/** Similar to `getOwnPropertyDescriptor`, but traverse the whole prototype chain. */\r\nexport function getPropertyDescriptor( obj : {}, prop : string ) : PropertyDescriptor {\r\n    let desc : PropertyDescriptor;\r\n\r\n    for( let proto = obj; !desc && proto; proto = Object.getPrototypeOf( proto ) ) {\r\n        desc = Object.getOwnPropertyDescriptor( proto, prop );\r\n    }\r\n\r\n    return desc;\r\n}\r\n\r\n/** Similar to underscore `_.omit` */\r\nexport function omit( source : {}, ...rest : string[] ) : {}\r\nexport function omit( source ) : {} {\r\n    const dest = {}, discard = {};\r\n\r\n    for( let i = 1; i < arguments.length; i ++ ){\r\n        discard[ arguments[ i ] ] = true;\r\n    }\r\n\r\n    for( var name in source ) {\r\n        if( !discard.hasOwnProperty( name ) && source.hasOwnProperty( name ) ) {\r\n            dest[ name ] = source[ name ];\r\n        }\r\n    }\r\n\r\n    return dest;\r\n}\r\n\r\n/** map `source` object properties with a given function, and assign the result to the `dest` object.\r\n * When `fun` returns `undefined`, skip this value. \r\n */\r\nexport function transform< A, B >( dest : { [ key : string ] : A }, source : { [ key : string ] : B }, fun : ( value : B, key : string ) => A | void ) : { [ key : string ] : A } {\r\n    for( var name in source ) {\r\n        if( source.hasOwnProperty( name ) ) {\r\n            var value = fun( source[ name ], name );\r\n            value === void 0 || ( dest[ name ] = < A >value );\r\n        }\r\n    }\r\n\r\n    return dest;\r\n}\r\n\r\nexport function fastAssign< A >( dest : A, source : {} ) : A {\r\n    for( var name in source ) {\r\n        dest[ name ] = source[ name ];\r\n    }\r\n\r\n    return dest;\r\n}\r\n\r\nexport function fastDefaults< A >( dest : A, source : {} ) : A {\r\n    for( var name in source ) {\r\n        if( dest[ name ] === void 0 ){\r\n            dest[ name ] = source[ name ];\r\n        }\r\n    }\r\n\r\n    return dest;\r\n}\r\n\r\n/** Similar to underscore `_.extend` and `Object.assign` */\r\nexport function assign< T >( dest : T, ...sources : Object[] ) : T\r\nexport function assign< T >( dest : T, source : Object ) : T {\r\n    for( var name in source ) {\r\n        if( source.hasOwnProperty( name ) ) {\r\n            dest[ name ] = source[ name ];\r\n        }\r\n    }\r\n\r\n    if( arguments.length > 2 ){\r\n        for( let i = 2; i < arguments.length; i++ ){\r\n            const other = arguments[ i ];\r\n            other && assign( dest, other );\r\n        }\r\n    }\r\n\r\n    return dest;\r\n}\r\n\r\n/** Similar to underscore `_.keys` */\r\nexport function keys( o : any ) : string[]{\r\n    return o ? Object.keys( o ) : [];\r\n}\r\n\r\n/** Similar to underscore `_.once` */\r\nexport function once( func : Function ) : Function {\r\n    var memo, first = true;\r\n    return function() {\r\n        if ( first ) {\r\n            first = false;\r\n            memo = func.apply(this, arguments);\r\n            func = null;\r\n        }\r\n        return memo;\r\n    };\r\n}\r\n\r\nconst ArrayProto = Array.prototype,\r\n      DateProto = Date.prototype,\r\n      ObjectProto = Object.prototype;\r\n\r\n/**\r\n * Determine whenever two values are not equal, deeply traversing \r\n * arrays and plain JS objects (hashes). Dates are compared by enclosed timestamps, all other\r\n * values are compared with strict comparison.\r\n */\r\nexport function notEqual( a : any, b : any) : boolean {\r\n    if( a === b ) return false;\r\n\r\n    if( a && b && typeof a == 'object' && typeof b == 'object' ) {\r\n        const protoA = Object.getPrototypeOf( a );\r\n\r\n        if( protoA !== Object.getPrototypeOf( b ) ) return true;\r\n\r\n        switch( protoA ){\r\n            case DateProto   : return +a !== +b;\r\n            case ArrayProto  : return arraysNotEqual( a, b );\r\n            case ObjectProto :\r\n            case null:\r\n                return objectsNotEqual( a, b );\r\n        }\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nfunction objectsNotEqual( a, b ) {\r\n    const keysA = Object.keys( a );\r\n\r\n    if( keysA.length !== Object.keys( b ).length ) return true;\r\n\r\n    for( let i = 0; i < keysA.length; i++ ) {\r\n        const key = keysA[ i ];\r\n\r\n        if( !b.hasOwnProperty( key ) || notEqual( a[ key ], b[ key ] ) ) {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    return false;\r\n}\r\n\r\nfunction arraysNotEqual( a, b ) {\r\n    if( a.length !== b.length ) return true;\r\n\r\n    for( let i = 0; i < a.length; i++ ) {\r\n        if( notEqual( a[ i ], b[ i ] ) ) return true;\r\n    }\r\n\r\n    return false;\r\n}\r\n\r\n/**\r\n * Create an object without Object prototype members except hasOwnProperty.\r\n * @param obj - optional parameter to populate the hash map from.\r\n */\r\nconst HashProto = Object.create( null );\r\nHashProto.hasOwnProperty = ObjectProto.hasOwnProperty;\r\n\r\nexport function hashMap( obj? ){\r\n    const hash = Object.create( HashProto );\r\n    return obj ? assign( hash, obj ) : hash;\r\n}","import { once as _once } from './tools'\r\n\r\n/*******************\r\n * Prebuilt events map, used for optimized bulk event subscriptions.\r\n *\r\n * const events = new EventMap({\r\n *      'change' : true, // Resend this event from self as it is.\r\n *      'change:attr' : 'localTargetFunction',\r\n *      'executedInTargetContext' : function(){ ... }\r\n *      'executedInNativeContext' : '^props.handler'\r\n * })\r\n */\r\nexport interface EventsDefinition {\r\n    [ events : string ] : Function | string | boolean\r\n}\r\n\r\nexport class EventMap {\r\n    handlers : EventDescriptor[] = [];\r\n\r\n    constructor( map? : EventsDefinition | EventMap ){\r\n        if( map ){\r\n            if( map instanceof EventMap ){\r\n                this.handlers = map.handlers.slice();\r\n            }\r\n            else{\r\n                map && this.addEventsMap( map );\r\n            }\r\n        }\r\n    }\r\n\r\n    merge( map : EventMap ){\r\n        this.handlers = this.handlers.concat( map.handlers );\r\n    }\r\n\r\n    addEventsMap( map : EventsDefinition ){\r\n        for( let names in map ){\r\n            this.addEvent( names, map[ names ] )\r\n        }\r\n    }\r\n\r\n    bubbleEvents( names : string ){\r\n        for( let name of names.split( eventSplitter ) ){\r\n            this.addEvent( name, getBubblingHandler( name ) );\r\n        }\r\n    }\r\n\r\n    addEvent( names : string, callback : Function | string | boolean ){\r\n        const { handlers } = this;\r\n\r\n        for( let name of names.split( eventSplitter ) ){\r\n            handlers.push( new EventDescriptor( name, callback ) );\r\n        }\r\n    }\r\n\r\n    subscribe( target : {}, source : EventSource ){\r\n        for( let event of this.handlers ){\r\n            on( source, event.name, event.callback, target );\r\n        }\r\n    }\r\n\r\n    unsubscribe( target : {}, source : EventSource ){\r\n        for( let event of this.handlers ){\r\n            off( source, event.name, event.callback, target );\r\n        }\r\n    }\r\n}\r\n\r\nexport class EventDescriptor {\r\n    callback : Function\r\n\r\n    constructor(\r\n        public name : string,\r\n        callback : Function | string | boolean\r\n    ){\r\n        if( callback === true ){\r\n            this.callback = getBubblingHandler( name );\r\n        }\r\n        else if( typeof callback === 'string' ){\r\n            this.callback =\r\n                function localCallback(){\r\n                    const handler = this[ callback ];\r\n                    handler && handler.apply( this, arguments );\r\n                };\r\n        }\r\n        else{\r\n            this.callback = <Function>callback;\r\n        }\r\n    }\r\n}\r\n\r\nconst _bubblingHandlers = {};\r\n\r\nfunction getBubblingHandler( event : string ){\r\n    return _bubblingHandlers[ event ] || (\r\n        _bubblingHandlers[ event ] = function( a?, b?, c?, d?, e? ){\r\n            if( d !== void 0 || e !== void 0 ) trigger5( this, event, a, b, c, d, e );\r\n            if( c !== void 0 ) trigger3( this, event, a, b, c );\r\n            else trigger2( this, event, a, b );\r\n        }\r\n    );\r\n}\r\n\r\nexport interface HandlersByEvent {\r\n    [ name : string ] : EventHandler\r\n}\r\n\r\nexport class EventHandler {\r\n    constructor( public callback : Callback, public context : any, public next = null ){}\r\n}\r\n\r\nfunction listOff( _events : HandlersByEvent, name : string, callback : Callback, context : any ){\r\n    const head = _events[ name ];\r\n\r\n    let filteredHead, prev;\r\n\r\n    for( let ev = head; ev; ev = ev.next ){\r\n        // Element must be kept\r\n        if( ( callback && callback !== ev.callback && callback !== ev.callback._callback ) ||\r\n            ( context && context !== ev.context ) ){\r\n            \r\n            prev = ev;\r\n            filteredHead || ( filteredHead = ev );\r\n        }\r\n        // Element must be skipped\r\n        else{\r\n            if( prev ) prev.next = ev.next;\r\n        }\r\n    }\r\n\r\n    if( head !== filteredHead ) _events[ name ] = filteredHead;\r\n}\r\n\r\nfunction listSend2( head : EventHandler, a, b ){\r\n    for( let ev = head; ev; ev = ev.next ) ev.callback.call( ev.context, a, b );\r\n}\r\n\r\nfunction listSend3( head : EventHandler, a, b, c ){\r\n    for( let ev = head; ev; ev = ev.next ) ev.callback.call( ev.context, a, b, c );\r\n}\r\n\r\nfunction listSend4( head : EventHandler, a, b, c, d ){\r\n    for( let ev = head; ev; ev = ev.next ) ev.callback.call( ev.context, a, b, c, d );\r\n}\r\n\r\nfunction listSend5( head : EventHandler, a, b, c, d, e ){\r\n    for( let ev = head; ev; ev = ev.next ) ev.callback.call( ev.context, a, b, c, d, e );\r\n}\r\n\r\nfunction listSend6( head : EventHandler, a, b, c, d, e, f ){\r\n    for( let ev = head; ev; ev = ev.next ) ev.callback.call( ev.context, a, b, c, d, e, f );\r\n}\r\n\r\nexport interface Callback extends Function {\r\n    _callback? : Function\r\n}\r\n\r\nexport function on( source : EventSource, name : string, callback : Callback, context? : any ) : void {\r\n    if( callback ){\r\n        const _events = source._events || ( source._events = Object.create( null ) );\r\n        _events[ name ] = new EventHandler( callback, context, _events[ name ] );\r\n    }\r\n}\r\n\r\nexport function once( source : EventSource, name : string, callback : Callback, context? : any ) : void {\r\n    if( callback ){\r\n        const once : Callback = _once( function(){\r\n            off( source, name, once );\r\n            callback.apply(this, arguments);\r\n        });\r\n\r\n        once._callback = callback;\r\n        on( source, name, once, context );\r\n    }\r\n}\r\n\r\nexport function off( source : EventSource, name? : string, callback? : Callback, context? : any ) : void {\r\n    const { _events } = source;\r\n    if( _events ){\r\n        if( callback || context ) {\r\n            if( name ){\r\n                listOff( _events, name, callback, context );\r\n            }\r\n            else{\r\n                for( let name in _events ){\r\n                    listOff( _events, name, callback, context );\r\n                }\r\n            }\r\n        }\r\n        else if( name ){\r\n            _events[ name ] = void 0;\r\n        }\r\n        else{\r\n            source._events = void 0;\r\n        }\r\n    }\r\n}\r\n\r\nexport interface EventSource {\r\n    /** @internal */\r\n    _events : HandlersByEvent\r\n}\r\n\r\nconst eventSplitter = /\\s+/;\r\n\r\nexport function strings( api : ApiEntry, source : EventSource, events : string, callback : Callback, context ){\r\n    if( eventSplitter.test( events ) ){\r\n        const names = events.split( eventSplitter );\r\n        for( let name of names ) api( source, name, callback, context );\r\n    }\r\n    else api( source, events, callback, context );\r\n}\r\n\r\nexport type ApiEntry = ( source : EventSource, event : string, callback : Callback, context? : any ) => void\r\n\r\n/*********************************\r\n * Event-triggering API\r\n */\r\n\r\n export function trigger2( self : EventSource, name : string, a, b ) : void {\r\n    const { _events } = self;\r\n    if( _events ){\r\n        const queue = _events[ name ],\r\n            { all } = _events;\r\n\r\n        listSend2( queue, a, b );\r\n        listSend3( all, name, a, b );\r\n    }\r\n};\r\n\r\nexport function trigger3( self : EventSource, name : string, a, b, c ) : void{\r\n    const { _events } = self;\r\n    if( _events ){\r\n        const queue = _events[ name ],\r\n            { all } = _events;\r\n\r\n        listSend3( queue, a, b, c );\r\n        listSend4( all, name, a, b, c );\r\n    }\r\n};\r\n\r\nexport function trigger5( self : EventSource, name : string, a, b, c, d, e ) : void{\r\n    const { _events } = self;\r\n    if( _events ){\r\n        const queue = _events[ name ],\r\n            { all } = _events;\r\n\r\n        listSend5( queue, a, b, c, d, e );\r\n        listSend6( all, name, a, b, c, d, e );\r\n    }\r\n};","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/*****************************************************************\r\n * Mixins engine and @define metaprogramming class extensions\r\n *\r\n * Vlad Balin & Volicon, (c) 2016-2017\r\n */\r\nimport { __extends } from 'tslib';\r\nimport { assign, defaults, getBaseClass, hashMap, transform } from './tools';\r\n\r\nexport interface Subclass< T > extends MixableConstructor {\r\n    new ( ...args ) : T\r\n    prototype : T\r\n}\r\n\r\nexport interface MixableConstructor extends Function{\r\n    __super__? : object;\r\n    mixins? : MixinsState;\r\n    onExtend? : ( BaseClass : Function ) => void;\r\n    onDefine? : ( definition : object, BaseClass : Function ) => void;\r\n    define? : ( definition? : object, statics? : object ) => MixableConstructor;\r\n    extend? : <T extends object>( definition? : T, statics? : object ) => Subclass<T>;\r\n}\r\n\r\nexport interface MixableDefinition {\r\n    mixins? : Mixin[]\r\n}\r\n\r\n/**\r\n * Base class, holding metaprogramming class extensions.\r\n * Supports mixins and Class.define metaprogramming method.\r\n */\r\nexport class Mixable {\r\n    static onExtend : ( BaseClass : Function ) => void;\r\n    static onDefine : ( definition : object, BaseClass : Function ) => object;    \r\n    static __super__ : object\r\n    static mixins : MixinsState;\r\n\r\n    /** \r\n     *  Must be called after inheritance and before 'define'.\r\n     */\r\n    static define( protoProps : MixableDefinition = {}, staticProps? : object ) : MixableConstructor {\r\n        const BaseClass : MixableConstructor = getBaseClass( this );\r\n\r\n        // Assign statics.\r\n        staticProps && assign( this, staticProps );\r\n\r\n        // Extract and apply mixins from the definition.\r\n        const { mixins, ...defineMixin } = protoProps;\r\n        mixins && this.mixins.merge( mixins );\r\n\r\n        // Unshift definition to the the prototype.\r\n        this.mixins.mergeObject( this.prototype, defineMixin, true );\r\n\r\n        // Unshift definition from statics to the prototype.\r\n        this.mixins.mergeObject( this.prototype, this.mixins.getStaticDefinitions( BaseClass ), true );\r\n\r\n        // Call onDefine hook, if it's present.\r\n        this.onDefine && this.onDefine( this.mixins.definitions, BaseClass );\r\n        \r\n        // Apply merge rules to inherited members. No mixins can be added after this point.\r\n        this.mixins.mergeInheritedMembers( BaseClass );\r\n\r\n        return this;\r\n    }\r\n\r\n    /** Backbone-compatible extend method to be used in ES5 and for backward compatibility */\r\n    static extend< T extends object>(spec? : T, statics? : {} ) : Subclass< T > {\r\n        let TheSubclass : Subclass< T >;\r\n\r\n        // 1. Create the subclass (ES5 compatibility shim).\r\n        // If constructor function is given...\r\n        if( spec && spec.hasOwnProperty( 'constructor' ) ){\r\n            // ...we need to manually call internal TypeScript __extend function. Hack! Hack!\r\n            TheSubclass = spec.constructor as any;\r\n            __extends( TheSubclass, this );\r\n        }\r\n        // Otherwise, create the subclall in usual way.\r\n        else{\r\n            TheSubclass = class Subclass extends this {} as any;\r\n        }\r\n\r\n        predefine( TheSubclass );\r\n        spec && TheSubclass.define( spec, statics );\r\n\r\n        return TheSubclass;\r\n    }\r\n}\r\n\r\n/** @decorator `@predefine` for forward definitions. Can be used with [[Mixable]] classes only.\r\n * Forwards the call to the [[Mixable.predefine]];\r\n */\r\nexport function predefine( Constructor : MixableConstructor ) : void {\r\n    const BaseClass : MixableConstructor = getBaseClass( Constructor );\r\n\r\n    // Legacy systems support\r\n    Constructor.__super__ = BaseClass.prototype;\r\n    \r\n    // Initialize mixins structures...\r\n    Constructor.define || MixinsState.get( Mixable ).populate( Constructor );\r\n\r\n    // Make sure Ctor.mixins are ready before the callback...\r\n    MixinsState.get( Constructor );\r\n\r\n    // Call extend hook.\r\n    Constructor.onExtend && Constructor.onExtend( BaseClass );\r\n}\r\n\r\n/** @decorator `@define` for metaprogramming magic. Can be used with [[Mixable]] classes only.\r\n *  Forwards the call to [[Mixable.define]].\r\n */\r\nexport function define( ClassOrDefinition : Function ) : void;\r\nexport function define( ClassOrDefinition : object ) : ClassDecorator;\r\nexport function define( ClassOrDefinition : object | MixableConstructor ){\r\n    // @define class\r\n    if( typeof ClassOrDefinition === 'function' ){\r\n        predefine( ClassOrDefinition );\r\n        ( ClassOrDefinition as MixableConstructor ).define();\r\n    }\r\n    // @define({ prop : val, ... }) class\r\n    else{\r\n        return function( Ctor : MixableConstructor ){\r\n            predefine( Ctor );\r\n            Ctor.define( ClassOrDefinition );\r\n        } as any;\r\n    }\r\n}\r\n\r\nexport function definitions( rules : MixinMergeRules ) : ClassDecorator {\r\n    return ( Class : Function ) => {\r\n        const mixins = MixinsState.get( Class );\r\n        mixins.definitionRules = defaults( hashMap(), rules, mixins.definitionRules );\r\n    }\r\n}\r\n\r\n// Create simple property list decorator\r\nexport function propertyListDecorator( listName: string ) : PropertyDecorator {\r\n    return function propList(proto, name : string) {\r\n        const list = proto.hasOwnProperty( listName ) ?\r\n            proto[ listName ] : (proto[ listName ] = (proto[ listName ] || []).slice());  \r\n\r\n        list.push(name);\r\n    }\r\n}\r\n\r\nexport function definitionDecorator( definitionKey, value ){\r\n    return ( proto : object, name : string ) => {\r\n        MixinsState\r\n            .get( proto.constructor )\r\n            .mergeObject( proto, {\r\n                [ definitionKey ] : {\r\n                    [ name ] : value\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\nexport class MixinsState {\r\n    mergeRules : MixinMergeRules;\r\n    definitionRules : MixinMergeRules;\r\n    definitions : object = {};\r\n    appliedMixins : Mixin[];\r\n\r\n    // Return mixins state for the class. Initialize if it's not exist.\r\n    static get( Class ) : MixinsState {\r\n        const { mixins } = Class;\r\n    \r\n        return mixins && Class === mixins.Class ? mixins :\r\n             Class.mixins = new MixinsState( Class );\r\n    }\r\n\r\n    constructor( public Class : MixableConstructor ){\r\n        const { mixins } = getBaseClass( Class );\r\n\r\n        this.mergeRules = ( mixins && mixins.mergeRules ) || hashMap();\r\n        this.definitionRules = ( mixins && mixins.definitionRules ) || hashMap();\r\n        this.appliedMixins = ( mixins && mixins.appliedMixins ) || [];\r\n    }\r\n\r\n    getStaticDefinitions( BaseClass : Function ){\r\n        const definitions = hashMap(),\r\n            { Class } = this;\r\n\r\n        return transform( definitions, this.definitionRules, ( rule, name ) =>{\r\n            if( BaseClass[ name ] !== Class[ name ]){\r\n                return Class[ name ];\r\n            }\r\n        });\r\n    }\r\n\r\n    merge( mixins : Mixin[] ){\r\n        const proto      = this.Class.prototype,\r\n            { mergeRules } = this;\r\n\r\n        // Copy applied mixins array as it's going to be updated.\r\n        const appliedMixins = this.appliedMixins = this.appliedMixins.slice();\r\n\r\n        // Apply mixins in sequence...\r\n        for( let mixin of mixins ) {\r\n            // Mixins array should be flattened.\r\n            if( Array.isArray( mixin ) ) {\r\n                this.merge( mixin );\r\n            }\r\n            // Don't apply mixins twice.\r\n            else if( appliedMixins.indexOf( mixin ) < 0 ){\r\n                appliedMixins.push( mixin );\r\n\r\n                // For constructors, merge _both_ static and prototype members.\r\n                if( typeof mixin === 'function' ){\r\n                    // Merge static members\r\n                    this.mergeObject( this.Class, mixin );\r\n\r\n                    // merge definitionRules and mergeRules\r\n                    const sourceMixins = ( mixin as any ).mixins;\r\n                    if( sourceMixins ){\r\n                        this.mergeRules = defaults( hashMap(), this.mergeRules, sourceMixins.mergeRules );\r\n                        this.definitionRules = defaults( hashMap(), this.definitionRules, sourceMixins.definitionRules );\r\n                        this.appliedMixins = this.appliedMixins.concat( sourceMixins.appliedMixins );\r\n                    }\r\n\r\n                    // Prototypes are merged according with rules.\r\n                    this.mergeObject( proto, mixin.prototype );\r\n                }\r\n                // Handle plain object mixins.\r\n                else {\r\n                    this.mergeObject( proto, mixin );\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    populate( ...ctors : Function[] ){\r\n        for( let Ctor of ctors ) {\r\n            MixinsState.get( Ctor ).merge([ this.Class ]);\r\n        }\r\n    }\r\n\r\n    mergeObject( dest : object, source : object, unshift? : boolean ) {\r\n        forEachOwnProp( source, name => {\r\n            const sourceProp = Object.getOwnPropertyDescriptor( source, name );\r\n            let rule : MixinMergeRule;\r\n\r\n            if( rule = this.definitionRules[ name ] ){\r\n                assignProperty( this.definitions, name, sourceProp, rule, unshift );\r\n            }\r\n\r\n            if( !rule || rule === mixinRules.protoValue  ){\r\n                assignProperty( dest, name, sourceProp, this.mergeRules[ name ], unshift );\r\n            }\r\n        });\r\n    }\r\n\r\n    mergeInheritedMembers( BaseClass : Function ){\r\n        const { mergeRules, Class } = this;\r\n\r\n        if( mergeRules ){\r\n            const proto = Class.prototype,\r\n                baseProto = BaseClass.prototype;\r\n\r\n            for( let name in mergeRules ) {\r\n                const rule = mergeRules[ name ];\r\n\r\n                if( proto.hasOwnProperty( name ) && name in baseProto ){\r\n                    proto[ name ] = resolveRule( proto[ name ], baseProto[ name ], rule );\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nconst dontMix = {\r\n    function : hashMap({\r\n        length : true,\r\n        prototype : true,\r\n        caller : true,\r\n        arguments : true,\r\n        name : true,\r\n        __super__ : true\r\n    }),\r\n    \r\n    object : hashMap({\r\n        constructor : true\r\n    })    \r\n}\r\n\r\nfunction forEachOwnProp( object : object, fun : ( name : string ) => void ){\r\n    const ignore = dontMix[ typeof object ];\r\n\r\n    for( let name of Object.getOwnPropertyNames( object ) ) {\r\n        ignore[ name ] || fun( name );\r\n    }\r\n}\r\n\r\nexport interface MixinMergeRules {\r\n    [ name : string ] : MixinMergeRule\r\n}\r\n\r\nexport type MixinMergeRule = ( a : any, b : any ) => any\r\nexport type Mixin = { [ key : string ] : any } | Function\r\n\r\n// @mixins( A, B, ... ) decorator.\r\nexport interface MixinRulesDecorator {\r\n    ( rules : MixinMergeRules ) : ClassDecorator\r\n    value( a : object, b : object) : object;\r\n    protoValue( a : object, b : object) : object;\r\n    merge( a : object, b : object ) : object;\r\n    pipe( a: Function, b : Function ) : Function;\r\n    defaults( a: Function, b : Function ) : Function;\r\n    classFirst( a: Function, b : Function ) : Function;\r\n    classLast( a: Function, b : Function ) : Function;\r\n    every( a: Function, b : Function ) : Function;\r\n    some( a: Function, b : Function ) : Function;\r\n}\r\n\r\nexport const mixins = ( ...list : Mixin[] ) => (\r\n    ( Class : Function ) => MixinsState.get( Class ).merge( list )\r\n);\r\n\r\n// @mixinRules({ name : rule, ... }) decorator.\r\nexport const mixinRules = ( ( rules : MixinMergeRules ) => (\r\n    ( Class : Function ) => {\r\n        const mixins = MixinsState.get( Class );\r\n        mixins.mergeRules = defaults( rules, mixins.mergeRules );\r\n    }\r\n) ) as MixinRulesDecorator;\r\n\r\n// Pre-defined mixin merge rules\r\n\r\nmixinRules.value = ( a, b ) => a;\r\n\r\nmixinRules.protoValue = ( a, b ) => a;\r\n\r\n// Recursively merge members\r\nmixinRules.merge = ( a, b ) => defaults( {}, a, b );\r\n\r\n    // Execute methods in pipe, with the class method executed last.\r\nmixinRules.pipe = ( a, b ) => (\r\n    function( x : any ) : any {\r\n        return a.call( this, b.call( this, x ) );\r\n    }\r\n);\r\n\r\n    // Assume methods return an object, and merge results with defaults (class method executed first)\r\nmixinRules.defaults = ( a : Function, b : Function ) => (\r\n    function() : object {\r\n        return defaults( a.apply( this, arguments ), b.apply( this, arguments ) );\r\n    }\r\n);\r\n\r\n// Execute methods in sequence staring with the class method.\r\nmixinRules.classFirst = ( a : Function, b : Function ) => (\r\n    function() : void {\r\n        a.apply( this, arguments );\r\n        b.apply( this, arguments );\r\n    }\r\n);\r\n\r\n    // Execute methods in sequence ending with the class method.\r\nmixinRules.classLast = ( a : Function, b : Function ) => (\r\n    function() : void {\r\n        b.apply( this, arguments );\r\n        a.apply( this, arguments );\r\n    }\r\n)\r\n\r\n    // Execute methods in sequence returning the first falsy result.\r\nmixinRules.every = ( a : Function, b : Function ) =>(\r\n    function() : any {\r\n        return a.apply( this, arguments ) && b.apply( this, arguments );\r\n    }\r\n);\r\n    // Execute methods in sequence returning the first truthy result.\r\nmixinRules.some = ( a : Function, b : Function ) =>(\r\n    function() : any {\r\n        return a.apply( this, arguments ) || b.apply( this, arguments );\r\n    }\r\n);\r\n\r\n/**\r\n * Helpers\r\n */\r\n\r\nfunction assignProperty( dest : object, name : string, sourceProp : PropertyDescriptor, rule : MixinMergeRule, unshift? : boolean ){\r\n// Destination prop is defined, thus the merge rules must be applied.\r\n    if( dest.hasOwnProperty( name ) ){\r\n        const destProp = Object.getOwnPropertyDescriptor( dest, name );\r\n\r\n        if( destProp.configurable && 'value' in destProp ){\r\n            dest[ name ] = unshift ?\r\n                resolveRule( sourceProp.value, destProp.value, rule ) :\r\n                resolveRule( destProp.value, sourceProp.value, rule ) ;\r\n        }\r\n    }\r\n    // If destination is empty, just copy the prop over.\r\n    else{\r\n        Object.defineProperty( dest, name, sourceProp );\r\n    }\r\n}\r\n\r\nfunction resolveRule( dest, source, rule : MixinMergeRule ){\r\n    // When destination is empty, take the source.\r\n    if( dest === void 0 ) return source;\r\n\r\n    // In these cases we take non-empty destination:\r\n    if( !rule || source === void 0 ) return dest;\r\n\r\n    // In other cases we must merge values.\r\n    return rule( dest, source );\r\n}","import * as _eventsApi from './eventsource';\r\nimport { EventMap, EventsDefinition, EventSource, HandlersByEvent } from './eventsource';\r\nimport { define, definitions, Mixable, MixableConstructor, mixinRules, MixinsState } from './mixins';\r\nimport { omit, transform } from './tools';\r\n\r\nconst { strings, on, off, once, trigger5, trigger2, trigger3 } = _eventsApi;\r\n\r\nlet _idCount = 0;\r\n\r\nfunction uniqueId() : string {\r\n    return 'l' + _idCount++;\r\n}\r\n\r\nexport { EventMap, EventsDefinition };\r\n\r\nexport interface MessengerDefinition {\r\n    _localEvents? : EventMap\r\n    localEvents? : EventsDefinition\r\n    properties? : PropertyMap\r\n    [ name : string ] : any\r\n}\r\n\r\nexport interface PropertyMap {\r\n    [ name : string ] : Property\r\n}\r\n\r\nexport type Property = PropertyDescriptor | ( () => any )\r\n\r\nexport interface MessengersByCid {\r\n    [ cid : string ] : Messenger\r\n}\r\n\r\nexport type EventCallbacks<Context> = { [ events : string ] : EventCallback<Context> }\r\nexport type EventCallback<Context> = ( this : Context, ...args : any[] ) => void\r\n\r\n/*************************\r\n * Messenger is mixable class with capabilities of sending and receiving synchronous events.\r\n * This class itself can serve as both mixin and base class.\r\n */\r\n\r\n@define\r\n@definitions({\r\n    properties : mixinRules.merge,\r\n    localEvents : mixinRules.merge\r\n})\r\nexport class Messenger implements Mixable, EventSource {\r\n    // Define extendable mixin static properties.\r\n    /** @internal */\r\n    static __super__ : object;\r\n    static mixins : MixinsState;\r\n    static onExtend : ( BaseClass : Function ) => void;\r\n    static define : ( definition? : MessengerDefinition, statics? : object ) => MixableConstructor;\r\n    static extend : ( definition? : MessengerDefinition, statics? : object ) => MixableConstructor;\r\n    static onDefine({ localEvents, _localEvents, properties } : MessengerDefinition, BaseClass? : typeof Mixable ){\r\n        // Handle localEvents definition\r\n        if( localEvents || _localEvents ){\r\n            const eventsMap = new EventMap( this.prototype._localEvents );\r\n\r\n            localEvents && eventsMap.addEventsMap( localEvents );\r\n            _localEvents && eventsMap.merge( _localEvents );\r\n            \r\n            this.prototype._localEvents = eventsMap;\r\n        }\r\n\r\n        // Handle properties definitions...\r\n        if( properties ){\r\n            Object.defineProperties( this.prototype, transform( {}, <PropertyMap>properties, toPropertyDescriptor ) );\r\n        }\r\n    }\r\n\r\n    /** @internal */ \r\n    _events : HandlersByEvent = void 0;\r\n\r\n    /** @internal */ \r\n    _listeningTo : MessengersByCid = void 0\r\n\r\n    /** Unique client-only id. */\r\n    cid : string\r\n\r\n    /** Prototype-only property to manage automatic local events subscription */ \r\n    protected _localEvents : EventMap\r\n\r\n    constructor(){\r\n        this.cid = uniqueId();\r\n        this.initialize.apply( this, arguments );\r\n\r\n        // TODO: local events subscribe?\r\n    }\r\n\r\n    /** Method is called at the end of the constructor */\r\n    initialize() : void {}\r\n    \r\n    on( events : string | EventCallbacks<this>, callback?, context? ) : this {\r\n        if( typeof events === 'string' ) strings( on, this, events, callback, context );\r\n        else for( let name in events ) strings( on, this, name, events[ name ], context || callback );\r\n\r\n        return this;\r\n    }\r\n\r\n    once( events : string | EventCallbacks<this>, callback?, context? ) : this {\r\n        if( typeof events === 'string' ) strings( once, this, events, callback, context );\r\n        else for( let name in events ) strings( once, this, name, events[ name ], context || callback );\r\n\r\n        return this;\r\n    }\r\n\r\n    off( events? : string | EventCallbacks<this>, callback?, context? ) : this {\r\n        if( !events ) off( this, void 0, callback, context );\r\n        else if( typeof events === 'string' ) strings( off, this, events, callback, context );\r\n        else for( let name in events ) strings( off, this, name, events[ name ], context || callback );\r\n\r\n        return this;\r\n    }\r\n\r\n    // Trigger one or many events, firing all bound callbacks. Callbacks are\r\n    // passed the same arguments as `trigger` is, apart from the event name\r\n    // (unless you're listening on `\"all\"`, which will cause your callback to\r\n    // receive the true name of the event as the first argument).\r\n    trigger(name : string, a?, b?, c?, d?, e? ) : this {\r\n        if( d !== void 0 || e !== void 0 ) trigger5( this, name, a, b, c, d, e );\r\n        else if( c !== void 0 ) trigger3( this, name, a, b, c );\r\n        else trigger2( this, name, a, b );\r\n        return this;\r\n    }\r\n\r\n    listenTo( source : Messenger, a : string | EventCallbacks<this>, b? : Function ) : this {\r\n        if( source ){\r\n            addReference( this, source );\r\n            source.on( a, !b && typeof a === 'object' ? this : b, this );\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    listenToOnce( source : Messenger, a : string | EventCallbacks<this>, b? : Function ) : this {\r\n        if( source ){\r\n            addReference( this, source );\r\n            source.once( a, !b && typeof a === 'object' ? this : b, this );\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    stopListening( a_source? : Messenger, a? : string | EventCallbacks<this>, b? : Function ) : this {\r\n        const { _listeningTo } = this;\r\n        if( _listeningTo ){\r\n            const removeAll = !( a || b ),\r\n                  second = !b && typeof a === 'object' ? this : b;\r\n\r\n            if( a_source ){\r\n                const source = _listeningTo[ a_source.cid ];\r\n                if( source ){\r\n                    if( removeAll ) delete _listeningTo[ a_source.cid ];\r\n                    source.off( a, second, this );\r\n                }\r\n            }\r\n            else if( a_source == null ){\r\n                for( let cid in _listeningTo ) _listeningTo[ cid ].off( a, second, this );\r\n\r\n                if( removeAll ) ( this._listeningTo = void 0 );\r\n            }\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Destructor. Stops messenger from listening to all objects,\r\n     * and stop others from listening to the messenger. \r\n     */\r\n    _disposed : boolean\r\n\r\n    dispose() : void {\r\n        if( this._disposed ) return;\r\n\r\n        this.stopListening();\r\n        this.off();\r\n\r\n        this._disposed = true;\r\n    }\r\n}\r\n\r\n/**\r\n * Backbone 1.2 API conformant Events mixin.\r\n */\r\nexport const Events : Messenger = <Messenger> omit( Messenger.prototype, 'constructor', 'initialize' );\r\n\r\n/**\r\n * Messenger Private Helpers \r\n */\r\n\r\nfunction toPropertyDescriptor( x : Property ) : PropertyDescriptor {\r\n    if( x ){\r\n        return typeof x === 'function' ? { get : < () => any >x, configurable : true } : <PropertyDescriptor> x;\r\n    }\r\n}\r\n\r\nfunction addReference( listener : Messenger, source : Messenger ){\r\n      const listeningTo = listener._listeningTo || (listener._listeningTo = Object.create( null ) ),\r\n            cid = source.cid || ( source.cid = uniqueId() );\r\n\r\n      listeningTo[ cid ] = source;\r\n}","import { Messenger } from './events'\r\nimport { define } from './mixins';\r\n\r\nexport type LogLevel = 'error' | 'warn' | 'debug' | 'info' | 'log';\r\nexport type LoggerEventHandler = ( topic : string, msg : string, props : object )  => void;\r\n\r\nexport const isProduction = typeof process !== 'undefined' && process.env && process.env.NODE_ENV === 'production',\r\n    logEvents : LogLevel[] =  isProduction ?\r\n        [ 'error', 'info' ] :\r\n        [ 'error', 'warn', 'debug', 'info', 'log' ];\r\n\r\n@define\r\nexport class Logger extends Messenger {\r\n    counter : { [ level in LogLevel ]? : number } = {}\r\n\r\n    // Log events of the given log level to the console, optionally filtered by topic\r\n    logToConsole( level : LogLevel, filter? : RegExp ) : this {\r\n        return this.on( level, ( topic, msg, props ) => {\r\n            if( !filter || filter.test( topic ) ){\r\n                const args = [ `[${topic}] ${msg}` ];\r\n        \r\n                for( let name in props ){\r\n                    args.push( `\\n\\t${name}:`, toString( props[ name ] ) );\r\n                }\r\n        \r\n                console[ level ].apply( console, args );\r\n            }\r\n        });\r\n    }\r\n\r\n    // Fire exception on the events of the given log level, optionally filtered by topic\r\n    throwOn( level : LogLevel, filter? : RegExp ) : this {\r\n        return this.on( level, ( topic, msg, props ) => {\r\n            if( !filter || filter.test( topic ) ){\r\n                throw new Error( `[${topic}] ${msg}` );\r\n            }\r\n        });\r\n    }\r\n\r\n    // Count log events of the given level, optionally filtered by topic\r\n    count( level : LogLevel, filter? : RegExp ) : this {\r\n        return this.on( level, ( topic, msg, props ) => {\r\n            if( !filter || filter.test( topic ) ){\r\n                this.counter[ level ] = ( this.counter[ level ] || 0 ) + 1;\r\n            }\r\n        });\r\n    }\r\n\r\n    trigger : ( level : LogLevel, topic : string, message : string, props? : object ) => this;\r\n    \r\n    off : ( event? : LogLevel ) => this;\r\n\r\n\r\n    on( handlers : { [ name in LogLevel ] : LoggerEventHandler } ) : this;\r\n    on( handlers : LogLevel, handler : LoggerEventHandler ) : this;\r\n    on( handlers : 'all', handler : ( level : LogLevel, topic : string, msg : string, props : object )  => void ) : this;\r\n    on( a : any, b? : any ){\r\n        return super.on( a, b );\r\n    }\r\n}\r\n\r\n/**\r\n * Convert objects to the plain text friendly format.\r\n * primitives as in JSON.\r\n */\r\nlet toString = typeof window === 'undefined' ? \r\n    something => {\r\n        if( something && typeof something === 'object' ){\r\n            // Support custom object wrappers...\r\n            const value = something.__inner_state__ || something,\r\n                isArray = Array.isArray( value );\r\n\r\n            const body = isArray ? `[ length = ${ value.length } ]` : `{ ${ Object.keys( value ).join( ', ' )} }`;\r\n\r\n            return something.constructor.name + ' ' + body;\r\n        }\r\n\r\n        return JSON.stringify( something );\r\n    }\r\n    : x => x;\r\n\r\nexport const logger = new Logger();\r\n\r\nif( typeof console !== 'undefined' ) {\r\n    for( let event of logEvents ){\r\n        logger.logToConsole( event );\r\n    }\r\n}\r\n\r\nexport const throwingLogger = new Logger();\r\nthrowingLogger.throwOn( 'error' ).throwOn( 'warn' );\r\n\r\nexport const log : typeof logger.trigger = logger.trigger.bind( logger );","export interface IONode {\r\n    /** @internal */\r\n    _endpoint : IOEndpoint\r\n\r\n    /** @internal */\r\n    _ioPromise : IOPromise< this >\r\n}\r\n\r\nexport interface IOPromise<T> extends Promise<T> {\r\n    abort? : () => void\r\n}\r\n\r\nexport interface IOEndpoint {\r\n    list( options : IOOptions, collection? ) : IOPromise<any>\r\n    create( json : any, options : IOOptions, record? ) : IOPromise<any>\r\n    update( id : string | number, json :any, options : IOOptions, record? ) : IOPromise<any>\r\n    read( id : string | number, options : IOOptions, record? ) : IOPromise<any>\r\n    destroy( id : string | number, options : IOOptions, record? ) : IOPromise<any>\r\n    subscribe( events : IOEvents, collection? ) : IOPromise<any>\r\n    unsubscribe( events : IOEvents, collection? ) : void\r\n}\r\n\r\nexport interface IOOptions {\r\n    ioMethod? : 'save' | 'fetch'\r\n}\r\n\r\nexport interface IOEvents {\r\n    updated? : ( json : any ) => void\r\n    removed? : ( json : any ) => void\r\n}\r\n\r\nexport function getOwnerEndpoint( self ) : IOEndpoint {\r\n    // Check if we are the member of the collection...\r\n    const { collection } = self;\r\n    if( collection ){\r\n        return getOwnerEndpoint( collection );\r\n    }\r\n\r\n    // Now, if we're the member of the model...\r\n    if( self._owner ){\r\n        const { _endpoints } = self._owner;\r\n        return _endpoints && _endpoints[ self._ownerKey ];\r\n    }\r\n}\r\n\r\n/**\r\n * Create abortable promise.\r\n * Adds `promise.abort()` function which rejects the promise by default\r\n * initialize() function takes third optional argument `abort : ( resolve, reject ) => void`,\r\n * which can be used to add custom abort handling.\r\n */\r\ndeclare var Promise: PromiseConstructorLike;\r\n\r\nexport function createIOPromise( initialize : InitIOPromise ) : IOPromise<any>{\r\n    let resolve, reject, onAbort;\r\n\r\n    function abort( fn ){\r\n        onAbort = fn;\r\n    }\r\n\r\n    const promise : IOPromise<any> = new Promise( ( a_resolve, a_reject ) =>{\r\n        reject = a_reject;\r\n        resolve = a_resolve;\r\n        initialize( resolve, reject, abort );\r\n    }) as IOPromise<any>;\r\n\r\n    promise.abort = () => {\r\n        onAbort ? onAbort( resolve, reject ) : reject( new Error( \"I/O Aborted\" ) );\r\n    }\r\n\r\n    return promise;\r\n}\r\n\r\nexport type InitIOPromise = ( resolve : ( x? : any ) => void, reject : ( x? : any ) => void, abort? : ( fn : Function ) => void ) => void;\r\n\r\nexport function startIO( self : IONode, promise : IOPromise<any>, options : IOOptions, thenDo : ( json : any ) => any ) : IOPromise<any> {\r\n    // Stop pending I/O first...\r\n    abortIO( self );\r\n\r\n    self._ioPromise = promise\r\n        .then( resp => {\r\n            self._ioPromise = null;\r\n    \r\n            const result = thenDo ? thenDo( resp ) : resp;\r\n                \r\n            triggerAndBubble( self, 'sync', self, resp, options );\r\n                \r\n            return result;\r\n        } )  \r\n        .catch( err => {\r\n            self._ioPromise = null;\r\n            \r\n            // Overlaps with a new `error` event.\r\n            triggerAndBubble( self, 'error', self, err, options );\r\n            \r\n            throw err;\r\n        } ) as IOPromise<any>;\r\n\r\n    self._ioPromise.abort = promise.abort;\r\n\r\n    return self._ioPromise;\r\n}\r\n\r\nexport function abortIO( self : IONode ){\r\n    if( self._ioPromise && self._ioPromise.abort ){\r\n        self._ioPromise.abort();\r\n        self._ioPromise = null;\r\n    }\r\n}\r\n\r\nexport function triggerAndBubble( eventSource, ...args ){\r\n    eventSource.trigger.apply( eventSource, args );\r\n    const { collection } = eventSource;\r\n    collection && collection.trigger.apply( collection, args ); \r\n}","/**\r\n * Traversable objects and symbolic references\r\n */\r\nexport interface Traversable {\r\n    getStore() : Traversable\r\n    getOwner() : Traversable\r\n    get( key : string ) : any \r\n}\r\n\r\nconst referenceMask =  /\\^|(store\\.[^.]+)|([^.]+)/g;\r\n\r\n// Compile reference to function\r\nexport type ResolveReference = ( root : Traversable ) => any;  \r\n\r\nexport class CompiledReference {\r\n    resolve : ResolveReference\r\n    tail : string\r\n    local : boolean\r\n\r\n    constructor( reference : string, splitTail : boolean = false ){\r\n        const path = reference\r\n                        .match( referenceMask )\r\n                        .map( key => {\r\n                            if( key === '^' || key === 'owner' ) return 'getOwner()';\r\n\r\n                            if( key[ 0 ] === '~' ) return `getStore().get(\"${ key.substr( 1 ) }\")`;\r\n\r\n                            if( key.indexOf( 'store.' ) === 0 ) return `getStore().get(\"${ key.substr( 6 ) }\")`;\r\n                            \r\n                            return key;\r\n                        } );\r\n               \r\n        this.tail = splitTail && path.pop();\r\n        this.local = !path.length;\r\n        \r\n        this.resolve = <any> new Function( 'self', `\r\n            var v = self.${ path.shift() };\r\n                           \r\n            ${ path.map( x => `\r\n                v = v && v.${ x };\r\n            `).join('')}\r\n\r\n            return v;\r\n        ` );\r\n    }\r\n}\r\n\r\nexport function resolveReference( root : Traversable, reference : string, action : ( object, key : string ) => any ) : any {\r\n    const path = reference.match( referenceMask ),\r\n          skip = path.length - 1;\r\n    \r\n    let self = root;\r\n\r\n    for( var i = 0; i < skip; i++ ){\r\n        const key = path[ i ];\r\n        switch( key ){\r\n            case '~' : self = self.getStore(); break;\r\n            case '^' : self = self.getOwner(); break;\r\n            default  : self = self.get( key );\r\n        }\r\n\r\n        // Do nothing if object on the path doesn't exist.\r\n        if( !self ) return;\r\n    }\r\n\r\n    return action( self, path[ skip ] );\r\n}","export interface ChildrenErrors {\r\n    [ key : string ] : ValidationError | any\r\n} \r\n\r\nexport interface Validatable {\r\n    /** @internal */\r\n    _validateNested( errors : ChildrenErrors ) : number;\r\n    \r\n    validate( self : any ) : any\r\n    get( key : string ) : any\r\n}\r\n\r\n// Validation error object.\r\nexport class ValidationError {\r\n    // Invalid nested object keys \r\n    nested : ChildrenErrors \r\n    length : number\r\n\r\n    // Local error\r\n    error : any\r\n\r\n    constructor( obj : Validatable ){\r\n        this.length = obj._validateNested( this.nested = {} );\r\n\r\n        if( this.error = obj.validate( obj ) ){\r\n            this.length++;\r\n        }\r\n    }\r\n\r\n    each( iteratee : ( value : any, key : string ) => void ) : void {\r\n        const { error, nested } = this;\r\n\r\n        if( error ) iteratee( error, null );\r\n\r\n        for( const key in nested ){\r\n            iteratee( nested[ key ], key );\r\n        }\r\n    }\r\n\r\n    eachError( iteratee : ( error : any, key : string, object : Validatable ) => void, object : Validatable ) : void {\r\n        this.each( ( value : any, key : string ) => {\r\n            if( value instanceof ValidationError ){\r\n                (<ValidationError>value).eachError( iteratee, object.get( key ) );\r\n            }\r\n            else{\r\n                iteratee( value, key, object );\r\n            }\r\n        });\r\n    }\r\n}","/**\n * Select appropriate helpers function for particular value type.\n */\nexport interface IterableLink {\n    value : any\n    at( key : number | string ) : any\n}\n\nexport type Iterator = ( link : any, key : string | number ) => any;\n\nexport interface Helper {\n    map( link : IterableLink, iterator : Iterator ) : any[]\n    clone( obj : any ) : any,\n    remove( obj : any, key : string | number ) : any\n}\n\nconst ArrayProto = Array.prototype,\n      ObjectProto = Object.prototype;\n\nexport function helpers( value ) : Helper {\n    if( value && typeof value === 'object' ){\n        switch( Object.getPrototypeOf( value ) ){\n            case ArrayProto  : return arrayHelpers;\n            case ObjectProto : return objectHelpers;\n        }\n    }\n\n    return dummyHelpers;\n}\n\n// Do nothing for types other than Array and plain Object.\nconst dummyHelpers : Helper = {\n    clone( value ){ return value; },\n    map( link : IterableLink, fun ){ return []; },\n    remove( value ){ return value; }\n};\n\n// `map` and `clone` for plain JS objects\nexport const objectHelpers : Helper = {\n    // Map through the link to object\n    map( link : IterableLink, iterator : Iterator ) : any[] {\n        let mapped = [],\n            { value } = link\n\n        for( let key in value ){\n            if( value.hasOwnProperty( key ) ){\n                const element = iterator( link.at( key ), key );\n                element === void 0 || ( mapped.push( element ) );    \n            }\n        }\n\n        return mapped;\n    },\n\n    remove( object : {}, key : string ) : {} {\n        delete object[ key ];\n        return object;\n    },\n\n     // Shallow clone plain JS object\n    clone( object : {} ) : {} {\n        return { ...object };\n    }\n};\n\n// `map` and `clone` helpers for arrays.\nexport const arrayHelpers : Helper = {\n    // Shallow clone array\n    clone( array : any[] ) : any[] {\n        return array.slice();\n    },\n\n    remove( array : any[], i : number ) : any[] {\n        array.splice( i, 1 );\n        return array;\n    },\n\n    // Map through the link to array\n    map( link : IterableLink, iterator : Iterator ) : any[] {\n        const length = link.value.length,\n              mapped = Array( length );\n\n        for( var i = 0, j = 0; i < length; i++ ){\n            const y = iterator( link.at( i ), i );\n            y === void 0 || ( mapped[ j++ ] = y );\n        }\n\n        mapped.length === j || ( mapped.length = j );\n\n        return mapped;\n    }\n};","/**\n * Advanced React links for purely functional two-way data binding\n *\n * MIT License, (c) 2016 Vlad Balin, Volicon.\n */\nimport { arrayHelpers, helpers } from './helpers';\n\nexport * from './helpers'\n\n/** \n * `Linked` class is an abstract linked value - the value, the function to update this value, and its validation error.\n * The enclosed value is considered as immutable.\n */ \nexport abstract class Linked<T>{\n    /** Validation error. Usually is a string with error text, but can hold any type. */ \n    error : any = void 0\n    \n    /** Set linked value */ \n    abstract set( x : T ) : void\n\n    constructor( public value : T ){}\n\n    /** EXPERIMENTAL: Support useRef interface. */ \n    get current(){ return this.value; }\n    set current( x : T ){ this.set( x ); }\n\n    // Private accessor for whenChanged. Uniform with Type-R models and collections API.\n    protected get _changeToken(){\n        return this.value;\n    }\n\n    /** Produce the new link executing the given function before the link value will be updated. */\n    onChange( handler : ( x : T ) => void ) : Linked<T> {\n        return new ClonedValueLink( this, ( x : T ) => {\n            handler( x );\n            this.set( x );\n        });\n    }\n\n    /** Produce the new link which transform the value before `set` with a given function. */\n    pipe( handler : Linked.Transform<T> ) : Linked< T > {\n        return new ClonedValueLink( this, x =>{\n            const next = handler( x, this.value );\n            next === void 0 || this.set( next );\n        } );\n    }\n\n    /** \n     * Create React component props for the <input> component.\n     * \n     * <input { ...link.props } />\n     */ \n    get props(){\n        return typeof this.value === 'boolean' ? {\n            checked : this.value,\n            onChange : e => this.set( Boolean( e.target.checked ) as any )\n        }:{\n            value : this.value,\n            onChange : e => this.set( e.target.value )\n        };\n    }\n\n    /** Update the linked value using given transform function. */ \n    update( transform : Linked.Transform<T>, e? : Object ) : void {\n        const next = transform( this.clone(), e );\n        next === void 0 || this.set( next );\n    }\n\n    // Create UI event handler function which will update the link with a given transform function.\n    action( transform : Linked.Transform< T > ) : Linked.EventHandler {\n        return e => this.update( transform, e );\n    }\n\n    equals( truthyValue : T ) : Linked<boolean> {\n        return new EqualsValueLink( this, truthyValue );\n    }\n\n    enabled( defaultValue? : T ) : Linked<boolean> {\n        return new EnabledValueLink( this, defaultValue || \"\" );\n    }\n\n    // Array-only links methods\n    contains<E>( this : Linked<E[]>, element : E ) : Linked<boolean>{\n        return new ContainsRef( this, element );\n    }\n\n    push<E>( this : Linked<E[]>, ...args : E[] ) : void;\n    push(){\n        const array = arrayHelpers.clone( this.value );\n        Array.prototype.push.apply( array, arguments );\n        this.set( array );\n    }\n\n    unshift<E>( this : Linked<E[]>, ...args : E[] ) : void;\n    unshift() : void {\n        const array = arrayHelpers.clone( this.value );\n        Array.prototype.unshift.apply( array, arguments );\n        this.set( array );\n    }\n\n    \n    splice( this : Linked<any[]>, start : number, deleteCount? : number ) : void;\n    splice() : void {\n        const array = arrayHelpers.clone( this.value );\n        Array.prototype.splice.apply( array, arguments );\n        this.set( array );\n    }\n\n    // Array and objects universal collection methods\n    map<E, Z>( this : Linked<E[]>, iterator : ( link : PropValueLink<E, number>, idx : number ) => Z ) : Z[];\n    map<E, Z>( this : Linked<{[ key : string ] : E }>, iterator : ( link : PropValueLink<E, string>, idx : string ) => Z ) : Z[];\n    map( iterator ) {\n        return helpers( this.value ).map( this, iterator );\n    }\n\n    removeAt<E>( this : Linked<E[]>, key : number ) : void;\n    removeAt<E>( this : Linked<{ [ key : string ] : E }>, key : string ) : void;\n    removeAt( key ){\n        const { value } = this,\n            _ = helpers( value );\n\n        this.set( _.remove( _.clone( value ), key ) );\n    }\n\n    at<E>( this : Linked<E[]>, key : number ) : PropValueLink<E, number>;\n    at<K extends keyof T, E extends T[K]>( key : K ) : PropValueLink<E, K>;\n    at( key ){\n        return new PropValueLink( this, key );\n    }\n\n    clone() : T {\n        let { value } = this;\n        return helpers( value ).clone( value );\n    }\n\n    /**\n     * Convert link to object to the object of links. Optionally filter by \n     */\n    pick< K extends keyof T >( ...keys : K[]) : {[ P in K ]: Linked<T[P]>}\n    pick() {\n        let links = {}, keys = arguments.length ? arguments : Object.keys( this.value );\n\n        for( let i = 0; i < keys.length; i++ ){\n            const key : string = keys[ i ];\n            links[ key ] = new PropValueLink( this, key );\n        }\n\n        return links;\n    }\n\n    /**\n     * Convert link to object to the object of links.\n     * Memorises the result, subsequent calls are cheap.\n     */\n    get $() : T extends object ? Linked.Hash<T> : never {\n        if( !this._value$ ){\n            let links : Linked.Hash<any> = this._value$ = {},\n                { value } = this;\n\n            for( let key in value ){\n                if( value.hasOwnProperty( key ) ){\n                    links[ key ] = new PropValueLink( this, key );\n                }\n            }\n        }\n\n        return this._value$ as any;\n    }\n\n    private _value$ : object\n\n    /**\n     * Validate link with validness predicate and optional custom error object. Can be chained.\n     */\n    check( whenValid : Linked.Validator<T>, error? : any ) : this {\n        if( !this.error && !whenValid( this.value ) ){\n            this.error = error || whenValid.error || defaultError;\n        }\n\n        return this;\n    }\n}\n\nexport namespace Linked {\n    export interface Validator< T >{\n        ( value : T ) : boolean\n        error? : any\n    }    \n\n    export type Transform< T > = ( value : T, event? : {} ) => T\n    export type EventHandler = ( event : {} ) => void\n\n    export type Hash<T extends object = any> = {\n        [K in keyof T] : Linked<T[K]>\n    }\n\n    /** Create linked value out of its value and the set function */ \n    export function value<T>( value : T, set : ( x : T ) => void ) : Linked<T>{\n        return new CustomValueLink( value, set );\n    }\n\n    /**\n    * Unwrap object with links, returning an object of a similar shape filled with link values.\n    */\n    export function getValues<T extends object>( links : Linked.Hash<T> ) : T {\n        return unwrap( links, 'value' ) as any;\n    }\n\n    /**\n     * Unwrap object with links, returning an object of a similar shape filled with link errors.\n     */\n    export function getErrors<T extends object>( links : Linked.Hash<T> ) : { [ name in keyof T ] : any } {\n        return unwrap( links, 'error' ) as any;\n    }\n\n    /**\n     * Return true if an object with links contains any errors.\n     */\n    export function hasErrors<T extends object>( links : Linked.Hash<T> ) : boolean {\n        for( let key in links ){\n            if( links.hasOwnProperty( key ) && links[ key ].error ){\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n    * Assing links with values from the source object.\n    */\n   export function setValues<T extends object>( links : Linked.Hash<T>, source : T ) : void {\n        if( source ){\n            for( let key in links ){\n                const sourceKey = trim( key );\n                if( source.hasOwnProperty( sourceKey ) ){\n                    const sourceVal = source[ sourceKey ];\n                    sourceVal === void 0 || links[ key ].set( sourceVal );\n                }\n            }    \n        }\n    }\n\n}\n\nclass CustomValueLink< T > extends Linked< T > {\n    set( x ){}\n\n    constructor( value : T, set : ( x : T ) => void ){\n        super( value );\n        this.set = set;\n    }\n}\n\nclass ClonedValueLink< T > extends Linked< T > {\n    set( x ){}\n\n    constructor( parent : Linked< T >, set : ( x : T ) => void ){\n        super( parent.value );\n        this.set = set;\n\n        const { error } = parent;\n        if( error ) this.error = error;\n    }\n}\n\nclass EqualsValueLink extends Linked< boolean > {\n    constructor( public parent : Linked< any >, public truthyValue ){\n        super( parent.value === truthyValue );\n    }\n\n    set( x : boolean ) : void {\n        this.parent.set( x ? this.truthyValue : null );\n    }\n}\n\nclass EnabledValueLink extends Linked< boolean > {\n    constructor( public parent : Linked< any >, public defaultValue ){\n        super( parent.value != null );\n    }\n\n    set( x : boolean ){\n        this.parent.set( x ? this.defaultValue : null );\n    }\n}\n\nclass ContainsRef extends Linked< boolean > {\n    constructor( public parent : Linked< any >, public element : any ){\n        super( parent.value.indexOf( element ) >= 0 );\n    }\n\n    set( x : boolean ){\n        var next = Boolean( x );\n\n        if( this.value !== next ){\n            var arr : any[] = this.parent.value,\n                nextValue = x ? arr.concat( this.element ) : arr.filter( el => el !== this.element );\n\n            this.parent.set( nextValue );\n        }\n    }\n}\n\nconst  defaultError = 'Invalid value';\n\n/**\n * Link to array or object element enclosed in parent link.\n * Performs purely functional update of the parent, shallow copying its value on `set`.\n */\nexport class PropValueLink< E, K > extends Linked< E > {\n    constructor( private parent : Linked< any >, public key : K ){\n        super( parent.value[ key ] );\n    }\n\n    remove(){\n        this.parent.removeAt( <any>this.key );\n    }\n\n    // Set new element value to parent array or object, performing purely functional update.\n    set( x : E ) : void {\n        if( this.value !== x ){\n            this.parent.update( value => {\n                value[ this.key ] = x;\n                return value;\n            } );\n        }\n    };\n}\n\nfunction unwrap( links : Linked.Hash, field : string) : object {\n    const values = {};\n\n    for( let key in links ){\n        if( links.hasOwnProperty( key ) ){\n            const value = links[ key ][ field ];\n            if( value !== void 0 ){\n                values[ trim( key ) ] = value;\n            }\n        }\n    }\n\n    return values;\n}\n\nfunction trim( key : string ){\n    return key[ 0 ] === '$' ? key.slice( 1 ) : key;\n}","import { abortIO, IOEndpoint, IONode, IOPromise } from './io-tools';\r\nimport { EventCallbacks, define, definitions, eventsApi, Logger, LogLevel, Messenger, MessengerDefinition, MessengersByCid, mixinRules, mixins, MixinsState, throwingLogger } from '@type-r/mixture';\r\nimport { resolveReference, Traversable } from './traversable';\r\nimport { ChildrenErrors, Validatable, ValidationError } from './validation';\r\nimport { Linked } from '@linked/value/lib';\r\n\r\nconst { trigger3, on, off } = eventsApi;\r\n/***\r\n * Abstract class implementing ownership tree, tho-phase transactions, and validation. \r\n * 1. createTransaction() - apply changes to an object tree, and if there are some events to send, transaction object is created.\r\n * 2. transaction.commit() - send and process all change events, and close transaction.\r\n */\r\n\r\n/** @private */\r\nexport interface TransactionalDefinition extends MessengerDefinition {\r\n    endpoint? : IOEndpoint\r\n}\r\n\r\nexport enum ItemsBehavior {\r\n    share       = 0b0001,\r\n    listen      = 0b0010,\r\n    persistent  = 0b0100\r\n}\r\n\r\n// Transactional object interface\r\n\r\nexport interface Transactional extends Messenger {}\r\n\r\n@define\r\n@definitions({\r\n    endpoint : mixinRules.value\r\n})\r\n@mixins( Messenger )\r\nexport abstract class Transactional implements Messenger, IONode, Validatable, Traversable {\r\n    // Mixins are hard in TypeScript. We need to copy type signatures over...\r\n    // Here goes 'Mixable' mixin.\r\n    static endpoint : IOEndpoint;\r\n    \r\n    /** @internal */\r\n    static __super__ : object;\r\n    \r\n    static mixins : MixinsState;\r\n    static define : ( definition? : TransactionalDefinition, statics? : object ) => typeof Transactional;\r\n    static extend : <T extends TransactionalDefinition>( definition? : T, statics? : object ) => any;\r\n\r\n    static onDefine( definitions : TransactionalDefinition, BaseClass : typeof Transactional ){\r\n        if( definitions.endpoint ) this.prototype._endpoint = definitions.endpoint;\r\n        Messenger.onDefine.call( this, definitions, BaseClass );\r\n    };\r\n\r\n    static onExtend( BaseClass : typeof Transactional ) : void {\r\n        // Make sure we don't inherit class factories.\r\n        if( BaseClass.create === this.create ) {\r\n            this.create = Transactional.create;\r\n        }\r\n    }\r\n\r\n    // Define extendable mixin static properties.\r\n    static create<M extends new ( ...args ) => any>( this : M, a? : any, b? : any ) : InstanceType<M> {\r\n        return new (this as any)( a, b );\r\n    }\r\n\r\n    // State accessor.\r\n    /** @internal */\r\n    readonly __inner_state__ : any;\r\n\r\n    // Shared modifier (used by collections of shared models)\r\n    /** @internal */\r\n    _shared? : number; \r\n    \r\n    dispose() : void {\r\n        if( this._disposed ) return;\r\n        \r\n        abortIO( this );\r\n        this._owner = void 0;\r\n        this._ownerKey = void 0;\r\n        this.off();\r\n        this.stopListening();\r\n        this._disposed = true;\r\n    }\r\n    \r\n    cidPrefix : string\r\n\r\n    // Unique version token replaced on change\r\n    /** @internal */\r\n    _changeToken : {} = {}\r\n\r\n    // true while inside of the transaction\r\n    /** @internal */\r\n    _transaction : boolean = false;\r\n\r\n    // Holds current transaction's options, when in the middle of transaction and there're changes but is an unsent change event\r\n    /** @internal */\r\n    _isDirty  : TransactionOptions = null;\r\n\r\n    // Backreference set by owner (Model, Collection, or other object)\r\n    /** @internal */\r\n    _owner : Owner = void 0;\r\n\r\n    // Key supplied by owner. Used by record to identify attribute key.\r\n    // Only collections doesn't set the key, which is used to distinguish collections.\r\n    /** @internal */ \r\n    _ownerKey : string = void 0;\r\n\r\n    // Name of the change event\r\n    /** @internal */\r\n    _changeEventName : string\r\n\r\n    /**\r\n     * Subsribe for the changes.\r\n     */\r\n    onChanges( handler : Function, target? : Messenger ){\r\n        on( this, this._changeEventName, handler, target );\r\n    }\r\n\r\n    /**\r\n     * Unsubscribe from changes.\r\n     */\r\n    offChanges( handler? : Function, target? : Messenger ){\r\n        off( this, this._changeEventName, handler, target );\r\n    }\r\n\r\n    /**\r\n     * Listen to changes event. \r\n     */\r\n    listenToChanges( target : Transactional, handler ){\r\n        this.listenTo( target, target._changeEventName, handler );\r\n    }\r\n\r\n    constructor( cid : string | number ){\r\n        this.cid = this.cidPrefix + cid;\r\n    }\r\n\r\n    // Deeply clone ownership subtree\r\n    abstract clone( options? : CloneOptions ) : this\r\n    \r\n    // Execute given function in the scope of ad-hoc transaction.\r\n    transaction( fun : ( self : this ) => void, options : TransactionOptions = {} ) : void{\r\n        const isRoot = transactionApi.begin( this );\r\n        const update = fun.call( this, this );\r\n        update && this.set( update );\r\n        isRoot && transactionApi.commit( this );\r\n    }\r\n\r\n    // Assign transactional object \"by value\", copying aggregated items.\r\n    assignFrom( a_source : Transactional | Object | Linked<Transactional> ) : this {\r\n        // Unpack linked value.\r\n        const source = a_source instanceof Linked ? a_source.value : a_source;\r\n\r\n        // Need to delay change events until change token will by synced.\r\n        this.transaction( () =>{\r\n            this.set( ( source as any).__inner_state__ || source, { merge : true } );\r\n\r\n            // Synchronize change tokens\r\n            const { _changeToken } = source as any;\r\n    \r\n            if( _changeToken ){\r\n                this._changeToken = _changeToken;\r\n            }    \r\n        });\r\n\r\n        return this;\r\n    }\r\n\r\n    // Create object from JSON. Throw if validation fail.\r\n    static from<T extends new ( a?, b? ) => Transactional >( this : T, json : any, { strict, ...options }  : { strict? : boolean } & TransactionOptions = {} ) :  InstanceType<T>{\r\n        const obj : Transactional = ( this as any ).create( json, { ...options, logger : strict ? throwingLogger : void 0 } );\r\n\r\n        if( strict && obj.validationError ){\r\n            obj.eachValidationError( ( error, key, obj ) => {\r\n                throw new Error( `${ obj.getClassName() }.${ key }: ${ error }` );\r\n            });\r\n        }\r\n\r\n        return obj as any;\r\n    }\r\n\r\n    // Apply bulk object update without any notifications, and return open transaction.\r\n    // Used internally to implement two-phase commit.\r\n    // Returns null if there are no any changes.\r\n    /** @internal */\r\n    abstract _createTransaction( values : any, options? : TransactionOptions ) : Transaction | void\r\n\r\n    // Apply bulk in-place object update in scope of ad-hoc transaction \r\n    abstract set( values : any, options? : TransactionOptions ) : this;\r\n\r\n    \r\n    // Parse function applied when 'parse' option is set for transaction.\r\n    parse( data : any, options? : TransactionOptions ) : any { return data }\r\n\r\n    // Convert object to the serializable JSON structure\r\n    abstract toJSON( options? : object ) : {}\r\n\r\n    /*******************\r\n     * Traversals and member access\r\n     */\r\n    \r\n    // Get object member by its key.\r\n    abstract get( key : string ) : any\r\n\r\n    // Get object member by symbolic reference.\r\n    deepGet( reference : string ) : any {\r\n        return resolveReference( this, reference, ( object, key ) => object.get ? object.get( key ) : object[ key ] );\r\n    }\r\n\r\n    //_isCollection : boolean\r\n\r\n    // Return owner skipping collections.\r\n    getOwner() : Owner {\r\n        return this._owner;\r\n    }\r\n\r\n    // Store used when owner chain store lookup failed. Static value in the prototype. \r\n    /** @internal */\r\n    _defaultStore : Transactional\r\n\r\n    // Locate the closest store. Store object stops traversal by overriding this method. \r\n    getStore() : Transactional {\r\n        const { _owner } = this;\r\n        return _owner ? <Transactional> _owner.getStore() : this._defaultStore;\r\n    }\r\n\r\n\r\n    /***************************************************\r\n     * Iteration API\r\n     */\r\n\r\n    // Loop through the members. Must be efficiently implemented in container class.\r\n\r\n    /** @internal */\r\n    _endpoint : IOEndpoint\r\n    \r\n    /** @internal */\r\n    _ioPromise : IOPromise<this>\r\n\r\n    hasPendingIO() : IOPromise<this> { return this._ioPromise; }\r\n\r\n    //fetch( options? : object ) : IOPromise<this> { throw new Error( \"Not implemented\" ); }\r\n\r\n    getEndpoint() : IOEndpoint {\r\n        return getOwnerEndpoint( this ) || this._endpoint;\r\n    }\r\n    \r\n    /*********************************\r\n     * Validation API\r\n     */\r\n\r\n    // Lazily evaluated validation error\r\n    /** @internal */\r\n    _validationError : ValidationError = void 0\r\n\r\n    // Validate ownership tree and return valudation error \r\n    get validationError() : ValidationError {\r\n        const error = this._validationError || ( this._validationError = new ValidationError( this ) );\r\n        return error.length ? error : null; \r\n    }\r\n\r\n    // Validate nested members. Returns errors count.\r\n    /** @internal */\r\n    abstract _validateNested( errors : ChildrenErrors ) : number\r\n\r\n    // Object-level validator. Returns validation error.\r\n    validate( obj? : Transactional ) : any {}\r\n\r\n    // Return validation error (or undefined) for nested object with the given key. \r\n    getValidationError( key? : string ) : any {\r\n        var error = this.validationError;\r\n        return ( key ? error && error.nested[ key ] : error ) || null;\r\n    }\r\n\r\n    // Get validation error for the given symbolic reference.\r\n    deepValidationError( reference : string ) : any {\r\n        return resolveReference( this, reference, ( object, key ) => object.getValidationError( key ) );\r\n    }\r\n\r\n    // Iterate through all validation errors across the ownership tree.\r\n    eachValidationError( iteratee : ( error : any, key : string, object : Transactional ) => void ) : void {\r\n        const { validationError } = this;\r\n        validationError && validationError.eachError( iteratee, this );\r\n    }\r\n\r\n    // Check whenever member with a given key is valid. \r\n    isValid( key? : string ) : boolean {\r\n        return !this.getValidationError( key );\r\n    }\r\n\r\n    valueOf() : Object { return this.cid; }\r\n    toString(){ return this.cid; }\r\n\r\n    // Get class name for an object instance. Works fine with ES6 classes definitions (not in IE).\r\n    getClassName() : string {\r\n        const { name } = <any>this.constructor;\r\n        if( name !== 'Subclass' ) return name;\r\n    }\r\n\r\n    // Logging interface for run time errors and warnings.\r\n    /** @internal */\r\n    abstract _log( level : LogLevel, topic : string, text : string, value : any, logger? : Logger ) : void\r\n}\r\n\r\nexport interface CloneOptions {\r\n    // 'Pin store' shall assign this._defaultStore = this.getStore();\r\n    pinStore? : boolean\r\n}\r\n\r\n// Owner must accept children update events. It's an only way children communicates with an owner.\r\n/** @private */\r\nexport interface Owner extends Traversable, Messenger {\r\n    /** @internal */\r\n    _onChildrenChange( child : Transactional, options : TransactionOptions ) : void;\r\n    \r\n    getOwner() : Owner\r\n    getStore() : Transactional\r\n}\r\n\r\n// Transaction object used for two-phase commit protocol.\r\n// Must be implemented by subclasses.\r\n// Transaction must be created if there are actual changes and when markIsDirty returns true.\r\n/** @private */ \r\nexport interface Transaction {\r\n    // Object transaction is being made on.\r\n    object : Transactional\r\n\r\n    // Send out change events, process update triggers, and close transaction.\r\n    // Nested transactions must be marked with isNested flag (it suppress owner notification).\r\n    commit( initiator? : Transactional )\r\n}\r\n\r\n// Options for distributed transaction  \r\nexport interface TransactionOptions {\r\n    // Invoke parsing \r\n    parse? : boolean\r\n\r\n    // Optional logger\r\n    logger? : Logger\r\n\r\n    // Suppress change notifications and update triggers\r\n    silent? : boolean\r\n\r\n    // Update existing transactional members in place, or skip the update (ignored by models)\r\n    merge? : boolean // =true\r\n\r\n    // Should collections remove elements in set (ignored by models)  \r\n    remove? : boolean // =true\r\n\r\n    // Always replace enclosed objects with new instances\r\n    reset? : boolean // = false\r\n\r\n    // Do not dispose aggregated members\r\n    unset? : boolean\r\n\r\n    validate? : boolean\r\n\r\n    // IO method name if the transaction is initiated as a result of IO operation\r\n    ioMethod? : 'save' | 'fetch'\r\n\r\n    // The hint for IOEndpoint\r\n    // If `true`, `record.save()` will behave as \"upsert\" operation for the records having id.\r\n    upsert? : boolean\r\n}\r\n\r\n/**\r\n * Low-level transactions API. Must be used like this:\r\n * const isRoot = begin( record );\r\n * ...\r\n * isRoot && commit( record, options );\r\n * \r\n * When committing nested transaction, the flag must be set to true. \r\n * commit( object, options, isNested ) \r\n */\r\n\r\nexport const transactionApi = {\r\n    // Start transaction. Return true if it's the root one.\r\n    /** @private */\r\n    begin( object : Transactional ) : boolean {\r\n        return object._transaction ? false : ( object._transaction = true );  \r\n    },\r\n\r\n    // Mark object having changes inside of the current transaction.\r\n    // Returns true whenever there notifications are required.\r\n    /** @private */\r\n    markAsDirty( object : Transactional, options : TransactionOptions ) : boolean {\r\n        // If silent option is in effect, don't set isDirty flag.\r\n        const dirty = !options.silent;\r\n        if( dirty ) object._isDirty = options;\r\n        \r\n        // Reset version token.\r\n        object._changeToken = {};\r\n\r\n        // Object is changed, so validation must happen again. Clear the cache.\r\n        object._validationError = void 0;\r\n\r\n        return dirty;\r\n    },\r\n\r\n    // Commit transaction. Send out change event and notify owner. Returns true if there were changes.\r\n    // Must be executed for the root transaction only.\r\n    /** @private */\r\n    commit( object : Transactional, initiator? : Transactional ){\r\n        let originalOptions = object._isDirty;\r\n\r\n        if( originalOptions ){\r\n            // Send the sequence of change events, handling chained handlers.\r\n            while( object._isDirty ){\r\n                const options = object._isDirty;\r\n                object._isDirty = null; \r\n                trigger3( object, object._changeEventName, object, options, initiator );\r\n            }\r\n            \r\n            // Mark transaction as closed.\r\n            object._transaction = false;\r\n\r\n            // Notify owner on changes out of transaction scope.  \r\n            const { _owner } = object;  \r\n            if( _owner && _owner !== <any> initiator ){ // If it's the nested transaction, owner is already aware there are some changes.\r\n                _owner._onChildrenChange( object, originalOptions );\r\n            }\r\n        }\r\n        else{\r\n            // No changes. Silently close transaction.\r\n            object._isDirty = null;\r\n            object._transaction = false;\r\n        }\r\n    },\r\n\r\n    /************************************\r\n     * Ownership management\r\n     */\r\n\r\n    // Add reference to the record.\r\n    /** @private */\r\n    aquire( owner : Owner, child : Transactional, key? : string ) : void {\r\n        if( child._owner ) throw new ReferenceError( 'Trying to aquire ownership for an object already having an owner' );\r\n\r\n        child._owner = owner;\r\n        child._ownerKey = key;\r\n    },\r\n\r\n    // Remove reference to the record.\r\n    /** @private */\r\n    free( owner : Owner, child : Transactional ) : void {\r\n        if( owner === child._owner ){\r\n            child._owner = void 0;\r\n            child._ownerKey = void 0;\r\n        }\r\n    }\r\n}\r\n\r\nfunction getOwnerEndpoint( self : Transactional ) : IOEndpoint {\r\n    // Check if we are the member of the collection...\r\n    const { collection } = self as any;\r\n    if( collection ){\r\n        return getOwnerEndpoint( collection );\r\n    }\r\n\r\n    // Now, if we're the member of the model...\r\n    if( self._owner ){\r\n        const { _endpoints } = self._owner as any;\r\n        return _endpoints && _endpoints[ self._ownerKey ];\r\n    }\r\n}\r\n","import { eventsApi } from '@type-r/mixture';\r\nimport { Owner, Transaction, Transactional, transactionApi, TransactionOptions } from \"../transactions\";\r\nconst { begin : _begin, markAsDirty : _markAsDirty, commit } = transactionApi;\r\n\r\nconst { trigger3 } = eventsApi;\r\n\r\nexport interface ConstructorsMixin {\r\n    Attributes : AttributesConstructor\r\n    AttributesCopy : AttributesCopyConstructor\r\n}\r\n\r\nexport interface ConstructorOptions extends TransactionOptions{\r\n    clone? : boolean\r\n}\r\n\r\nexport type AttributesConstructor = new ( record : AttributesContainer, values : object, options : TransactionOptions ) => AttributesValues;\r\nexport type AttributesCopyConstructor = new ( values : object ) => AttributesValues;\r\n\r\nexport interface AttributesContainer extends Transactional, Owner, ConstructorsMixin {\r\n    // Attribute descriptors.\r\n    /** @internal */\r\n    _attributes : AttributesDescriptors\r\n\r\n    // Attribute values.\r\n    attributes : AttributesValues\r\n\r\n    // Previous attribute values.\r\n    /** @internal */\r\n    _previousAttributes : AttributesValues\r\n\r\n    // Changed attributes cache. \r\n    /** @internal */\r\n    _changedAttributes : AttributesValues\r\n}\r\n\r\nexport interface AttributesValues {\r\n    [ name : string ] : any\r\n}\r\n\r\nexport interface AttributesDescriptors {\r\n    [ name : string ] : AttributeUpdatePipeline\r\n}\r\n\r\nexport interface AttributeUpdatePipeline{\r\n    doUpdate( value, record : AttributesContainer, options : TransactionOptions, nested? : Transaction[] ) : boolean\r\n}\r\n\r\n // Optimized single attribute transactional update. To be called from attributes setters\r\n // options.silent === false, parse === false. \r\nexport function setAttribute( record : AttributesContainer, name : string, value : any ) : void {\r\n    // Open the transaction.\r\n    const isRoot  = begin( record ),\r\n          options = {};\r\n\r\n    // Update attribute.      \r\n    if( record._attributes[ name ].doUpdate( value, record, options ) ){\r\n        // Notify listeners on changes.\r\n        markAsDirty( record, options );\r\n        trigger3( record, 'change:' + name, record, record.attributes[ name ], options );\r\n    }\r\n\r\n    // Close the transaction.\r\n    isRoot && commit( record );\r\n}\r\n\r\nfunction begin( record : AttributesContainer ){\r\n    if( _begin( record ) ){\r\n        record._previousAttributes = new record.AttributesCopy( record.attributes );\r\n        record._changedAttributes = null;\r\n        return true;\r\n    }\r\n    \r\n    return false;\r\n}\r\n\r\nfunction markAsDirty( record : AttributesContainer, options : TransactionOptions ){\r\n    // Need to recalculate changed attributes, when we have nested set in change:attr handler\r\n    if( record._changedAttributes ){\r\n        record._changedAttributes = null;\r\n    }\r\n\r\n    return _markAsDirty( record, options );\r\n}\r\n\r\n/**\r\n * TODO: There's an opportunity to create an optimized pipeline for primitive types and Date, which makes the majority\r\n * of attributes. It might create the major speedup.\r\n * \r\n * Create the dedicated pipeline for owned and shared attributes as well.\r\n * \r\n * Three elements of the pipeline:\r\n * - from constructor\r\n * - from assignment\r\n * - from `set`\r\n */\r\n\r\nexport const UpdateModelMixin = {\r\n// Need to override it here, since begin/end transaction brackets are overriden. \r\n    transaction( this : AttributesContainer, fun : ( self : AttributesContainer ) => void, options : TransactionOptions = {} ) : void{\r\n        const isRoot = begin( this );\r\n        fun.call( this, this );\r\n        isRoot && commit( this );\r\n    },\r\n            \r\n    // Handle nested changes. TODO: propagateChanges == false, same in transaction.\r\n    _onChildrenChange( child : Transactional, options : TransactionOptions ) : void {\r\n        const { _ownerKey } = child,\r\n              attribute = this._attributes[ _ownerKey ];\r\n\r\n        if( !attribute /* TODO: Must be an opposite, likely the bug */ || attribute.propagateChanges ) this.forceAttributeChange( _ownerKey, options );\r\n    },\r\n\r\n    // Simulate attribute change \r\n    forceAttributeChange( key : string, options : TransactionOptions = {} ){\r\n        // Touch an attribute in bounds of transaction\r\n        const isRoot = begin( this );\r\n\r\n        if( markAsDirty( this, options ) ){\r\n            trigger3( this, 'change:' + key, this, this.attributes[ key ], options );\r\n        }\r\n        \r\n        isRoot && commit( this );\r\n    },\r\n\r\n    _createTransaction( this : AttributesContainer, a_values : {}, options : TransactionOptions = {} ) : Transaction {\r\n        const isRoot = begin( this ),\r\n                changes : string[] = [],\r\n                nested : ModelTransaction[]= [],\r\n                { _attributes } = this,\r\n                values = options.parse ? this.parse( a_values, options ) : a_values;\r\n\r\n        let unknown;\r\n\r\n        if( shouldBeAnObject( this, values, options ) ){\r\n            for( let name in values ){\r\n                const spec = _attributes[ name ];\r\n\r\n                if( spec ){\r\n                    if( spec.doUpdate( values[ name ], this, options, nested ) ){\r\n                        changes.push( name );\r\n                    }\r\n                }\r\n                else{\r\n                    unknown || ( unknown = [] );\r\n                    unknown.push( `'${ name }'` );\r\n                }\r\n            }\r\n\r\n            if( unknown ){\r\n                unknownAttrsWarning( this, unknown, { values }, options );\r\n            }\r\n        }\r\n        \r\n        if( changes.length && markAsDirty( this, options ) ){\r\n            return new ModelTransaction( this, isRoot, nested, changes );\r\n        }\r\n        \r\n        // No changes, but there might be silent attributes with open transactions.\r\n        for( let pendingTransaction of nested ){\r\n            pendingTransaction.commit( this );\r\n        }\r\n\r\n        isRoot && commit( this );\r\n    }\r\n};\r\n\r\nexport function unknownAttrsWarning( record : AttributesContainer, unknown : string[], props, options ){\r\n    record._log( 'warn', 'Type-R:UnknownAttrs', `undefined attributes ${ unknown.join(', ')} are ignored.`, props, options.logger );\r\n}\r\n\r\n// One of the main performance tricks of Type-R.\r\n// Create loop unrolled constructors for internal attribute hash,\r\n// so the hidden class JIT optimization will be engaged and they will become static structs.\r\n// It dramatically improves record performance.\r\nexport function constructorsMixin( attrDefs : AttributesDescriptors ) : ConstructorsMixin {\r\n    const attrs = Object.keys( attrDefs );\r\n\r\n    const AttributesCopy : AttributesCopyConstructor = new Function( 'values', `\r\n        ${ attrs.map( attr =>`\r\n            this.${ attr } = values.${ attr };\r\n        `).join( '' ) }\r\n    `) as any;\r\n\r\n    AttributesCopy.prototype = Object.prototype;\r\n\r\n    const Attributes : AttributesConstructor = new Function( 'record', 'values', 'options', `\r\n        var _attrs = record._attributes;\r\n\r\n        ${ attrs.map( attr =>`\r\n            this.${ attr } = _attrs.${ attr }.doInit( values.${ attr }, record, options );\r\n        `).join( '' ) }\r\n    `) as any;\r\n\r\n    Attributes.prototype = Object.prototype;\r\n\r\n    return { Attributes, AttributesCopy };\r\n}\r\n\r\nexport function shouldBeAnObject( record : AttributesContainer, values : object, options ){\r\n    if( values && values.constructor === Object ) return true;\r\n\r\n    record._log( 'error', 'Type-R:InvalidObject', 'update with non-object is ignored!', { values }, options.logger );\r\n    return false;\r\n}\r\n\r\n// Transaction class. Implements two-phase transactions on object's tree. \r\n// Transaction must be created if there are actual changes and when markIsDirty returns true. \r\nexport class ModelTransaction implements Transaction {\r\n    // open transaction\r\n    constructor( public object : AttributesContainer,\r\n                 public isRoot : boolean,\r\n                 public nested : Transaction[],\r\n                 public changes : string[] ){}\r\n\r\n    // commit transaction\r\n    commit( initiator? : AttributesContainer ) : void {\r\n        const { nested, object, changes } = this;\r\n\r\n        // Commit all pending nested transactions...\r\n        for( let transaction of nested ){ \r\n            transaction.commit( object );\r\n        }\r\n\r\n        // Notify listeners on attribute changes...\r\n        // Transaction is never created when silent option is set, so just send events out.\r\n        const { attributes, _isDirty } = object;\r\n        for( let key of changes ){\r\n            trigger3( object, 'change:' + key, object, attributes[ key ], _isDirty );\r\n        }\r\n\r\n        this.isRoot && commit( object, initiator );\r\n    }\r\n}","import { IOEndpoint } from '../../io-tools';\r\nimport { LogLevel, tools, Logger } from '@type-r/mixture';\r\nimport { TransactionOptions, Transactional } from '../../transactions';\r\nimport { AttributesContainer, AttributeUpdatePipeline, ModelTransaction, setAttribute } from '../updates';\r\n\r\nconst { notEqual, assign} = tools;\r\n\r\nexport type Transform = ( this : AnyType, next : any, prev : any, record : AttributesContainer, options : TransactionOptions ) => any;\r\nexport type ChangeHandler = ( this : AnyType, next : any, prev : any, record : AttributesContainer, options : TransactionOptions ) => void;\r\n\r\nexport interface AttributeOptions {\r\n    _metatype? : typeof AnyType\r\n    validate? : ( record : AttributesContainer, value : any, key : string ) => any\r\n    isRequired? : boolean\r\n    changeEvents? : boolean\r\n\r\n    endpoint? : IOEndpoint\r\n\r\n    type? : Function\r\n    value? : any\r\n    hasCustomDefault? : boolean\r\n\r\n    parse? : Parse\r\n    toJSON? : AttributeToJSON\r\n   \r\n    getHooks? : GetHook[]\r\n    transforms? : Transform[]\r\n    changeHandlers? : ChangeHandler[]\r\n\r\n    _onChange? : ChangeAttrHandler\r\n}\r\n\r\nexport type Parse = ( value : any, key? : string ) => any;\r\nexport type GetHook = ( value : any, key? : string ) => any;\r\nexport type AttributeToJSON = ( value : any, key? : string ) => any\r\nexport type AttributeParse = ( value : any, key? : string ) => any\r\nexport type ChangeAttrHandler = ( ( value : any, attr? : string ) => void ) | string;\r\n\r\n// TODO: interface differs from options, do something obout it\r\nconst emptyOptions : TransactionOptions = {};\r\n\r\n/**\r\n * Typeless attribute. Is the base class for all other attributes.\r\n */\r\nexport class AnyType implements AttributeUpdatePipeline {\r\n    // Factory method to create attribute from options \r\n    static create : ( options : AttributeOptions, name : string ) => AnyType;\r\n    \r\n    /**\r\n     * Update pipeline functions\r\n     * =========================\r\n     *\r\n     * Stage 0. canBeUpdated( value )\r\n     * - presence of this function implies attribute's ability to update in place.\r\n     */\r\n    canBeUpdated( prev, next, options : TransactionOptions ) : any {}\r\n\r\n    /**\r\n     * Stage 1. Transform stage\r\n     */\r\n    transform( next : any, prev : any, model : AttributesContainer, options : TransactionOptions ) : any { return next; }\r\n\r\n    // convert attribute type to `this.type`.\r\n    convert( next : any, prev : any, model : AttributesContainer, options : TransactionOptions ) : any { return next; }\r\n\r\n    /**\r\n     * Stage 2. Check if attr value is changed\r\n     */\r\n    isChanged( a : any, b : any ) : boolean {\r\n        return notEqual( a, b );\r\n    }\r\n\r\n    /**\r\n     * Stage 3. Handle attribute change\r\n     */\r\n    handleChange( next : any, prev : any, model : AttributesContainer, options : TransactionOptions ) {}\r\n\r\n    /**\r\n     * End update pipeline definitions.\r\n     */\r\n\r\n    // create empty object passing backbone options to constructor...\r\n    create() { return void 0; }\r\n\r\n    // generic clone function for typeless attributes\r\n    // Must be overriden in sublass\r\n    clone( value : any, record : AttributesContainer ) {\r\n        return value;\r\n    }\r\n\r\n    dispose( record : AttributesContainer, value : any ) : void {\r\n        this.handleChange( void 0, value, record, emptyOptions );\r\n    }\r\n\r\n    validate( record : AttributesContainer, value : any, key : string ) : any {}\r\n\r\n    toJSON( value, key, options? : object ) {\r\n        return value && value.toJSON ? value.toJSON( options ) : value;\r\n    }\r\n\r\n    isMutableType(){\r\n        return this.type && this.type.prototype instanceof Transactional;\r\n    }\r\n\r\n    createPropertyDescriptor() : PropertyDescriptor | void {\r\n        const { name, getHook } = this;\r\n\r\n        if( name !== 'id' ){\r\n            return {\r\n                // call to optimized set function for single argument.\r\n                set( value ){\r\n                    setAttribute( this, name, value );\r\n                },\r\n\r\n                // attach get hook to the getter function, if it present\r\n                get : (\r\n                    getHook ?\r\n                        function() {\r\n                            return getHook.call( this, this.attributes[ name ], name );\r\n                        } :\r\n                        function() { return this.attributes[ name ]; }\r\n                ),\r\n\r\n                configurable : true\r\n            }\r\n        }\r\n    }\r\n\r\n    value : any\r\n\r\n    // Used as global default value for the given metatype\r\n    static defaultValue : any;\r\n\r\n    type : Function\r\n\r\n    initialize( name : string, options : TransactionOptions ){}\r\n\r\n    options : AttributeOptions\r\n\r\n    doInit( value, record : AttributesContainer, options : TransactionOptions ){\r\n        const v = value === void 0 ? this.defaultValue() : value,\r\n            x = this.transform( v, void 0, record, options );\r\n            \r\n        this.handleChange( x, void 0, record, options );\r\n        return x;\r\n    }\r\n\r\n    doUpdate( value, record : AttributesContainer, options : TransactionOptions, nested? : ModelTransaction[] ){\r\n        const { name } = this,\r\n            { attributes } = record,\r\n              prev = attributes[ name ];\r\n\r\n        const next = this.transform( value, prev, record, options );\r\n        attributes[ name ] = next;\r\n\r\n        if( this.isChanged( next, prev ) ) {\r\n            // Do the rest of the job after assignment\r\n            this.handleChange( next, prev, record, options );\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    propagateChanges : boolean\r\n\r\n    protected _log( level : LogLevel, code : string, text : string, value, record : AttributesContainer, logger : Logger ){\r\n        record._log( level, code, `${record.getClassName()}.${ this.name } ${ text }`, {\r\n            'New value' : value,\r\n            'Prev. value' : record.attributes[ this.name ]\r\n        }, logger );\r\n    }\r\n\r\n    defaultValue(){\r\n        return this.value;\r\n    }\r\n\r\n    constructor( public name : string, a_options : AttributeOptions ) {        \r\n        // Save original options...\r\n        this.options = a_options;\r\n\r\n        // Clone options.\r\n        const options : AttributeOptions = { getHooks : [], transforms : [], changeHandlers : [], ...a_options };\r\n        options.getHooks = options.getHooks.slice();\r\n        options.transforms = options.transforms.slice();\r\n        options.changeHandlers = options.changeHandlers.slice();\r\n\r\n        const {\r\n                  value, type, parse, toJSON, changeEvents,\r\n                  validate, getHooks, transforms, changeHandlers\r\n              } = options;\r\n\r\n        // Initialize default value...\r\n        this.value = value;\r\n        this.type  = type;\r\n\r\n        // TODO: An opportunity to optimize for attribute subtype.\r\n        if( !options.hasCustomDefault && type ){\r\n            this.defaultValue = this.create;\r\n        }\r\n        else if( tools.isValidJSON( value ) ){ \r\n            // JSON literals must be deep copied.\r\n            this.defaultValue = new Function( `return ${ JSON.stringify( value ) };` ) as any;\r\n        }\r\n        else{\r\n            this.defaultValue = this.defaultValue;\r\n        }\r\n\r\n        // Changes must be bubbled when they are not disabled for an attribute and transactional object.\r\n        this.propagateChanges = changeEvents !== false;\r\n\r\n        this.toJSON = toJSON === void 0 ? this.toJSON : toJSON;\r\n\r\n        this.validate = validate || this.validate;\r\n        \r\n        if( options.isRequired ){\r\n            this.validate = wrapIsRequired( this.validate );\r\n        }\r\n\r\n        /**\r\n         * Assemble pipelines...\r\n         */\r\n\r\n        // `convert` is default transform, which is always present...\r\n        transforms.unshift( this.convert );\r\n\r\n        // Get hook from the attribute will be used first...\r\n        if( this.get ) getHooks.unshift( this.get );\r\n\r\n        // let subclasses configure the pipeline...\r\n        this.initialize.call( this, options );\r\n\r\n        // let attribute spec configure the pipeline...\r\n        if( getHooks.length ){\r\n            const getHook = this.getHook = getHooks.reduce( chainGetHooks );\r\n\r\n            const { validate } = this;\r\n            this.validate = function( record : AttributesContainer, value : any, key : string ){\r\n                return validate.call( this, record, getHook.call( record, value, key ), key );\r\n            }\r\n        }\r\n        \r\n        this.transform = transforms.length ? transforms.reduce( chainTransforms ) : this.transform;\r\n        \r\n        this.handleChange = changeHandlers.length ? changeHandlers.reduce( chainChangeHandlers ) : this.handleChange;\r\n\r\n        // Attribute-level parse transform are attached as update hooks modifiers...\r\n        const { doInit, doUpdate } = this;\r\n        this.doInit = parse ? function( value, record : AttributesContainer, options : TransactionOptions ){\r\n            return doInit.call( this, options.parse && value !== void 0 ? parse.call( record, value, this.name ) : value, record, options );\r\n        } : doInit;\r\n\r\n        this.doUpdate = parse ? function( value, record : AttributesContainer, options : TransactionOptions, nested? : ModelTransaction[] ){\r\n            return doUpdate.call( this, options.parse && value !== void 0 ? parse.call( record, value, this.name ) : value, record, options, nested );\r\n        } : doUpdate;\r\n    }\r\n\r\n    getHook : ( value, key : string ) => any = null\r\n    get : ( value, key : string ) => any\r\n}\r\n\r\n\r\nfunction chainGetHooks( prevHook : GetHook, nextHook : GetHook ) : GetHook {\r\n    return function( value, name ) {\r\n        return nextHook.call( this, prevHook.call( this, value, name ), name );\r\n    }\r\n}\r\n\r\nfunction chainTransforms( prevTransform : Transform, nextTransform : Transform ) : Transform {\r\n    return function( next, prev, record, options ) {\r\n        return nextTransform.call( this, prevTransform.call( this, next, prev, record, options ), prev, record, options );\r\n    }\r\n}\r\n\r\nfunction chainChangeHandlers( prevHandler : ChangeHandler, nextHandler : ChangeHandler ) : ChangeHandler {\r\n    return function( next, prev, record, options ) {\r\n        prevHandler.call( this, next, prev, record, options );\r\n        nextHandler.call( this, next, prev, record, options );\r\n    }\r\n}\r\n\r\nfunction wrapIsRequired( validate ){\r\n    return function( record : AttributesContainer, value : any, key : string ){\r\n        return value ? validate.call( this, record, value, key ) : 'Required';\r\n    }\r\n}","/**\r\n * Built-in JSON types attributes: Object, Array, Number, String, Boolean, and immutable class.\r\n * \r\n * Adds type assertions, default validation, and optimized update pipeline.\r\n */\r\n\r\nimport { TransactionOptions } from '../../transactions';\r\nimport { AnyType } from './any';\r\nimport { AttributesContainer } from '../updates';\r\n\r\n/**\r\n * Custom class must be immutable class which implements toJSON() method\r\n * with a constructor taking json.\r\n */\r\nexport class ImmutableClassType extends AnyType {\r\n    type : new ( value? : any ) => {}\r\n\r\n    create(){\r\n        return new this.type();\r\n    }\r\n\r\n    convert( next : any ) : any {\r\n        return next == null || next instanceof this.type ? next : new this.type( next );\r\n    }\r\n\r\n    toJSON( value, key? : string, options? : object ){\r\n        return value && value.toJSON ? value.toJSON( options ) : value;\r\n    }\r\n\r\n    clone( value ) {\r\n        return new this.type( this.toJSON( value ) );\r\n    }\r\n\r\n    isChanged( a, b ){\r\n        return a !== b;\r\n    }\r\n}\r\n\r\n/**\r\n * Optimized attribute of primitive type.\r\n * \r\n * Primitives has specialized simplified pipeline.\r\n */\r\nexport class PrimitiveType extends AnyType {\r\n    type : NumberConstructor | StringConstructor | BooleanConstructor\r\n\r\n    dispose(){}\r\n    create() { return this.type(); }\r\n\r\n    toJSON( value ) { return value; }\r\n\r\n    convert( next ) { return next == null ? next : this.type( next ); }\r\n\r\n    isChanged( a, b ) { return a !== b; }\r\n\r\n    clone( value ) { return value; }\r\n\r\n    doInit( value, record : AttributesContainer, options : TransactionOptions ){\r\n        return this.transform( value === void 0 ? this.value : value, void 0, record, options );\r\n    }\r\n\r\n    doUpdate( value, record, options, nested ){\r\n        const   { name } = this,\r\n                { attributes } = record,\r\n                prev = attributes[ name ];\r\n        \r\n        return prev !== ( attributes[ name ] = this.transform( value, prev, record, options ) );\r\n    }\r\n\r\n    initialize(){\r\n        if( !this.options.hasCustomDefault ){\r\n            this.value = this.type();\r\n        }\r\n    }\r\n}\r\n\r\n// Number type with special validation algothim.\r\n/** @private */ \r\nexport class NumericType extends PrimitiveType {\r\n    type : NumberConstructor\r\n\r\n    create(){\r\n        return 0;\r\n    }\r\n\r\n    convert( next, prev?, record?, options? ) {\r\n        const num = next == null ? next : this.type( next );\r\n\r\n        if( num !== num ){\r\n            this._log( 'error', 'Type-R:InvalidNumber', 'Number attribute is assigned with an invalid number', next, record, options.logger );\r\n        }\r\n        \r\n        return num;\r\n    }\r\n\r\n    validate( model, value, name ) {\r\n        // Whatever is not symmetrically serializable to JSON, is not valid by default.\r\n        if( value != null && !isFinite( value ) ) {\r\n            return name + ' is not valid number';\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Compatibility wrapper for Array type.\r\n * @private\r\n */ \r\nexport class ArrayType extends AnyType {\r\n    toJSON( value ) { return value; }\r\n    dispose(){}\r\n    create(){ return []; }\r\n\r\n    convert( next, prev, record, options ) {\r\n        // Fix incompatible constructor behaviour of Array...\r\n        if( next == null || Array.isArray( next ) ) return next;\r\n\r\n        this._log( 'error', 'Type-R:InvalidArray', 'Array attribute assigned with non-array value', next, record, options.logger );\r\n\r\n        return [];\r\n    }\r\n\r\n    clone( value ){\r\n        return value && value.slice();\r\n    }\r\n}\r\n\r\nexport class ObjectType extends AnyType {\r\n    create(){ return {}; }\r\n\r\n    convert( next, prev, record, options ) {\r\n        if( next == null || typeof next === 'object' ) return next;\r\n                \r\n        this._log( 'error', 'Type-R:InvalidObject', 'Object attribute is assigned with non-object value', next, record, options.logger );\r\n        return {};\r\n    }\r\n}\r\n\r\nexport function doNothing(){}\r\n\r\nexport class FunctionType extends AnyType {\r\n    // Functions are not serialized.\r\n    toJSON( value ) { return void 0; }\r\n    create(){ return doNothing; }\r\n    dispose(){}\r\n\r\n    convert( next, prev, record, options ) {\r\n        // Fix incompatible constructor behaviour of Function...\r\n        if( next == null || typeof next === 'function' ) return next;\r\n\r\n        this._log( 'error', 'Type-R:InvalidFunction', 'Function attribute assigned with non-function value', next, record, options.logger );\r\n\r\n        return doNothing;\r\n    }\r\n\r\n    // Functions are not cloned.\r\n    clone( value ){ return value; }\r\n}\r\n","/**\r\n * Date attribute type.\r\n * \r\n * Implements validation, cross-browser compatibility fixes, variety of Date serialization formats,\r\n * and optimized update pipeline.\r\n */\r\nimport { TransactionOptions } from '../../transactions';\r\nimport { AnyType } from './any';\r\nimport { AttributesContainer } from '../updates';\r\n\r\n// Date Attribute\r\n/** @private */\r\nexport class DateType extends AnyType {\r\n    create(){\r\n        return new Date();\r\n    }\r\n    \r\n    convert( next : any, a, record, options ){\r\n        if( next == null || next instanceof Date ) return next;\r\n\r\n        const date = new Date( next ),\r\n              timestamp = date.getTime();\r\n\r\n        if( timestamp !== timestamp ){\r\n            this._log( 'error', 'Type-R:InvalidDate', 'Date attribute assigned with invalid date', next, record, options.logger );\r\n        }\r\n\r\n        return date;\r\n    }\r\n\r\n    validate( model, value, name ) {\r\n        if( value != null ){\r\n            const timestamp = value.getTime(); \r\n            if( timestamp !== timestamp ) return name + ' is Invalid Date';\r\n        }\r\n    }\r\n\r\n    toJSON( value ) { return value && value.toISOString(); }\r\n\r\n    isChanged( a, b ) { return ( a && a.getTime() ) !== ( b && b.getTime() ); }\r\n\r\n    doInit( value, record : AttributesContainer, options : TransactionOptions ){\r\n        // Date don't have handleChanges step.\r\n        return this.transform( value === void 0 ? this.defaultValue() : value, void 0, record, options );\r\n    }\r\n\r\n    doUpdate( value, record, options, nested ){\r\n        const   { name } = this,\r\n                { attributes } = record,\r\n                prev = attributes[ name ];\r\n        \r\n        // Date don't have handleChanges step.\r\n        return this.isChanged( prev , attributes[ name ] = this.transform( value, prev, record, options ) );\r\n    }\r\n\r\n    clone( value ) { return value && new Date( value.getTime() ); }\r\n    dispose(){}\r\n}\r\n\r\n// If ISO date is not supported by date constructor (such as in Safari), polyfill it.\r\nfunction supportsDate( date ){\r\n    return !isNaN( ( new Date( date ) ).getTime() );\r\n}\r\n\r\nif( !supportsDate('2011-11-29T15:52:30.5') ||\r\n    !supportsDate('2011-11-29T15:52:30.52') ||\r\n    !supportsDate('2011-11-29T15:52:18.867') ||\r\n    !supportsDate('2011-11-29T15:52:18.867Z') ||\r\n    !supportsDate('2011-11-29T15:52:18.867-03:30') ){\r\n\r\n    DateType.prototype.convert = function( value ){\r\n        return value == null || value instanceof Date ? value : new Date( safeParseDate( value ) );\r\n    }\r\n}\r\n\r\nconst numericKeys    = [ 1, 4, 5, 6, 7, 10, 11 ],\r\n      isoDatePattern = /^(\\d{4}|[+\\-]\\d{6})(?:-(\\d{2})(?:-(\\d{2}))?)?(?:T(\\d{2}):(\\d{2})(?::(\\d{2})(?:\\.(\\d{3}))?)?(?:(Z)|([+\\-])(\\d{2})(?::(\\d{2}))?)?)?$/;\r\n\r\nfunction safeParseDate( date : string ) : number {\r\n    var timestamp, struct : any[], minutesOffset = 0;\r\n\r\n    if( ( struct = isoDatePattern.exec( date )) ) {\r\n        // avoid NaN timestamps caused by undefined values being passed to Date.UTC\r\n        for( var i = 0, k; ( k = numericKeys[ i ] ); ++i ) {\r\n            struct[ k ] = +struct[ k ] || 0;\r\n        }\r\n\r\n        // allow undefined days and months\r\n        struct[ 2 ] = (+struct[ 2 ] || 1) - 1;\r\n        struct[ 3 ] = +struct[ 3 ] || 1;\r\n\r\n        if( struct[ 8 ] !== 'Z' && struct[ 9 ] !== undefined ) {\r\n            minutesOffset = struct[ 10 ] * 60 + struct[ 11 ];\r\n\r\n            if( struct[ 9 ] === '+' ) {\r\n                minutesOffset = 0 - minutesOffset;\r\n            }\r\n        }\r\n\r\n        timestamp =\r\n            Date.UTC( struct[ 1 ], struct[ 2 ], struct[ 3 ], struct[ 4 ], struct[ 5 ] + minutesOffset, struct[ 6 ],\r\n                    struct[ 7 ] );\r\n    }\r\n    else {\r\n        timestamp = Date.parse( date );\r\n    }\r\n\r\n    return timestamp;\r\n}","import { ItemsBehavior, Transactional, transactionApi, TransactionOptions } from '../../transactions';\r\nimport { ValidationError } from '../../validation';\r\nimport { AnyType } from './any';\r\nimport { AttributesContainer, ConstructorOptions } from '../updates';\r\n\r\nconst { free, aquire } = transactionApi;\r\n\r\nexport class AggregatedType extends AnyType {\r\n    type : typeof Transactional\r\n\r\n    clone( value : Transactional ) : Transactional {\r\n        return value ? value.clone() : value;\r\n    }\r\n\r\n    toJSON( x, key : string, options : object ){ return x && x.toJSON( options ); }\r\n\r\n    doInit( value, record : AttributesContainer, options : ConstructorOptions ){\r\n        const v = options.clone ? this.clone( value ) : (\r\n            value === void 0 ? this.defaultValue() : value\r\n        );\r\n\r\n        const x = this.transform( v, void 0, record, options );\r\n        this.handleChange( x, void 0, record, options );\r\n        return x;\r\n    }\r\n\r\n    doUpdate( value, record, options, nested : any[] ){ // Last to things can be wrapped to an object, either transaction or ad-hoc\r\n        const key = this.name, { attributes } = record; \r\n        const prev = attributes[ key ];\r\n        let update;\r\n\r\n        // This can be moved to transactional attribute. And chained with the rest.\r\n        if( update = this.canBeUpdated( prev, value, options ) ) { // todo - skip empty updates.\r\n            const nestedTransaction = prev._createTransaction( update, options );\r\n            if( nestedTransaction ){\r\n                if( nested ){\r\n                    nested.push( nestedTransaction );\r\n                }\r\n                else{\r\n                    nestedTransaction.commit( record );\r\n                }\r\n\r\n                if( this.propagateChanges ) return true;\r\n            }\r\n\r\n            return false;\r\n        }\r\n\r\n        const next = this.transform( value, prev, record, options );\r\n        attributes[ key ] = next;\r\n\r\n        if( this.isChanged( next, prev ) ) { // Primitives and nested comparison can be inlined.\r\n            // Do the rest of the job after assignment\r\n            this.handleChange( next, prev, record, options );\r\n\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    canBeUpdated( prev : Transactional, next : any, options : TransactionOptions ) : any {\r\n        // If an object already exists, and new value is of incompatible type, let object handle the update.\r\n        if( prev && next != null ){\r\n            if( next instanceof this.type ){\r\n                // In case if merge option explicitly specified, force merge.\r\n                if( options.merge ) return next.__inner_state__;\r\n            }\r\n            else{\r\n                return next;\r\n            }\r\n        }\r\n    }\r\n\r\n    convert( next : any, prev : any, record : AttributesContainer, options : TransactionOptions ) : Transactional {\r\n        // Invoke class factory to handle abstract classes\r\n        if( next == null ) return next;\r\n        \r\n        if( next instanceof this.type ){\r\n            if( next._shared && !( next._shared & ItemsBehavior.persistent ) ) { // TODO: think more about shared types assignment compatibility. \r\n                this._log( 'error', 'Type-R:InvalidCollection', 'aggregated collection attribute is assigned with shared collection type', next, record, options.logger );\r\n            }\r\n\r\n            // With explicit 'merge' option we need to clone an object if its previous value was 'null'.\r\n            // This is an only case we could be here when merge === true.\r\n            if( options.merge ) return next.clone();\r\n\r\n            if( next._owner ){\r\n                this._log( 'warn', 'Type-R:InvalidOwner', 'object alreay has an owner and was cloned. Use explicit object.clone() to dismiss this warning.', next, record, options.logger );\r\n                return next.clone();\r\n            }\r\n\r\n            return next;\r\n        }\r\n\r\n        return ( this.type as any).create( next, options );\r\n    }\r\n\r\n    dispose ( record : AttributesContainer, value : Transactional ){\r\n        if( value ){\r\n            this.handleChange( void 0, value, record, {} );\r\n        }\r\n    }\r\n\r\n    validate( record : AttributesContainer, value : Transactional ) : ValidationError {\r\n        var error = value && value.validationError;\r\n        if( error ) return error;\r\n    }\r\n\r\n    create() : Transactional {\r\n        return (<any>this.type).create(); // this the subclass of Transactional here.\r\n    }\r\n\r\n    initialize( options ){\r\n        options.changeHandlers.unshift( this._handleChange );\r\n    }\r\n\r\n    _handleChange( next : Transactional, prev : Transactional, record : AttributesContainer, options : TransactionOptions ){\r\n        if( prev ){\r\n            free( record, prev );\r\n            options.unset || prev.dispose();\r\n        } \r\n        \r\n        if( next ) aquire( record, next, this.name );\r\n    }\r\n}","import { eventsApi } from '@type-r/mixture';\r\nimport { ItemsBehavior, Transactional, transactionApi, TransactionOptions } from '../../transactions';\r\nimport { AnyType } from './any';\r\nimport { AttributesContainer, ConstructorOptions } from '../updates';\r\nimport { ChainableAttributeSpec } from '../attrDef';\r\n\r\nconst { on, off } = eventsApi,\r\n    { free, aquire } = transactionApi;\r\n\r\n/************************\r\n * Shared attribute definition.\r\n * - Not serialized.\r\n * - Listening to the changes.\r\n * - Doesn't take ownership when assigned with object of proper type.\r\n * - Takes ownership on objects which are converted.\r\n */\r\n\r\nconst shareAndListen = ItemsBehavior.listen | ItemsBehavior.share;\r\n\r\n/** @private */\r\nexport class SharedType extends AnyType {\r\n    type : typeof Transactional\r\n\r\n     doInit( value, record : AttributesContainer, options : ConstructorOptions ){\r\n        const v = options.clone ? this.clone( value, record ) : (\r\n            value === void 0 ? this.defaultValue() : value\r\n        );\r\n\r\n        const x = this.transform( v, void 0, record, options );\r\n        this.handleChange( x, void 0, record, options );\r\n        return x;\r\n    }\r\n\r\n    doUpdate( value, record, options, nested : any[] ){ // Last to things can be wrapped to an object, either transaction or ad-hoc\r\n        const key = this.name, { attributes } = record; \r\n        const prev = attributes[ key ];\r\n        let update;\r\n\r\n        // This can be moved to transactional attribute. And chained with the rest.\r\n        if( update = this.canBeUpdated( prev, value, options ) ) { // todo - skip empty updates.\r\n            const nestedTransaction = prev._createTransaction( update, options );\r\n            if( nestedTransaction ){\r\n                if( nested ){\r\n                    nested.push( nestedTransaction );\r\n                }\r\n                else{\r\n                    nestedTransaction.commit( record );\r\n                }\r\n\r\n                if( this.propagateChanges ) return true;\r\n            }\r\n\r\n            return false;\r\n        }\r\n\r\n        const next = this.transform( value, prev, record, options );\r\n        attributes[ key ] = next;\r\n\r\n        if( this.isChanged( next, prev ) ) { // Primitives and nested comparison can be inlined.\r\n            // Do the rest of the job after assignment\r\n            this.handleChange( next, prev, record, options );\r\n\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    clone( value : Transactional, record : AttributesContainer ) : Transactional {\r\n        // References are not cloned.\r\n        if( !value || value._owner !== record ) return value;\r\n\r\n        // Implicitly created objects are cloned.\r\n        const clone = value.clone();\r\n        aquire( record, clone, this.name );\r\n        return clone;\r\n    }\r\n\r\n    // Do not serialize by default.\r\n    toJSON(){}\r\n\r\n    canBeUpdated( prev : Transactional, next : any, options : TransactionOptions ) : any {\r\n        // If an object already exists, and new value is of incompatible type, let object handle the update.\r\n        if( prev && next != null && !( next instanceof this.type ) ){\r\n            return next;\r\n        }\r\n    }\r\n\r\n    convert( next : any, prev : any, record : AttributesContainer, options : TransactionOptions ) : Transactional {\r\n        if( next == null || next instanceof this.type ) return next;\r\n\r\n        // Convert type using implicitly created transactional object.\r\n        const implicitObject = new ( this.type as any )( next, options, shareAndListen );\r\n\r\n        // To prevent a leak, we need to take an ownership on it.\r\n        aquire( record, implicitObject, this.name );\r\n\r\n        return implicitObject;\r\n    }\r\n\r\n    // Refs are always valid.\r\n    validate( model, value, name ){}\r\n\r\n    // They are always created as null.\r\n    create() : Transactional {\r\n        return null;\r\n    }\r\n\r\n    // Listening to the change events\r\n    _handleChange( next : Transactional, prev : Transactional, record : AttributesContainer, options ){\r\n        if( prev ){\r\n            // If there was an implicitly created object, remove an ownership.\r\n            if( prev._owner === record ){\r\n                free( record, prev );\r\n                options.unset || prev.dispose();\r\n            }\r\n            else{\r\n                off( prev, prev._changeEventName, this._onChange, record );\r\n            }\r\n        }  \r\n \r\n        if( next ){\r\n            // No need to take an ownership for an implicit object - already done in convert or clone.\r\n            if( next._owner !== record ){\r\n                on( next, next._changeEventName, this._onChange, record );\r\n            }\r\n        } \r\n    }\r\n\r\n    dispose( record : AttributesContainer, value : Transactional ){\r\n        if( value ){\r\n            this.handleChange( void 0, value, record, {} );\r\n        }\r\n    }\r\n\r\n    _onChange : ( child : Transactional, options : TransactionOptions, initiator : Transactional ) => void \r\n\r\n    initialize( options ){\r\n        // Create change event handler which knows current attribute name. \r\n        const attribute = this;\r\n        this._onChange = this.propagateChanges ? function( child, options, initiator ){\r\n            this === initiator || this.forceAttributeChange( attribute.name, options );\r\n        } : ignore;\r\n\r\n        options.changeHandlers.unshift( this._handleChange );\r\n    }\r\n}\r\n\r\nfunction ignore(){}","import { PrimitiveType, NumericType, ObjectType, ImmutableClassType, FunctionType, ArrayType } from './basic';\r\nimport { DateType } from './date';\r\nimport { AnyType, AttributeOptions } from './any';\r\n\r\nexport * from './any';\r\nexport * from './basic';\r\nexport * from './date';\r\nexport * from './owned';\r\nexport * from './shared';\r\n\r\n/**\r\n * Every record attribute type has the corresponding metatype controlling its behavior.\r\n * For built-in types, Type-R uses the predefined list to resolve metatype in order to avoid global objects modifications.\r\n * For user-defined types, static `_metatype` constructor member is used.\r\n */\r\n\r\nconst builtins : Function[] = [ String, Number, Boolean, Date, Object, Array, Function ],\r\n      metatypes = [ PrimitiveType, NumericType, PrimitiveType, DateType, ObjectType, ArrayType, FunctionType ];\r\n\r\nexport function getMetatype( Ctor : Function ){\r\n    return ( Ctor as any )._metatype || resolveBuiltins( Ctor );\r\n}\r\n\r\nAnyType.create = ( options : AttributeOptions, name : string ) => {\r\n    const type = options.type,\r\n          AttributeCtor = options._metatype || ( type ? getMetatype( type ): AnyType );\r\n\r\n    return new AttributeCtor( name, options );\r\n}\r\n\r\nfunction resolveBuiltins( Ctor : Function ){\r\n    const idx = builtins.indexOf( Ctor );\r\n    return idx < 0 ? ImmutableClassType : metatypes[ idx ];\r\n}","/**\r\n * Type spec engine. Declare attributes using chainable syntax,\r\n * and returns object with spec.\r\n */\r\nimport { IOEndpoint } from '../io-tools';\r\nimport { definitionDecorator, EventMap, EventsDefinition, tools } from '@type-r/mixture';\r\nimport { Transactional } from '../transactions';\r\nimport { AttributeOptions, AttributeToJSON, getMetatype, Parse, SharedType } from './metatypes';\r\nimport { AttributesContainer } from './updates';\r\n\r\nconst { assign } = tools;\r\n\r\nexport interface AttributeCheck {\r\n    ( value : any, key : string ) : boolean\r\n    error? : any\r\n}\r\n\r\n// Infer the proper TS type from a Type-R attribute spec.\r\nexport type Infer<A> =\r\n    A extends ChainableAttributeSpec<infer F> ? TrueReturnType<F> :\r\n    A extends Function ? TrueReturnType<A> :\r\n    A | null;\r\n \r\n// Extract the proper TS return type for a function or constructor.\r\ntype TrueReturnType<F extends Function> =\r\n    F extends DateConstructor ? Date | null :\r\n    F extends ( ...args : any[] ) => infer R ? R | null :\r\n    F extends new ( ...args : any[] ) => infer R ? R | null:\r\n    void;\r\n\r\nexport class ChainableAttributeSpec<F extends Function>{\r\n    options : AttributeOptions & { type? : F };\r\n\r\n    constructor( options : AttributeOptions ) {\r\n        // Shallow copy options, fill it with defaults.\r\n        this.options = { getHooks : [], transforms : [], changeHandlers : []};\r\n        if( options ) assign( this.options, options );\r\n    }\r\n\r\n    check( check : AttributeCheck, error? : any ) : this {\r\n        function validate( model, value, name ){\r\n            if( !check.call( model, value, name ) ){\r\n                const msg = error || check.error || name + ' is not valid';\r\n                return typeof msg === 'function' ? msg.call( model, name ) : msg;\r\n            }\r\n        }\r\n\r\n        const prev = this.options.validate;\r\n\r\n        return this.metadata({\r\n            validate : prev ? (\r\n                            function( model, value, name ){\r\n                                return prev( model, value, name ) || validate( model, value, name );\r\n                            }\r\n                       ) : validate\r\n        });\r\n    }\r\n\r\n    get as() : PropertyDecorator {\r\n        return definitionDecorator( 'attributes', this );\r\n    }\r\n\r\n    get isRequired() : this {\r\n        return this.required;\r\n    }\r\n\r\n    get required() : this {\r\n        return this.metadata({ isRequired : true }); \r\n    }\r\n\r\n    endpoint( endpoint : IOEndpoint ) : this {\r\n        return this.metadata({ endpoint });\r\n    }\r\n\r\n    watcher( ref : string | ( ( value : any, key : string ) => void ) ) : this {\r\n        return this.metadata({ _onChange : ref });\r\n    }\r\n\r\n    // Attribute-specific parse transform\r\n    parse( fun : Parse ) : this {\r\n        return this.metadata({ parse : fun });\r\n    }\r\n\r\n    toJSON( fun : AttributeToJSON | false ) : this {\r\n        return this.metadata({\r\n            toJSON : typeof fun === 'function' ? fun : ( fun ? ( x, k, o ) => x && x.toJSON( o ) : emptyFunction ) \r\n        });\r\n    }\r\n\r\n    // Attribute get hook.\r\n    get( fun ) : this {\r\n        return this.metadata({\r\n            getHooks : this.options.getHooks.concat( fun )\r\n        });\r\n    }\r\n\r\n    // Attribute set hook.\r\n    set( fun ) : this {\r\n        function handleSetHook( next, prev, record : AttributesContainer, options ) {\r\n            if( this.isChanged( next, prev ) ) {\r\n                const changed = fun.call( record, next, this.name );\r\n                return changed === void 0 ? prev : this.convert( changed, prev, record, options );\r\n            }\r\n\r\n            return prev;\r\n        }\r\n\r\n        return this.metadata({\r\n            transforms : this.options.transforms.concat( handleSetHook )\r\n        });\r\n    }\r\n\r\n    changeEvents( events : boolean ) : this {\r\n        return this.metadata({ changeEvents : events });\r\n    }\r\n\r\n    // Subsribe to events from an attribute.\r\n    events( map : EventsDefinition ) : this {\r\n        const eventMap = new EventMap( map );\r\n\r\n        function handleEventsSubscribtion( next, prev, record : AttributesContainer ){\r\n            prev && prev.trigger && eventMap.unsubscribe( record, prev );\r\n\r\n            next && next.trigger && eventMap.subscribe( record, next );\r\n        }\r\n\r\n        return this.metadata({\r\n            changeHandlers : this.options.changeHandlers.concat( handleEventsSubscribtion )\r\n        });\r\n    }\r\n\r\n    // Creates a copy of the spec.\r\n    get has() : this {\r\n        return this;\r\n    }\r\n\r\n    metadata( options : object ) : this {\r\n        const cloned = new ChainableAttributeSpec( this.options );\r\n        assign( cloned.options, options );\r\n        return cloned as any;\r\n    }\r\n\r\n    value( x ) : this {\r\n        return this.metadata({ value : x, hasCustomDefault : true });\r\n    }\r\n\r\n    static from( spec : any ) : ChainableAttributeSpec<any> {\r\n        // Pass metatype through untouched...\r\n        if( spec && spec instanceof ChainableAttributeSpec ) {\r\n            return spec;\r\n        }\r\n\r\n        return typeof spec === 'function' ? type( spec ) : value( spec );\r\n    }\r\n}\r\n\r\nfunction emptyFunction(){}\r\n\r\nexport function type<F extends Function>( this : void, Type : ChainableAttributeSpec<F> | F, value? : any ) : ChainableAttributeSpec<F> {\r\n    if( Type instanceof ChainableAttributeSpec ) return Type;\r\n\r\n    const attrDef = new ChainableAttributeSpec<F>({ type : Type }),\r\n          defaultValue = Type && value === void 0 ? getMetatype( Type ).defaultValue : value;\r\n\r\n    return defaultValue === void 0 ? attrDef : attrDef.value( defaultValue );\r\n}\r\n\r\nexport function shared<C extends Function>( this : void, Constructor : C ) : ChainableAttributeSpec<C> {\r\n    return new ChainableAttributeSpec<C>({\r\n        value : null,\r\n        type : Constructor,\r\n        _metatype : SharedType\r\n    });\r\n}\r\n\r\nexport { shared as refTo }\r\n\r\n// Create attribute metatype inferring the type from the value.\r\nexport function value<T>( this : void, x : T ) : ChainableAttributeSpec<new ( ...args : any[] ) => T> {\r\n    const Type = inferType( x ),\r\n        // Transactional types inferred from values must have shared type. \r\n        AttrDef = Type && Type.prototype instanceof Transactional ? shared( Type ) :\r\n                  type( Type );\r\n\r\n    return AttrDef.value( x ) as any;\r\n}\r\n\r\n/*\r\nexport declare type InferConstructor<T> = \r\n    T extends number ? NumberConstructor :\r\n    T extends string ? StringConstructor :\r\n    T extends boolean ? BooleanConstructor :\r\n    T extends Date ? DateConstructor :\r\n    T extends Transactional ? new ( ...args : any[] ) => */\r\n\r\nfunction inferType( value : any ) : Function {\r\n    switch( typeof value ) {\r\n        case 'number' :\r\n            return Number;\r\n        case 'string' :\r\n            return String;\r\n        case 'boolean' :\r\n            return Boolean;\r\n        case 'function' :\r\n            return Function;\r\n        case 'undefined' :\r\n            return void 0;\r\n        case 'object' :\r\n            return value ? <any> value.constructor : void 0;\r\n    }\r\n}","import { IOEndpoint } from '../io-tools';\r\nimport { eventsApi, tools as _ } from '@type-r/mixture';\r\nimport { CompiledReference } from '../traversable';\r\nimport { ChainableAttributeSpec } from './attrDef';\r\nimport { AnyType } from './metatypes';\r\nimport { ConstructorsMixin, constructorsMixin } from './updates';\r\n\r\nexport interface ModelAttributesMixin extends ConstructorsMixin {\r\n    // Attributes descriptors\r\n    _attributes : AttributeDescriptors\r\n    _attributesArray : AnyType[]\r\n    \r\n    // Attribute's property descriptors\r\n    properties : PropertyDescriptorMap\r\n\r\n    // Event map for record's local events.\r\n    _localEvents? : eventsApi.EventMap,\r\n\r\n    _endpoints : { [ name : string ] : IOEndpoint }\r\n}\r\n\r\nexport interface AttributeDescriptors {\r\n    [ name : string ] : AnyType\r\n}\r\n\r\n// Create attribute from the type spec.\r\nexport function createAttribute( spec : any, name : string ) : AnyType {\r\n    return AnyType.create( ChainableAttributeSpec.from( spec ).options, name );\r\n}\r\n\r\n// Create record mixin from the given record's attributes definition\r\nexport function createAttributesMixin( attributesDefinition : object, baseClassAttributes : AttributeDescriptors ) : ModelAttributesMixin {\r\n    const myAttributes = _.transform( {} as AttributeDescriptors, attributesDefinition, createAttribute ),\r\n          allAttributes = _.defaults( {} as AttributeDescriptors, myAttributes, baseClassAttributes );\r\n\r\n    const ConstructorsMixin = constructorsMixin( allAttributes );\r\n\r\n    return {\r\n        ...ConstructorsMixin,\r\n        _attributes : new ConstructorsMixin.AttributesCopy( allAttributes ),\r\n        _attributesArray : Object.keys( allAttributes ).map( key => allAttributes[ key ] ),\r\n        properties : _.transform( <PropertyDescriptorMap>{}, myAttributes, x => x.createPropertyDescriptor() ),\r\n        ...localEventsMixin( myAttributes ),\r\n        _endpoints : _.transform( {}, allAttributes, attrDef => attrDef.options.endpoint )\r\n    }            \r\n}\r\n\r\ninterface LocalEventsMixin {\r\n    _localEvents? : eventsApi.EventMap\r\n}\r\n\r\nfunction localEventsMixin( attrSpecs : AttributeDescriptors ) : LocalEventsMixin {\r\n    let _localEvents : eventsApi.EventMap;\r\n\r\n    for( var key in attrSpecs ){\r\n        const attribute = attrSpecs[ key ],\r\n            { _onChange } = attribute.options; \r\n\r\n        if( _onChange ){\r\n            _localEvents || ( _localEvents = new eventsApi.EventMap() );\r\n\r\n            _localEvents.addEvent( 'change:' + key,\r\n                typeof _onChange === 'string' ?\r\n                    createWatcherFromRef( _onChange, key ) : \r\n                    wrapWatcher( _onChange, key ) );\r\n        }\r\n    }\r\n\r\n    return _localEvents ? { _localEvents } : {};\r\n}\r\n\r\nfunction wrapWatcher( watcher, key ){\r\n    return function( record, value ){\r\n        watcher.call( record, value, key );\r\n    } \r\n}\r\n\r\nfunction createWatcherFromRef( ref : string, key : string ){\r\n    const { local, resolve, tail } = new CompiledReference( ref, true );\r\n    return local ?\r\n        function( record, value ){\r\n            record[ tail ]( value, key );\r\n        } :\r\n        function( record, value ){\r\n            resolve( record )[ tail ]( value, key );\r\n        }\r\n}","import { IOEndpoint, IONode, IOOptions, IOPromise, startIO } from '../io-tools';\r\nimport { TransactionOptions } from '../transactions';\r\n\r\nexport interface IOModel extends IONode {\r\n    getEndpoint() : IOEndpoint\r\n    save( options? : object ) : IOPromise<this>\r\n    fetch( options? : object ) : IOPromise<this>\r\n    destroy( options? : object ) : IOPromise<this>\r\n    toJSON( options? : object ) : any\r\n    parse( data : any, options? : object ) : any\r\n    isNew() : boolean\r\n    id : string | number\r\n    set( json : object, options : TransactionOptions ) : this\r\n}\r\n\r\nexport const IOModelMixin = {\r\n    save( this : IOModel, options : IOOptions = {} ){\r\n        const endpoint = this.getEndpoint(),\r\n              json = this.toJSON({ ioMethod : 'save', ...options });\r\n\r\n        return startIO(\r\n            this,\r\n            this.isNew() ?\r\n                endpoint.create( json, options, this ) :\r\n                endpoint.update( this.id, json, options, this ),\r\n            options,\r\n\r\n            update => {\r\n                this.set( update, {\r\n                    parse : true,\r\n                    ioMethod : 'save',\r\n                    ...options\r\n                } );\r\n            }\r\n        );\r\n    },\r\n\r\n    fetch( options : IOOptions = {} ){\r\n        return startIO(\r\n            this,\r\n            this.getEndpoint().read( this.id, options, this ),\r\n            options,\r\n\r\n            json => this.set( json, { parse : true, ioMethod : 'fetch', ...options } )\r\n        );\r\n    },\r\n\r\n    destroy( options : IOOptions = {} ){  \r\n        return startIO(\r\n            this,\r\n            this.getEndpoint().destroy( this.id, options, this ),\r\n            options,\r\n\r\n            () => {\r\n                const { collection } = this;\r\n                if( collection ){\r\n                    collection.remove( this, options );\r\n                }\r\n                else{\r\n                    this.dispose();\r\n                }\r\n\r\n                return this;\r\n            }\r\n        )\r\n    }\r\n}","/**\r\n * Model core implementing transactional updates.\r\n * The root of all definitions. \r\n */\r\n\r\nimport { CollectionConstructor } from '../collection';\r\nimport { IOEndpoint } from '../io-tools';\r\nimport { define, definitions, isProduction, Logger, logger, LogLevel, mixinRules, TheType, tools } from '@type-r/mixture';\r\nimport { CloneOptions, Owner, Transaction, Transactional, TransactionalDefinition, TransactionOptions } from '../transactions';\r\nimport { ChildrenErrors } from '../validation';\r\nimport { Infer, type } from './attrDef';\r\nimport { IOModel, IOModelMixin } from './io-mixin';\r\nimport { AggregatedType, AnyType } from './metatypes';\r\nimport { AttributesConstructor, AttributesContainer, AttributesCopyConstructor, AttributesValues, setAttribute, shouldBeAnObject, unknownAttrsWarning, UpdateModelMixin } from './updates';\r\nimport { LinkedModelHash } from './linked-attrs';\r\n\r\n\r\nconst { assign, isEmpty } = tools;\r\n\r\n/*******************************************************\r\n * Model core implementation\r\n */\r\n\r\nexport interface ConstructorOptions extends TransactionOptions{\r\n    clone? : boolean\r\n}\r\n\r\n// Client unique id counter\r\nlet _cidCounter : number = 0;\r\n\r\n/***************************************************************\r\n * Model Definition as accepted by Model.define( definition )\r\n */\r\nexport interface ModelDefinition extends TransactionalDefinition {\r\n    idAttribute? : string\r\n    attributes? : AttributesValues\r\n    collection? : object\r\n    Collection? : typeof Transactional\r\n}\r\n\r\nexport interface ModelConstructor<A> extends TheType<typeof Model> {\r\n    new ( attrs? : Partial<A>, options? : object ) : Model & A\r\n    prototype : Model\r\n    Collection : CollectionConstructor<Model & A>\r\n}\r\n\r\nexport type InferAttrs<A extends object> = {\r\n    [K in keyof A]: Infer<A[K]>\r\n};\r\n\r\nexport type LinkedAttributes<M extends { attributes : object }> = LinkedModelHash<InferAttrs<M['attributes']>>\r\nexport type AttributesMixin<M extends { attributes : object }> = InferAttrs<M['attributes']> & { readonly $ : LinkedAttributes<M> }\r\n\r\n@define({\r\n    // Default client id prefix \r\n    cidPrefix : 'm',\r\n\r\n    // Name of the change event\r\n    _changeEventName : 'change',\r\n\r\n    // Default id attribute name\r\n    idAttribute : 'id'\r\n})\r\n@definitions({\r\n    defaults : mixinRules.merge,\r\n    attributes : mixinRules.merge,\r\n    collection : mixinRules.merge,\r\n    Collection : mixinRules.value,\r\n    idAttribute : mixinRules.protoValue\r\n})\r\nexport class Model extends Transactional implements IOModel, AttributesContainer, Iterable<any> {\r\n    /** @internal */\r\n    static _metatype = AggregatedType;\r\n\r\n    // Hack\r\n    static onDefine( definition, BaseClass ){}\r\n\r\n    static Collection : CollectionConstructor;\r\n    static DefaultCollection : CollectionConstructor;\r\n    \r\n    // Attribute type for the record id.\r\n    static id = type( String ).value( null );\r\n    \r\n    // Lazy object reference, serializable as id.\r\n    static get ref(){\r\n        return type( this )\r\n            .toJSON( x => x ? x.id : null )\r\n            .parse( x => {\r\n                return { [ this.prototype.idAttribute ] : x };\r\n            });\r\n    }\r\n\r\n    static extendAttrs<T extends typeof Model, A extends object>( this : T, attrs : A ) : ModelConstructor<InstanceType<T> & InferAttrs<A>> {\r\n        return this.defaults( attrs ) as any;\r\n    }\r\n\r\n    static defaults( attrs : AttributesValues ) : typeof Model {\r\n        return this.extend({ attributes : attrs }) as any;\r\n    }\r\n    \r\n    static attributes : AttributesValues\r\n\r\n\r\n    _attributes$ : object = void 0\r\n    __Attributes$ : new ( model : Model ) => object\r\n\r\n    /** @internal */\r\n    get $() : any {\r\n        return this._attributes$ || ( this._attributes$ = new this.__Attributes$( this ) )\r\n    }\r\n\r\n    /********************\r\n     * IO Methods\r\n     */\r\n    /** @internal */\r\n     _endpoints : { [ name : string ] : IOEndpoint }\r\n\r\n    /***********************************\r\n     * Core Members\r\n     */\r\n    previousAttributes(){ return new this.AttributesCopy( this._previousAttributes ); } \r\n\r\n    // Polymorphic accessor for aggregated attribute's canBeUpdated().\r\n    /** @internal */\r\n    get __inner_state__(){ return this.attributes; }\r\n\r\n    get changed(){\r\n        let changed = this._changedAttributes;\r\n\r\n        if( !changed ){\r\n            const prev = this._previousAttributes;\r\n            changed = {};\r\n\r\n            const { attributes } = this;\r\n\r\n            for( let attr of this._attributesArray ){\r\n                const key = attr.name,\r\n                    value = attributes[ key ];\r\n\r\n                if( attr.isChanged( value, prev[ key ] ) ){\r\n                    changed[ key ] = value;\r\n                }\r\n            }\r\n\r\n            this._changedAttributes = changed;\r\n        }\r\n\r\n        return changed;    \r\n    }\r\n\r\n    changedAttributes( diff? : {} ) : boolean | {} {\r\n        if( !diff ) return this.hasChanged() ? { ...this.changed } : false;\r\n\r\n        var val, changed : {} | boolean = false,\r\n            old          = this._transaction ? this._previousAttributes : this.attributes,\r\n            attrSpecs    = this._attributes;\r\n\r\n        for( var attr in diff ){\r\n            if( !attrSpecs[ attr ].isChanged( old[ attr ], ( val = diff[ attr ] ) ) ) continue;\r\n            (changed || (changed = {}))[ attr ] = val;\r\n        }\r\n\r\n        return changed;        \r\n    }\r\n\r\n    hasChanged( key? : string ) : boolean {\r\n        const { _previousAttributes } = this;\r\n        if( !_previousAttributes ) return false;\r\n\r\n        return key ?\r\n                this._attributes[ key ].isChanged( this.attributes[ key ], _previousAttributes[ key ] ) :\r\n                !isEmpty( this.changed );\r\n    }\r\n\r\n    previous( key : string ) : any {\r\n        if( key ){\r\n            const { _previousAttributes } = this;\r\n            if( _previousAttributes ) return _previousAttributes[ key ];\r\n        }\r\n        \r\n        return null;\r\n    }\r\n\r\n    isNew() : boolean {\r\n        return this.id == null;\r\n    }\r\n\r\n    has( key : string ) : boolean {\r\n        return this[ key ] != void 0;\r\n    }\r\n\r\n    // Return attribute value, setting an attribute to undefined.\r\n    // TODO: If attribute was aggregated, don't dispose it.\r\n    unset( key : string, options? ) : any {\r\n        const value = this[ key ];\r\n        this.set({ [ key ] : void 0 }, { unset : true, ...options });\r\n        return value;\r\n    }\r\n\r\n    // Undocumented. Move to NestedTypes?\r\n    clear( options? ) : this {\r\n        const nullify = options && options.nullify;\r\n\r\n        this.transaction( () =>{\r\n            this.forEach( ( value, key ) => this[ key ] = nullify ? null : void 0 );\r\n        }, options );\r\n\r\n        return this;\r\n    }\r\n\r\n    // Returns Model owner skipping collections. TODO: Move out\r\n    getOwner() : Owner {\r\n        const owner : any = this._owner;\r\n\r\n        // If there are no key, owner must be transactional object, and it's the collection.\r\n        // We don't expect that collection can be the member of collection, so we're skipping just one level up. An optimization.\r\n        return this._ownerKey ? owner : owner && owner._owner;\r\n    }\r\n\r\n    /***********************************\r\n     * Identity managements\r\n     */\r\n\r\n    // Id attribute name ('id' by default)\r\n    idAttribute : string;\r\n\r\n    // Fixed 'id' property pointing to id attribute\r\n    get id() : string { return this.attributes[ this.idAttribute ]; }\r\n    set id( x : string ){ setAttribute( this, this.idAttribute, x ); }\r\n\r\n    /***********************************\r\n     * Dynamically compiled stuff\r\n     */\r\n\r\n    // Attributes specifications\r\n    /** @internal */\r\n    _attributes : { [ key : string ] : AnyType }\r\n\r\n    /** @internal */\r\n    _attributesArray : AnyType[]\r\n\r\n    // Attributes object copy constructor\r\n    Attributes : AttributesConstructor\r\n    AttributesCopy : AttributesCopyConstructor\r\n\r\n    // Create record default values, optionally augmenting given values.\r\n    defaults( values = {} ){\r\n        const defaults = {},\r\n            { _attributesArray } = this;\r\n\r\n        for( let attr of _attributesArray ){\r\n            const key = attr.name,\r\n            value = values[ key ];\r\n\r\n            defaults[ key ] = value === void 0 ? attr.defaultValue() : value;\r\n        }\r\n\r\n        return defaults;\r\n    }\r\n\r\n    /***************************************************\r\n     * Model construction\r\n     */\r\n    // Create record, optionally setting an owner\r\n    constructor( a_values? : any, a_options? : ConstructorOptions ){\r\n        super( _cidCounter++ );\r\n        this.attributes = {};\r\n        \r\n        const options = a_options || {},\r\n              values = ( options.parse ? this.parse( a_values, options ) :  a_values ) || {};\r\n\r\n        isProduction || typeCheck( this, values, options );\r\n\r\n        this._previousAttributes = this.attributes = new this.Attributes( this, values, options );\r\n\r\n        this.initialize( a_values, a_options );\r\n\r\n        if( this._localEvents ) this._localEvents.subscribe( this, this );\r\n    }\r\n\r\n    // Initialization callback, to be overriden by the subclasses \r\n    initialize( values? : Partial<this>, options? ){}\r\n\r\n    // Deeply clone record, optionally setting new owner.\r\n    clone( options : CloneOptions = {} ) : this {\r\n        const copy : this = new (<any>this.constructor)( this.attributes, { clone : true } );\r\n        \r\n        if( options.pinStore ) copy._defaultStore = this.getStore();\r\n\r\n        return copy;\r\n    }\r\n\r\n    /** @internal */\r\n    _validateNested( errors : ChildrenErrors ) : number {\r\n        var length    = 0;\r\n\r\n        const { attributes } = this;\r\n\r\n        for( let attribute of this._attributesArray ){\r\n            const { name } = attribute,\r\n                error = attribute.validate( this, attributes[ name ], name );\r\n\r\n            if( error ){\r\n                errors[ name ] = error;\r\n                length++;\r\n            }\r\n        }\r\n\r\n        return length;\r\n    }\r\n\r\n    // Get attribute by key\r\n    get( key : string ) : any {\r\n        return this[ key ];\r\n    }\r\n\r\n    // Apply bulk in-place object update in scope of ad-hoc transaction \r\n    set( values : any, options? : TransactionOptions ) : this {\r\n        if( values ){ \r\n            const transaction = this._createTransaction( values, options );\r\n            transaction && transaction.commit();\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Serialization control\r\n     */\r\n\r\n    // Default record-level serializer, to be overriden by subclasses \r\n    toJSON( options? : TransactionOptions ) : any {\r\n        const json = {},\r\n            { attributes } = this;\r\n\r\n        for( let attribute of this._attributesArray ){\r\n            const { name } = attribute,\r\n                value = attributes[ name ];\r\n\r\n            if( value !== void 0 ){\r\n                // ...serialize it according to its spec.\r\n                const asJson = attribute.toJSON.call( this, value, name, options );\r\n\r\n                // ...skipping undefined values. Such an attributes are excluded.\r\n                if( asJson !== void 0 ) json[ name ] = asJson; \r\n            }\r\n        }\r\n\r\n        return json;\r\n    }\r\n    \r\n    // Default record-level parser, to be overriden by the subclasses.\r\n    parse( data, options? : TransactionOptions ){\r\n        return data;\r\n    }\r\n\r\n    /**\r\n     * Transactional control\r\n     */\r\n    deepSet( name : string, value : any, options? : any ){\r\n        // Operation might involve series of nested object updates, thus it's wrapped in transaction.\r\n        this.transaction( () => {\r\n            const path  = name.split( '.' ),\r\n                l     = path.length - 1,\r\n                attr  = path[ l ];\r\n\r\n            let model = this;\r\n\r\n            // Locate the model, traversing the path.\r\n            for( let i = 0; i < l; i++ ){\r\n                const key = path[ i ];\r\n\r\n                // There might be collections in path, so use `get`.\r\n                let next    = model.get ? model.get( key ) : model[ key ];\r\n\r\n                // Create models, if they are not exist.\r\n                if( !next ){\r\n                    const attrSpecs = model._attributes;\r\n                    if( attrSpecs ){\r\n                        // If current object is model, create default attribute\r\n                        var newModel = attrSpecs[ key ].create();\r\n\r\n                        // If created object is model, nullify attributes when requested\r\n                        if( options && options.nullify && newModel._attributes ){\r\n                            newModel.clear( options );\r\n                        }\r\n\r\n                        model[ key ] = next = newModel;\r\n                    }\r\n                    // Silently fail in other case.\r\n                    else return;\r\n                }\r\n                \r\n                model = next;\r\n            }\r\n\r\n            // Set model attribute.\r\n            if( model.set ){\r\n                model.set({ [ attr ] : value }, options );\r\n            }\r\n            else{\r\n                model[ attr ] = value;\r\n            }\r\n        });\r\n\r\n        return this;\r\n    }\r\n            \r\n    // Returns owner without the key (usually it's collection)\r\n    get collection() : any {\r\n        return this._ownerKey ? null : this._owner;\r\n    }\r\n\r\n    // Dispose object and all childrens\r\n    dispose(){\r\n        if( this._disposed ) return;\r\n\r\n        const { attributes } = this;\r\n\r\n        for( let attr of this._attributesArray ){\r\n            attr.dispose( this, attributes[ attr.name ] );\r\n        }\r\n        \r\n        super.dispose();\r\n    }\r\n\r\n    /** @internal */\r\n    _log( level : LogLevel, topic: string, text : string, props : object, a_logger? : Logger ) : void {\r\n        ( a_logger || logger ).trigger( level, topic, this.getClassName() + ' ' + text, {\r\n            ...props,\r\n            'Model' : this,\r\n            'Attributes definition' : this._attributes\r\n        });\r\n    }\r\n\r\n    getClassName() : string {\r\n        return super.getClassName() || 'Model';\r\n    }\r\n\r\n    /** @internal */\r\n    _createTransaction( values : object, options : TransactionOptions ) : Transaction { return void 0; }\r\n    // Simulate attribute change \r\n    forceAttributeChange : ( key : string, options : TransactionOptions ) => void\r\n\r\n    /** @internal */\r\n    _onChildrenChange : ( child : Transactional, options : TransactionOptions ) => void\r\n\r\n\r\n    /**\r\n     * Map methods\r\n     */\r\n\r\n    forEach( iteratee : ( value? : any, key? : string ) => void, context? : any ){\r\n        const fun = context !== void 0 ? ( v, k ) => iteratee.call( context, v, k ) : iteratee,\r\n            { attributes } = this;\r\n\r\n        for( const key in this.attributes ){\r\n            const value = attributes[ key ];\r\n            if( value !== void 0 ) fun( value, key );\r\n        }\r\n    }\r\n\r\n    mapObject( a_fun : ( value, key ) => any, context? : any ) : object {\r\n        const fun = context === void 0 ? a_fun : a_fun.bind( context );\r\n        return tools.transform( {}, this.attributes, fun );\r\n    }\r\n\r\n    [ Symbol.iterator ](){\r\n        return new ModelEntriesIterator( this );\r\n    }\r\n\r\n    entries(){\r\n        return new ModelEntriesIterator( this );\r\n    }\r\n\r\n    // Get array of attribute keys (Model) or record ids (Collection) \r\n    keys() : string[] {\r\n        const keys : string[] = [];\r\n\r\n        this.forEach( ( value, key ) => keys.push( key ) );\r\n\r\n        return keys;\r\n    }\r\n};\r\n\r\nexport interface Model extends IOModel {}\r\nexport interface Model extends AttributesContainer {}\r\n\r\n\r\nassign( Model.prototype, UpdateModelMixin, IOModelMixin );\r\n\r\n/***********************************************\r\n * Helper functions\r\n */\r\n\r\nclass BaseModelAttributes {\r\n    id : string\r\n\r\n    constructor( record : Model, x : AttributesValues, options : TransactionOptions ) {\r\n        this.id = x.id;\r\n    }\r\n}\r\n\r\nModel.prototype.Attributes = BaseModelAttributes;\r\n\r\nclass BaseModelAttributesCopy {\r\n    id : string\r\n\r\n    constructor( x : AttributesValues ) {\r\n        this.id = x.id;\r\n    }\r\n}\r\n\r\nModel.prototype.AttributesCopy = BaseModelAttributesCopy;\r\n\r\nconst IdAttribute = AnyType.create({ value : void 0 }, 'id' );\r\nModel.prototype._attributes = { id : IdAttribute };\r\nModel.prototype._attributesArray = [ IdAttribute ];\r\n\r\nfunction typeCheck( record : Model, values : object, options ){\r\n    if( shouldBeAnObject( record, values, options ) ){\r\n        const { _attributes } = record;\r\n        let unknown : string[];\r\n\r\n        for( let name in values ){\r\n            if( !_attributes[ name ] ){\r\n                unknown || ( unknown = [] );\r\n                unknown.push( `'${ name }'` );\r\n            }\r\n        }\r\n\r\n        if( unknown ){\r\n            unknownAttrsWarning( record, unknown, { values }, options );\r\n        }\r\n    }\r\n}\r\n\r\nexport class ModelEntriesIterator implements Iterator<[string, any]> {\r\n    private idx = 0;\r\n    \r\n    constructor( private readonly record : Model){}\r\n\r\n    next() : IteratorResult<[string, any]> {\r\n        const { record } = this,\r\n            metatype = record._attributesArray[ this.idx++ ];\r\n\r\n        return {\r\n            done : !metatype,\r\n            value : metatype ? [ metatype.name, record[ metatype.name ] ] : void 0\r\n        };\r\n    }\r\n}","import { Model } from './model'\r\nimport { Linked } from '@linked/value'\r\nimport { Transactional } from '../transactions';\r\n\r\nexport function addAttributeLinks( Class : typeof Model ){\r\n    const { prototype } = Class;\r\n    const { _attributesArray } = prototype;\r\n\r\n    const AttributeRefs = new Function('model', `\r\n        this._model = model;\r\n        ${ _attributesArray.map( ({ name }) => `this.$${name} = void 0; `).join( '\\n' )}\r\n    `)\r\n\r\n    AttributeRefs.prototype.__ModelAttrRef = LinkedAttr;\r\n\r\n    for( let attr of _attributesArray ){\r\n        const { name } = attr;\r\n        \r\n        Object.defineProperty( AttributeRefs.prototype, name, {\r\n            get : new Function( attr.isMutableType() ? `\r\n                var cached = this.$${name},\r\n                    value = this._model.${name},\r\n                    token = value && value._changeToken;\r\n\r\n                return cached && cached._token === token ? cached :\r\n                    ( this.$${name} = new this.__ModelAttrRef( this._model, '${name}', value, token ) );\r\n            ` : `\r\n                var cached = this.$${name};\r\n\r\n                return cached && cached.value === this._model.${name} ? cached :\r\n                    ( this.$${name} = new this.__ModelAttrRef( this._model, '${name}', this._model.${name} ) );\r\n            `) as any\r\n        });\r\n    }\r\n\r\n    prototype.__Attributes$ = AttributeRefs as any;\r\n}\r\n\r\nexport type LinkedModelHash<T extends object>= {\r\n    readonly [ K in keyof T ] : LinkedAttr<T[K]>\r\n}\r\n\r\nexport class LinkedAttr<T> extends Linked<T> {\r\n    constructor( protected model : Model, protected attr : string, value, protected _token ){\r\n        super( value );\r\n    }\r\n\r\n    set( x : T ){\r\n        this.model[ this.attr ] = x;\r\n    }\r\n\r\n    _error : any\r\n\r\n    get error(){\r\n        return this._error || ( this._error = this.model.getValidationError( this.attr ) );\r\n    }\r\n\r\n    set error( x : any ){\r\n        this._error = x;\r\n    }\r\n\r\n    // Attribute's descriptor.\r\n    get descriptor(){\r\n        return this.model._attributes[ this.attr ];\r\n    }\r\n}\r\n\r\nObject.defineProperty( LinkedAttr.prototype, '_changeToken', { value : null } );","import { define, predefine, tools } from '@type-r/mixture';\r\nimport { Transactional } from '../transactions';\r\nimport { type } from './attrDef';\r\nimport { createAttributesMixin } from './mixin';\r\nimport { InferAttrs, Model, ModelConstructor, ModelDefinition } from './model';\r\n\r\nimport { addAttributeLinks } from './linked-attrs'\r\n\r\nexport * from './attrDef';\r\nexport * from './metatypes';\r\nexport { AttributesMixin, LinkedAttributes, InferAttrs, ModelConstructor } from './model';\r\nexport { Model };\r\n\r\nconst { assign, defaults } = tools;\r\n\r\nexport function attributes<D extends object>( attrDefs : D ) : ModelConstructor<InferAttrs<D>> {\r\n    @define class DefaultModel extends Model {\r\n        static attributes = attrDefs;\r\n    }\r\n\r\n    return DefaultModel as any;\r\n}\r\n\r\nModel.onExtend = function( this : typeof Model, BaseClass : typeof Model ){\r\n    Transactional.onExtend.call( this, BaseClass );\r\n\r\n    // Create the default collection\r\n    const Class = this;\r\n\r\n    @predefine class DefaultCollection extends BaseClass.Collection {\r\n        static model = Class;\r\n    }\r\n\r\n    this.DefaultCollection = DefaultCollection;\r\n\r\n    // If there are no collection defined in statics, use the default collection.\r\n    // It will appear in onDefine's definition, overriding all other settings.\r\n    if( Class.Collection === BaseClass.Collection ){\r\n        this.Collection = DefaultCollection;\r\n    }\r\n}\r\n\r\nModel.onDefine = function( definition : ModelDefinition, BaseClass : typeof Model ){\r\n    const baseProto : Model = BaseClass.prototype;\r\n\r\n    // Compile attributes spec, creating definition mixin.\r\n    const { properties, _localEvents, ...dynamicMixin } = createAttributesMixin( this.attributes = getAttributes( definition ), baseProto._attributes );\r\n    assign( this.prototype, dynamicMixin );\r\n    \r\n    definition.properties = defaults( definition.properties || {}, properties );\r\n    definition._localEvents = _localEvents;\r\n    \r\n    Transactional.onDefine.call( this, definition, BaseClass );\r\n\r\n    // Finalize the definition of the default collection.\r\n    this.DefaultCollection.define( definition.collection || {} );\r\n\r\n    // assign collection from the definition.\r\n    this.Collection = definition.Collection;\r\n    this.Collection.prototype.model = this;\r\n\r\n    if( definition.endpoint ) this.Collection.prototype._endpoint = definition.endpoint;\r\n\r\n    addAttributeLinks( this );\r\n}\r\n\r\nfunction getAttributes({ defaults, attributes, idAttribute } : ModelDefinition ) {\r\n    const definition = attributes || defaults || {};\r\n    \r\n    // If there is an undeclared idAttribute, add its definition as untyped generic attribute.\r\n    if( idAttribute && !( idAttribute in definition ) ){\r\n        definition[ idAttribute ] = void 0;\r\n    }\r\n\r\n    return definition;\r\n}\r\n\r\ndeclare var Reflect;\r\n\r\nexport function auto( value : any ) : PropertyDecorator;\r\nexport function auto( proto : object, attrName : string ) : void;\r\nexport function auto( proto, attrName? : string ) : any {\r\n    if( typeof Reflect !== 'undefined' && Reflect.getMetadata ){\r\n        if( attrName ){\r\n            type( Reflect.getMetadata( \"design:type\", proto, attrName ) ).as( proto, attrName );\r\n        }\r\n        else{\r\n            const value = proto;\r\n            return ( proto : object, attrName : string ) : void => {\r\n                type( Reflect.getMetadata( \"design:type\", proto, attrName ) ).value( value ).as( proto, attrName );\r\n            }\r\n        }        \r\n    }\r\n    else{\r\n        proto._log( 'error', 'Type-R:MissingImport', 'Add import \"reflect-metadata\"; as the first line of your app.' );\r\n    }    \r\n}","import { eventsApi, Logger } from '@type-r/mixture';\r\nimport { Model } from '../model';\r\nimport { ItemsBehavior, Owner, Transaction, Transactional, transactionApi, TransactionOptions } from '../transactions';\r\n\r\n\r\nconst { trigger2, trigger3, on, off } = eventsApi,\r\n      { commit } = transactionApi,\r\n      _aquire = transactionApi.aquire, _free = transactionApi.free;\r\n\r\n/** @private */\r\nexport interface CollectionCore extends Transactional, Owner {\r\n    /** @internal */\r\n    _byId : IdIndex\r\n\r\n    models : Model[]\r\n    model : typeof Model\r\n    idAttribute : string // TODO: Refactor inconsistent idAttribute usage\r\n    \r\n    /** @internal */\r\n    _comparator : Comparator\r\n    \r\n    get( objOrId : string | Model | Object ) : Model    \r\n    \r\n    /** @internal */\r\n    _itemEvents? : eventsApi.EventMap\r\n    /** @internal */\r\n    _shared : number\r\n    /** @internal */\r\n    _aggregationError : Model[]\r\n    /** @internal */\r\n    _log( level : string, topic : string, text : string, value : any, logger : Logger ) : void\r\n}\r\n\r\n// Collection's manipulation methods elements\r\nexport type Elements = ( Object | Model )[];\r\n\r\nexport interface CollectionOptions extends TransactionOptions {\r\n    sort? : boolean\r\n}\r\n\r\nexport type Comparator = ( a : Model, b : Model ) => number;  \r\n\r\n/** @private */\r\nexport function dispose( collection : CollectionCore ) : Model[]{\r\n    const { models } = collection;\r\n\r\n    collection.models = [];\r\n    collection._byId  = {};\r\n\r\n    freeAll( collection, models );\r\n    return models;\r\n}\r\n\r\n/** @private */\r\nexport function convertAndAquire( collection : CollectionCore, attrs : {} | Model, options : CollectionOptions ){\r\n    const { model } = collection;\r\n    \r\n    let record : Model;\r\n\r\n    if( collection._shared ){\r\n        record = attrs instanceof model ? attrs : <Model>model.create( attrs, options );\r\n\r\n        if( collection._shared & ItemsBehavior.listen ){\r\n            on( record, record._changeEventName, collection._onChildrenChange, collection );\r\n        }\r\n    }\r\n    else{\r\n        record = attrs instanceof model ? ( options.merge ? attrs.clone() : attrs ) : <Model>model.create( attrs, options );\r\n\r\n        if( record._owner ){\r\n            if( record._owner !== collection ){\r\n                _aquire( collection, record.clone() );\r\n                const errors = collection._aggregationError || ( collection._aggregationError = [] );\r\n                errors.push( record );\r\n            }\r\n        }\r\n        else{\r\n            _aquire( collection, record );   \r\n        }\r\n    }    \r\n\r\n    // Subscribe for events...\r\n    const { _itemEvents } = collection;\r\n    _itemEvents && _itemEvents.subscribe( collection, record );\r\n\r\n    return record;\r\n}\r\n\r\n/** @private */\r\nexport function free( owner : CollectionCore, child : Model, unset? : boolean ) : void {\r\n    if( owner._shared ){\r\n        if( owner._shared & ItemsBehavior.listen ){\r\n            off( child, child._changeEventName, owner._onChildrenChange, owner );\r\n        }\r\n    }\r\n    else{\r\n        _free( owner, child );\r\n        unset || child.dispose();\r\n    }\r\n\r\n    const { _itemEvents } = owner;\r\n    _itemEvents && _itemEvents.unsubscribe( owner, child );\r\n}\r\n\r\n/** @private */\r\nexport function freeAll( collection : CollectionCore, children : Model[] ) : Model[] {\r\n    for( let child of children ){\r\n        free( collection, child );\r\n    }\r\n\r\n    return children;\r\n}\r\n\r\n/**\r\n * Silently sort collection, if its required. Returns true if sort happened.\r\n * @private\r\n */   \r\nexport function sortElements( collection : CollectionCore, options : CollectionOptions ) : boolean {\r\n    let { _comparator } = collection;\r\n    if( _comparator && options.sort !== false ){\r\n        collection.models.sort( _comparator );\r\n        return true;\r\n    }\r\n\r\n    return false;\r\n}\r\n\r\n/**********************************\r\n * Collection Index\r\n * @private \r\n */\r\nexport interface IdIndex {\r\n    [ id : string ] : Model\r\n}\r\n\r\n/** @private Add record */ \r\nexport function addIndex( index : IdIndex, model : Model ) : void {\r\n    index[ model.cid ] = model;\r\n    var id             = model.id;\r\n    \r\n    if( id || ( id as any ) === 0 ){\r\n        index[ id ] = model;\r\n    }\r\n}\r\n\r\n/** @private Remove record */ \r\nexport function removeIndex( index : IdIndex, model : Model ) : void {\r\n    delete index[ model.cid ];\r\n    var id = model.id;\r\n    if( id || ( id as any ) === 0 ){\r\n        delete index[ id ];\r\n    }\r\n}\r\n\r\nexport function updateIndex( index : IdIndex, model : Model ){\r\n    delete index[ model.previous( model.idAttribute ) ];\r\n\r\n    const { id } = model;\r\n    id == null || ( index[ id ] = model );\r\n}\r\n\r\n/***\r\n * In Collections, transactions appears only when\r\n * add remove or change events might be emitted.\r\n * reset doesn't require transaction.\r\n * \r\n * Transaction holds information regarding events, and knows how to emit them.\r\n * \r\n * Two major optimization cases.\r\n * 1) Population of an empty collection\r\n * 2) Update of the collection (no or little changes) - it's crucial to reject empty transactions.\r\n */\r\n\r\n\r\n// Transaction class. Implements two-phase transactions on object's tree.\r\n/** @private */ \r\nexport class CollectionTransaction implements Transaction {\r\n    // open transaction\r\n    constructor(    public object : CollectionCore,\r\n                    public isRoot : boolean,\r\n                    public added : Model[],\r\n                    public removed : Model[],\r\n                    public nested : Transaction[],\r\n                    public sorted : boolean ){}\r\n\r\n    // commit transaction\r\n    commit( initiator? : Transactional ){\r\n        const { nested, object } = this,\r\n              { _isDirty } = object;\r\n\r\n        // Commit all nested transactions...\r\n        for( let transaction of nested ){\r\n            transaction.commit( object );\r\n        }\r\n\r\n        if( object._aggregationError ){\r\n            logAggregationError( object, _isDirty );\r\n        }\r\n\r\n        // Just trigger 'change' on collection, it must be already triggered for models during nested commits.\r\n        // ??? TODO: do it in nested transactions loop? This way appears to be more correct. \r\n        for( let transaction of nested ){\r\n            trigger2( object, 'change', transaction.object, _isDirty );\r\n        }\r\n\r\n        // Notify listeners on attribute changes...\r\n        const { added, removed } = this;\r\n\r\n        // Trigger `add` events for both model and collection.\r\n        for( let record of added ){\r\n            trigger3( record, 'add', record, object, _isDirty );\r\n            trigger3( object, 'add', record, object, _isDirty );\r\n        }\r\n\r\n        // Trigger `remove` events for both model and collection.\r\n        for( let record of removed ){\r\n            trigger3( record, 'remove', record, object, _isDirty );\r\n            trigger3( object, 'remove', record, object, _isDirty );\r\n        }\r\n\r\n        if( this.sorted ){\r\n            trigger2( object, 'sort', object, _isDirty );\r\n        }\r\n\r\n        if( added.length || removed.length ){\r\n            trigger2( object, 'update', object, _isDirty );\r\n        }\r\n\r\n        this.isRoot && commit( object, initiator );\r\n    }\r\n}\r\n\r\nexport function logAggregationError( collection : CollectionCore, options : TransactionOptions ){\r\n    collection._log( 'warn', 'Type-R:InvalidOwner', 'added records already have an owner and were cloned. Use explicit record.clone() to dismiss this warning.', collection._aggregationError, options.logger );\r\n    collection._aggregationError = void 0;\r\n}","import { Model } from '../model';\r\nimport { Transaction, transactionApi } from '../transactions';\r\nimport { addIndex, CollectionCore, CollectionOptions, CollectionTransaction, convertAndAquire, logAggregationError, sortElements, updateIndex } from './commons';\r\n\r\nconst { begin, commit, markAsDirty } = transactionApi;\r\n\r\nexport interface AddOptions extends CollectionOptions {\r\n    at? : number \r\n}\r\n\r\n/** @private */\r\nexport function addTransaction( collection : CollectionCore, items : any[], options : AddOptions, merge? : boolean ){\r\n    const isRoot = begin( collection ),\r\n          nested : Transaction[]= [];\r\n\r\n    var added = appendElements( collection, items, nested, options, merge );\r\n\r\n    if( added.length || nested.length ){\r\n        let needSort = sortOrMoveElements( collection, added, options );\r\n        if( markAsDirty( collection, options ) ){\r\n            return new CollectionTransaction( collection, isRoot, added, [], nested, needSort );\r\n        }\r\n\r\n        if( collection._aggregationError ) logAggregationError( collection, options );\r\n    }\r\n\r\n    // No changes...\r\n    isRoot && commit( collection );\r\n};\r\n\r\n// Handle sort or insert at options for add operation. Reurns true if sort happened.\r\n/** @private */ \r\nfunction sortOrMoveElements( collection : CollectionCore, added : Model[], options : AddOptions ) : boolean {\r\n    let at = options.at;\r\n\r\n    // if `at` option is given, it overrides sorting option...\r\n    if( at != null ){\r\n        // Take an original collection's length. \r\n        const length = collection.models.length - added.length;\r\n\r\n        // Crazy Backbone rules about `at` index. I don't know what that guys smoke.\r\n        at = Number( at );\r\n        if( at < 0 ) at += length + 1;\r\n        if( at < 0 ) at = 0;\r\n        if( at > length ) at = length;\r\n\r\n        // Move added elements to desired position. In place.\r\n        moveElements( collection.models, at, added );\r\n        return false;\r\n    }\r\n\r\n    return sortElements( collection, options );\r\n}\r\n\r\n/** @private */\r\nfunction moveElements( source : any[], at : number, added : any[] ) : void {\r\n    for( var j = source.length - 1, i = j - added.length; i >= at; i--, j-- ){\r\n        source[ j ] = source[ i ];\r\n    }\r\n\r\n    for( i = 0, j = at; i < added.length; i++, j++ ){\r\n        source[ j ] = added[ i ];\r\n    }\r\n}\r\n\r\n// append data to model and index\r\n/** @private */\r\nfunction appendElements( collection : CollectionCore, a_items : any[], nested : Transaction[], a_options : AddOptions, forceMerge : boolean ){\r\n    var { _byId, models } = collection,\r\n        merge       = ( forceMerge || a_options.merge ) && !collection._shared,\r\n        parse       = a_options.parse,\r\n        idAttribute = collection.model.prototype.idAttribute,\r\n        prevLength = models.length;\r\n\r\n    for( const item of a_items ){\r\n        let model = item ? _byId[ item[ idAttribute ] ] || _byId[ item.cid ] : null;\r\n\r\n        if( model ){\r\n            if( merge && item !== model ){\r\n                var attrs = item.attributes || item;\r\n                const transaction = model._createTransaction( attrs, a_options );\r\n                transaction && nested.push( transaction );\r\n\r\n                if( model.hasChanged( idAttribute ) ){\r\n                    updateIndex( _byId, model );\r\n                }\r\n            }\r\n        }\r\n        else{\r\n            model = convertAndAquire( collection, item, a_options );\r\n            models.push( model );\r\n            addIndex( _byId, model );\r\n        }\r\n    }\r\n\r\n    return models.slice( prevLength );\r\n}\r\n","import { Model } from '../model'\r\n\r\nexport type Predicate<R> = ( ( val : R, key? : number ) => boolean ) | Partial<R>;\r\n\r\n/**\r\n * Optimized array methods.\r\n */\r\nexport abstract class ArrayMixin<R extends Model> {\r\n    models : R[]\r\n    abstract get( modelOrId : string | Partial<R> ) : R;\r\n\r\n    /**\r\n     * Map and optionally filter the collection.\r\n     * @param mapFilter filter an element out if `undefined` is returned \r\n     * @param context optional `this` for `mapFilter`\r\n     */\r\n    map<T>( mapFilter : ( val : R, key? : number ) => T, context? : any ) : T[]{\r\n        const { models } = this,\r\n            { length } = models,\r\n            res = Array( length ),\r\n            fun = context ? mapFilter.bind( context ) : mapFilter;\r\n\r\n        for( var i = 0, j = 0; i < length; i++ ){\r\n            const val = fun( models[ i ], i );\r\n            val === void 0 || ( res[ j++ ] = val );\r\n        }\r\n\r\n        if( i !== j ){\r\n            res.length = j;\r\n        }\r\n\r\n        return res;\r\n    }\r\n\r\n    /**\r\n     * Iterate through the collection.\r\n     * @param context optional `this` for `iteratee`.\r\n     */\r\n    each<T>( fun : ( val : R, key? : number ) => any, context? : any ) : void {\r\n        const { models } = this,\r\n            { length } = models,\r\n            iteratee = context ? fun.bind( context ) : fun;\r\n\r\n        for( let i = 0; i < length; i++ ){\r\n            iteratee( models[ i ], i );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Iterate through collection optionally returning the value.\r\n     * @param doWhile break the loop if anything but `undefined` is returned, and return this value.\r\n     * @param context optional `this` for `doWhile`.\r\n     */\r\n    firstMatch<T>( doWhile : ( val : R, key? : number ) => T ) : T\r\n    firstMatch<T, C>( doWhile : ( this : C, val : R, key? : number ) => T, context : C ) : T\r\n    firstMatch<T>( doWhile : ( val : R, key? : number ) => T, context? : any ) : T {\r\n        const { models } = this,\r\n            { length } = models,\r\n            iteratee = context ? doWhile.bind( context ) : doWhile;\r\n\r\n        for( let i = 0; i < length; i++ ){\r\n            const res = iteratee( models[ i ], i );\r\n            if( res !== void 0 ) return res;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Proxy for the `array.reduce()`\r\n     * @param iteratee \r\n     */\r\n    reduce<T>( iteratee : (previousValue: R, currentValue: R, currentIndex?: number ) => R ) : R\r\n    reduce<T>( iteratee : (previousValue: T, currentValue: R, currentIndex?: number ) => T, init? : any ) : T\r\n    reduce<T>( iteratee : (previousValue: any, currentValue: any, currentIndex?: number ) => any, init? : any ) : T | R {\r\n        return init === void 0 ? this.models.reduce( iteratee ) : this.models.reduce( iteratee, init );\r\n    }\r\n\r\n    // Slice out a sub-array of models from the collection.\r\n    slice( begin? : number, end? : number ) : R[] {\r\n        return this.models.slice( begin, end );\r\n    }\r\n  \r\n    indexOf( modelOrId : string | Partial<R> ) : number {\r\n        return this.models.indexOf( this.get( modelOrId ) );\r\n    }\r\n\r\n    includes( idOrObj : string | Partial<R> ) : boolean {\r\n        return Boolean( this.get( idOrObj ) );\r\n    }\r\n\r\n    filter( iteratee : Predicate<R>, context? : any ) : R[] {\r\n        const fun = toPredicateFunction( iteratee );\r\n        return this.map( m => fun( m ) ? m : void 0, context );\r\n    }\r\n\r\n    find( iteratee : Predicate<R>, context? : any ) : R {\r\n        const fun = toPredicateFunction( iteratee );\r\n        return this.firstMatch( m => fun( m ) ? m : void 0, context );\r\n    }\r\n\r\n    some( iteratee : Predicate<R>, context? : any ) : boolean {\r\n        return Boolean( this.find( iteratee, context ) );\r\n    }\r\n\r\n    forEach( iteratee : ( val : R, key? : number ) => void, context? : any ) : void {\r\n        this.each( iteratee, context );\r\n    }\r\n\r\n    values() : IterableIterator<R> {\r\n        return this.models.values();\r\n    }\r\n\r\n    entries() : IterableIterator<[ number, R ]>{\r\n        return this.models.entries();\r\n    }\r\n\r\n    every( iteratee : Predicate<R>, context? : any ) : boolean {\r\n        const fun = toPredicateFunction( iteratee );\r\n        return this.firstMatch( m => fun( m ) ? void 0 : false, context ) === void 0;\r\n    }\r\n\r\n    pluck<K extends keyof R>( key : K ) : R[K][] {\r\n        return this.map( model => model[ key ] );\r\n    }\r\n\r\n    first() : R { return this.models[ 0 ]; }\r\n\r\n    last() : R { return this.models[ this.models.length - 1 ]; }\r\n\r\n    at( a_index : number ) : R {\r\n        const index = a_index < 0 ? a_index + this.models.length : a_index;    \r\n        return this.models[ index ];\r\n    }\r\n}\r\n\r\nconst noOp = x => x;\r\n\r\nfunction toPredicateFunction<R>( iteratee : Predicate<R> ){\r\n    if( iteratee == null ) return noOp;\r\n\r\n    switch( typeof iteratee ){\r\n        case 'function' : return iteratee;\r\n        case 'object' :\r\n            const keys = Object.keys( iteratee );\r\n            \r\n            return x => {\r\n                for( let key of keys ){\r\n                    if( iteratee[ key ] !== x[ key ] )\r\n                        return false;\r\n                }\r\n\r\n                return true;\r\n            }\r\n        default : throw new Error( 'Invalid iteratee' );\r\n    }\r\n}","/*************\r\n * Remove items from collections.\r\n * \r\n * Cannot be a part of two-phase transaction on object tree.\r\n * Can be executed in the scope of ad-hoc transaction or from the trigger, though.\r\n *\r\n * Implemented with low-level API. \r\n * Most frequent operation - single element remove. Thus, it have the fast-path.\r\n */\r\n\r\nimport { eventsApi } from '@type-r/mixture';\r\nimport { Model } from '../model';\r\nimport { transactionApi, TransactionOptions } from '../transactions';\r\nimport { CollectionCore, CollectionTransaction, free, removeIndex } from './commons';\r\n\r\nconst { trigger2, trigger3 } = eventsApi,\r\n    { markAsDirty, begin, commit } = transactionApi;\r\n\r\n/** @private */\r\nexport function removeOne( collection : CollectionCore, el : Model | {} | string, options : TransactionOptions ) : Model {\r\n    var model : Model = collection.get( el );\r\n\r\n    if( model ){\r\n        const isRoot = begin( collection ),\r\n              models = collection.models;\r\n\r\n        // Remove model form the collection. \r\n        models.splice( models.indexOf( model ), 1 );\r\n        removeIndex( collection._byId, model );\r\n        \r\n        // Mark transaction as dirty. \r\n        const notify = markAsDirty( collection, options );\r\n\r\n        // Send out events.\r\n        if( notify ){\r\n            trigger3( model, 'remove', model, collection, options );\r\n            trigger3( collection, 'remove', model, collection, options );\r\n        } \r\n\r\n        free( collection, model, options.unset );\r\n\r\n        notify && trigger2( collection, 'update', collection, options );\r\n\r\n        // Commit transaction.\r\n        isRoot && commit( collection );\r\n\r\n        return model;\r\n    }\r\n};\r\n\r\n/** Optimized for removing many elements\r\n * 1. Remove elements from the index, checking for duplicates\r\n * 2. Create new models array matching index\r\n * 3. Send notifications and remove references\r\n */\r\n\r\n/** @private */\r\nexport function removeMany( collection : CollectionCore, toRemove : any[], options ){\r\n    const removed = _removeFromIndex( collection, toRemove, options.unset );\r\n    if( removed.length ){\r\n        const isRoot = begin( collection );\r\n\r\n        _reallocate( collection, removed.length );\r\n\r\n        if( markAsDirty( collection, options ) ){\r\n            const transaction = new CollectionTransaction( collection, isRoot, [], removed, [], false );\r\n            transaction.commit();\r\n        }\r\n        else{\r\n            // Commit transaction.\r\n            isRoot && commit( collection );\r\n        }\r\n    }\r\n\r\n    return removed;\r\n};\r\n\r\n// remove models from the index...\r\n/** @private */\r\nfunction _removeFromIndex( collection, toRemove, unset : boolean ){\r\n    var removed = Array( toRemove.length ),\r\n        _byId   = collection._byId;\r\n\r\n    for( var i = 0, j = 0; i < toRemove.length; i++ ){\r\n        var model = collection.get( toRemove[ i ] );\r\n        if( model ){\r\n            removed[ j++ ] = model;\r\n            removeIndex( _byId, model );\r\n            free( collection, model, unset );\r\n        }\r\n    }\r\n\r\n    removed.length = j;\r\n\r\n    return removed;\r\n}\r\n\r\n// Allocate new models array removing models not present in the index.\r\n/** @private */\r\nfunction _reallocate( collection, removed ){\r\n    var prev   = collection.models,\r\n        models = collection.models = Array( prev.length - removed ),\r\n        _byId = collection._byId;\r\n\r\n    for( var i = 0, j = 0; i < prev.length; i++ ){\r\n        var model = prev[ i ];\r\n\r\n        if( _byId[ model.cid ] ){\r\n            models[ j++ ] = model;\r\n        }\r\n    }\r\n\r\n    models.length = j;\r\n}","import { Model } from '../model';\r\nimport { Transaction, transactionApi } from '../transactions';\r\nimport { addIndex, CollectionCore, CollectionOptions, CollectionTransaction, convertAndAquire, Elements, free, freeAll, IdIndex, logAggregationError, sortElements } from './commons';\r\n\r\nconst { begin, commit, markAsDirty } = transactionApi;\r\n\r\n/** @private */\r\nconst silentOptions = { silent : true };\r\n\r\n/** @private */\r\nexport function emptySetTransaction( collection : CollectionCore, items : Elements, options : CollectionOptions, silent? : boolean ){\r\n    const isRoot = begin( collection );\r\n\r\n    const added = _reallocateEmpty( collection, items, options );\r\n\r\n    if( added.length ){\r\n        const needSort = sortElements( collection, options );\r\n\r\n        if( markAsDirty( collection, silent ? silentOptions : options ) ){\r\n            // 'added' is the reference to this.models. Need to copy it.\r\n            return new CollectionTransaction( collection, isRoot, added.slice(), [], [], needSort );\r\n        }\r\n\r\n        if( collection._aggregationError ) logAggregationError( collection, options );\r\n    }\r\n\r\n    // No changes...\r\n    isRoot && commit( collection );\r\n};\r\n\r\n/** @private */\r\nexport function setTransaction( collection, items, options ){\r\n    const isRoot = begin( collection ),\r\n          nested = [];\r\n\r\n    var previous = collection.models,\r\n        added    = _reallocate( collection, items, nested, options );\r\n\r\n    const reusedCount = collection.models.length - added.length,\r\n          removed = reusedCount < previous.length ? (\r\n                        reusedCount ? _garbageCollect( collection, previous ) :\r\n                                        freeAll( collection, previous )\r\n                    ) : [];                    \r\n    \r\n    const addedOrChanged = nested.length || added.length,\r\n          // As we are reallocating models array, it needs to be sorted even if there are no changes.\r\n          sorted = ( sortElements( collection, options ) && addedOrChanged ) || added.length || options.sorted;\r\n\r\n    if( addedOrChanged || removed.length || sorted ){\r\n        if( markAsDirty( collection, options ) ){ \r\n            return new CollectionTransaction( collection, isRoot, added, removed, nested, sorted );\r\n        }\r\n\r\n        if( collection._aggregationError ) logAggregationError( collection, options );\r\n    }\r\n\r\n    isRoot && commit( collection );\r\n};\r\n\r\n// Remove references to all previous elements, which are not present in collection.\r\n// Returns an array with removed elements.\r\n/** @private */\r\nfunction _garbageCollect( collection : CollectionCore, previous : Model[] ) : Model[]{\r\n    const { _byId }  = collection,\r\n          removed = [];\r\n\r\n    // Filter out removed models and remove them from the index...\r\n    for( let record of previous ){\r\n        if( !_byId[ record.cid ] ){\r\n            removed.push( record );\r\n            free( collection, record );\r\n        }\r\n    }\r\n\r\n    return removed;\r\n}\r\n\r\n// reallocate model and index\r\n/** @private */\r\nfunction _reallocate( collection : CollectionCore, source : any[], nested : Transaction[], options ){\r\n    var models      = Array( source.length ),\r\n        _byId : IdIndex = {},\r\n        merge       = ( options.merge == null ? true : options.merge ) && !collection._shared,\r\n        _prevById   = collection._byId,\r\n        prevModels  = collection.models, \r\n        idAttribute = collection.model.prototype.idAttribute,\r\n        toAdd       = [],\r\n        orderKept   = true;\r\n\r\n    // for each item in source set...\r\n    for( var i = 0, j = 0; i < source.length; i++ ){\r\n        var item  = source[ i ],\r\n            model : Model = null;\r\n\r\n        if( item ){\r\n            var id  = item[ idAttribute ],\r\n                cid = item.cid;\r\n\r\n            if( _byId[ id ] || _byId[ cid ] ) continue;\r\n\r\n            model = _prevById[ id ] || _prevById[ cid ];\r\n        }\r\n\r\n        if( model ){\r\n            if( merge && item !== model ){\r\n                if( orderKept && prevModels[ j ] !== model ) orderKept = false;\r\n\r\n                var attrs = item.attributes || item;\r\n                const transaction = model._createTransaction( attrs, options );\r\n                transaction && nested.push( transaction );\r\n            }\r\n        }\r\n        else{\r\n            model = convertAndAquire( collection, item, options );\r\n            toAdd.push( model );\r\n        }\r\n\r\n        models[ j++ ] = model;\r\n        addIndex( _byId, model );\r\n    }\r\n\r\n    models.length = j;\r\n    collection.models   = models;\r\n    collection._byId    = _byId;\r\n\r\n    if( !orderKept ) options.sorted = true;\r\n\r\n    return toAdd;\r\n}\r\n\r\n/** @private */\r\nfunction _reallocateEmpty( self, source, options ){\r\n    var len         = source ? source.length : 0,\r\n        models      = Array( len ),\r\n        _byId : IdIndex = {},\r\n        idAttribute = self.model.prototype.idAttribute;\r\n\r\n    for( var i = 0, j = 0; i < len; i++ ){\r\n        var src = source[ i ];\r\n\r\n        if( src && ( _byId[ src[ idAttribute ] ] || _byId[ src.cid ] ) ){\r\n            continue;\r\n        }\r\n\r\n        var model = convertAndAquire( self, src, options );\r\n        models[ j++ ] = model;\r\n        addIndex( _byId, model );\r\n    }\r\n\r\n    models.length = j;\r\n    self._byId    = _byId;\r\n\r\n    return self.models = models;\r\n}","import { Linked } from '@linked/value';\r\nimport { define, definitions, EventMap, eventsApi, EventsDefinition, Logger, logger, LogLevel, Mixable, mixinRules, mixins, TheType } from '@type-r/mixture';\r\nimport { IOPromise, startIO } from '../io-tools';\r\nimport { AggregatedType, Model, SharedType, shared } from '../model';\r\nimport { CloneOptions, ItemsBehavior, Transactional, TransactionalDefinition, transactionApi, TransactionOptions } from '../transactions';\r\nimport { AddOptions, addTransaction } from './add';\r\nimport { ArrayMixin } from './arrayMethods';\r\nimport { CollectionCore, CollectionTransaction, Elements, free, sortElements, updateIndex } from './commons';\r\nimport { removeMany, removeOne } from './remove';\r\nimport { emptySetTransaction, setTransaction } from './set';\r\n\r\nconst { trigger2 } = eventsApi,\r\n    { begin, commit, markAsDirty } = transactionApi;\r\n\r\nlet _count = 0;\r\n\r\nexport type GenericComparator = string | ( ( x : Model ) => number ) | ( ( a : Model, b : Model ) => number ); \r\n\r\nexport interface CollectionOptions extends TransactionOptions {\r\n    comparator? : GenericComparator\r\n    model? : typeof Model\r\n}\r\n\r\nexport interface CollectionDefinition extends TransactionalDefinition {\r\n    model? : typeof Model,\r\n    itemEvents? : EventsDefinition\r\n    _itemEvents? : EventMap\r\n}\r\n\r\nclass CollectionRefsType extends SharedType {\r\n    static defaultValue = [];\r\n}\r\n\r\nexport interface CollectionConstructor<R extends Model = Model > extends TheType<typeof Collection> {\r\n    new ( records? : ElementsArg<R>, options?: CollectionOptions ) : Collection<R>\r\n    prototype : Collection<R>\r\n    Refs : CollectionConstructor<R>\r\n};\r\n\r\ntype CollectionOf<M extends typeof Model> = M['Collection'] extends CollectionConstructor<InstanceType<M>> ? M['Collection'] : CollectionConstructor<InstanceType<M>>;\r\n\r\n@define({\r\n    // Default client id prefix \r\n    cidPrefix : 'c',\r\n    model : Model,\r\n    _changeEventName : 'changes',\r\n    _aggregationError : null\r\n})\r\n@mixins( ArrayMixin )\r\n@definitions({\r\n    comparator : mixinRules.value,\r\n    model : mixinRules.protoValue,\r\n    itemEvents : mixinRules.merge\r\n})\r\nexport class Collection< R extends Model = Model> extends Transactional implements CollectionCore, Iterable<R> {\r\n    /** @internal */\r\n    _shared : number\r\n    /** @internal */\r\n    _aggregationError : R[]\r\n\r\n    /**\r\n     * EXPERIMENTAL notation to extract proper collection type from the model in TypeScript.\r\n     * \r\n     * attrName : Collection.of( User );\r\n     * \r\n     * const users = new ( Collection.of( User ) )\r\n     */\r\n    static of<M extends typeof Model>( Ctor : M ) : CollectionOf<M> {\r\n        return Ctor.Collection as any;\r\n    }\r\n\r\n    /**\r\n     * EXPERIMENTAL notation to extract proper collection type from the model in TypeScript.\r\n     * \r\n     * attrName : Collection.ofRefs( User );\r\n     * \r\n     * const users = new ( Collection.ofRefs( User ) )\r\n     */\r\n    static ofRefs<M extends typeof Model>( Ctor : M ) : CollectionOf<M> {\r\n        return Ctor.Collection.Refs as any;\r\n    }\r\n\r\n\r\n    static Subset : typeof Collection\r\n    static Refs : any\r\n    static refsTo = shared;\r\n\r\n    /** @internal */\r\n    static _SubsetOf : typeof Collection\r\n    \r\n    createSubset( models : ElementsArg<R>, options? : CollectionOptions) : Collection<R>{\r\n        throw new ReferenceError( 'Failed dependency injection' )\r\n    }\r\n\r\n    static onExtend( BaseClass : typeof Transactional ){\r\n        // Cached subset collection must not be inherited.\r\n        const Ctor = this;\r\n        this._SubsetOf = null;\r\n\r\n        function RefsCollection( a, b, listen? ){\r\n            Ctor.call( this, a, b, ItemsBehavior.share | ( listen ? ItemsBehavior.listen : 0 ) );\r\n        }\r\n\r\n        Mixable.mixins.populate( RefsCollection );\r\n        \r\n        RefsCollection.prototype = this.prototype;\r\n        RefsCollection._metatype = CollectionRefsType;\r\n\r\n        this.Refs = this.Subset = <any>RefsCollection;\r\n\r\n        Transactional.onExtend.call( this, BaseClass );\r\n    }\r\n    \r\n    static onDefine( definition : CollectionDefinition, BaseClass : any ){\r\n        if( definition.itemEvents ){\r\n            const eventsMap = new EventMap( BaseClass.prototype._itemEvents );\r\n            eventsMap.addEventsMap( definition.itemEvents );\r\n            this.prototype._itemEvents = eventsMap;\r\n        }\r\n\r\n        if( definition.comparator !== void 0 ) this.prototype.comparator = definition.comparator;\r\n\r\n        Transactional.onDefine.call( this, definition );\r\n    }\r\n    \r\n    /** @internal */\r\n    _itemEvents : EventMap\r\n\r\n    /***********************************\r\n     * Core Members\r\n     */\r\n    // Array of the records\r\n    models : R[]\r\n\r\n    // Polymorphic accessor for aggregated attribute's canBeUpdated().\r\n    /** @internal */\r\n    get __inner_state__(){ return this.models; }\r\n\r\n    // Index by id and cid\r\n    /** @internal */\r\n    _byId : { [ id : string ] : R }\r\n\r\n    set comparator( x : GenericComparator ){\r\n\r\n        switch( typeof x ){\r\n            case 'string' :\r\n                this._comparator = ( a, b ) => {\r\n                    const aa = a[ <string>x ], bb = b[ <string>x ];\r\n                    if( aa === bb ) return 0;\r\n                    return aa < bb ? -1 : + 1;\r\n                } \r\n                break;\r\n            case 'function' :\r\n                if( x.length === 1 ){\r\n                    this._comparator = ( a, b ) => {\r\n                        const aa = (<any>x).call( this, a ), bb = (<any>x).call( this, b );\r\n                        if( aa === bb ) return 0;\r\n                        return aa < bb ? -1 : + 1;\r\n                    }\r\n                }\r\n                else{\r\n                    this._comparator = ( a, b ) => (<any>x).call( this, a, b );\r\n                }\r\n                break;\r\n                \r\n            default :\r\n                this._comparator = null;\r\n        }\r\n    }\r\n    \r\n    // TODO: Improve typing\r\n    getStore() : Transactional {\r\n        return this._store || ( this._store = this._owner ? this._owner.getStore() : this._defaultStore );\r\n    }\r\n\r\n    /** @internal */\r\n    _store : Transactional\r\n\r\n    get comparator(){ return this._comparator; }\r\n\r\n    /** @internal */\r\n    _comparator : ( a : R, b : R ) => number\r\n\r\n    /** @internal */\r\n    _onChildrenChange( record : R, options : TransactionOptions = {}, initiator? : Transactional ){\r\n        // Ignore updates from nested transactions.\r\n        if( initiator === this ) return;\r\n\r\n        const { idAttribute } = this;\r\n\r\n        if( record.hasChanged( idAttribute ) ){\r\n            updateIndex( this._byId, record );\r\n        }\r\n\r\n        const isRoot = begin( this );\r\n\r\n        if( markAsDirty( this, options ) ){\r\n            // Forward change event from the record.\r\n            trigger2( this, 'change', record, options )\r\n        }\r\n\r\n        isRoot && commit( this );\r\n    }\r\n\r\n    get( objOrId : string | { id? : string, cid? : string } ) : R {\r\n        if( objOrId == null ) return;\r\n\r\n        if( typeof objOrId === 'object' ){\r\n            const id = objOrId[ this.idAttribute ];\r\n            return ( id !== void 0 && this._byId[ id ] ) || this._byId[ objOrId.cid ];\r\n        }\r\n        else{\r\n            return this._byId[ objOrId ];\r\n        }        \r\n    }\r\n\r\n    [ Symbol.iterator ]() : IterableIterator<R> {\r\n        return this.models[ Symbol.iterator ]();\r\n    }\r\n\r\n    // Loop through the members in the scope of transaction.\r\n    // Transactional version of each()\r\n    updateEach( iteratee : ( val : R, key? : number ) => void ){\r\n        const isRoot = transactionApi.begin( this );\r\n        this.each( iteratee );\r\n        isRoot && transactionApi.commit( this );\r\n    }\r\n\r\n    /** @internal */\r\n    _validateNested( errors : {} ) : number {\r\n        // Don't validate if not aggregated.\r\n        if( this._shared ) return 0;\r\n\r\n        let count = 0;\r\n\r\n        this.each( record => {\r\n            const error = record.validationError;\r\n            if( error ){\r\n                errors[ record.cid ] = error;\r\n                count++;\r\n            }\r\n        });\r\n\r\n        return count;\r\n    }\r\n\r\n    model : typeof Model\r\n\r\n    // idAttribute extracted from the model type.\r\n    idAttribute : string\r\n\r\n    constructor( records? : ElementsArg<R>, options : CollectionOptions = {}, shared? : number ){\r\n        super( _count++ );\r\n        this.models = [];\r\n        this._byId = {};\r\n        \r\n        this.comparator  = this.comparator;\r\n\r\n        if( options.comparator !== void 0 ){\r\n            this.comparator = options.comparator;\r\n            options.comparator = void 0;\r\n        }\r\n        \r\n        this.model       = this.model;\r\n        \r\n        if( options.model ){\r\n            this.model = options.model;\r\n            options.model = void 0;\r\n        }\r\n\r\n        this.idAttribute = this.model.prototype.idAttribute; //TODO: Remove?\r\n\r\n        this._shared = shared || 0;\r\n\r\n        if( records ){\r\n            const elements = toElements( this, records, options );\r\n            emptySetTransaction( this, elements, options, true );\r\n        }\r\n\r\n        this.initialize.apply( this, arguments );\r\n\r\n        if( this._localEvents ) this._localEvents.subscribe( this, this );\r\n    }\r\n\r\n    initialize(){}\r\n\r\n    // Deeply clone collection, optionally setting new owner.\r\n    clone( options : CloneOptions = {} ) : this {\r\n        const models = this._shared & ItemsBehavior.share ? this.models : this.map( model => model.clone() ),\r\n              copy : this = new (<any>this.constructor)( models, { model : this.model, comparator : this.comparator }, this._shared );\r\n        \r\n        if( options.pinStore ) copy._defaultStore = this.getStore();\r\n        \r\n        return copy;\r\n    }\r\n\r\n    toJSON( options? : object ) : any {\r\n        return this.map( model => model.toJSON( options ) );\r\n    }\r\n\r\n    // Apply bulk in-place object update in scope of ad-hoc transaction \r\n    set( elements : ElementsArg<R> = [], options : TransactionOptions = {} ) : this {\r\n        if( (<any>options).add !== void 0 ){\r\n            this._log( 'warn', \"Type-R:InvalidOption\", \"Collection.set doesn't support 'add' option, behaving as if options.add === true.\", options );\r\n        }\r\n\r\n        // Handle reset option here - no way it will be populated from the top as nested transaction.\r\n        if( options.reset ){\r\n            this.reset( elements, options )\r\n        }\r\n        else{\r\n            const transaction = this._createTransaction( elements, options );\r\n            transaction && transaction.commit();\r\n        } \r\n\r\n        return this;    \r\n    }\r\n\r\n        /**\r\n     * Enable or disable live updates.\r\n     * \r\n     * `true` enables full collection synchronization.\r\n     * `false` cancel live updates.\r\n     * `json => true | false` - filter updates\r\n     */\r\n    liveUpdates( enabled : LiveUpdatesOption ) : IOPromise<this> {\r\n        if( enabled ){\r\n            this.liveUpdates( false );\r\n\r\n            const filter = typeof enabled === 'function' ? enabled : () => true;\r\n\r\n            this._liveUpdates = {\r\n                updated : json => {\r\n                    filter( json ) && this.add( json, { parse : true, merge : true } );\r\n                },\r\n\r\n                removed : id => this.remove( id )\r\n            };\r\n\r\n            return this.getEndpoint().subscribe( this._liveUpdates, this ).then( () => this );\r\n        }\r\n        else{\r\n            if( this._liveUpdates ){\r\n                this.getEndpoint().unsubscribe( this._liveUpdates, this );\r\n                this._liveUpdates = null;\r\n            }\r\n\r\n            // TODO: Return the resolved promise.\r\n        }\r\n    }\r\n\r\n    /** @internal */\r\n    _liveUpdates : object\r\n\r\n    fetch( a_options : { liveUpdates? : LiveUpdatesOption } & TransactionOptions = {} ) : IOPromise<this> {\r\n        const options = { parse : true, ...a_options },\r\n            endpoint = this.getEndpoint();\r\n\r\n        return startIO(\r\n            this,\r\n            endpoint.list( options, this ),\r\n            options,\r\n\r\n            json => {\r\n                let result : any = this.set( json, { parse : true, ioMethod : 'fetch', ...options } as TransactionOptions );\r\n                \r\n                if( options.liveUpdates ){\r\n                    result = this.liveUpdates( options.liveUpdates );\r\n                }\r\n\r\n                return result;\r\n            }\r\n        );\r\n    }\r\n\r\n    dispose() : void {\r\n        if( this._disposed ) return;\r\n\r\n        const aggregated = !this._shared;\r\n\r\n        for( let record of this.models ){\r\n            free( this, record );\r\n\r\n            if( aggregated ) record.dispose();\r\n        }\r\n\r\n        this.liveUpdates( false );\r\n\r\n        super.dispose();\r\n    }\r\n\r\n    reset( a_elements? : ElementsArg<R>, options : TransactionOptions = {} ) : R[] {\r\n        const isRoot = begin( this ),\r\n              previousModels = this.models;\r\n\r\n        // Make all changes required, but be silent.\r\n        if( a_elements ){            \r\n            emptySetTransaction( this, toElements( this, a_elements, options ), options, true );\r\n        }\r\n        else{\r\n            this._byId = {};\r\n            this.models = [];\r\n        }\r\n\r\n        markAsDirty( this, options );\r\n\r\n        options.silent || trigger2( this, 'reset', this, { previousModels, ...options } );\r\n\r\n        // Dispose models which are not in the updated collection.\r\n        const { _byId } = this;\r\n        \r\n        for( let toDispose of previousModels ){\r\n            _byId[ toDispose.cid ] || free( this, toDispose );\r\n        }\r\n\r\n        isRoot && commit( this );\r\n        return this.models;\r\n    }\r\n\r\n    // Add elements to collection.\r\n    add( a_elements : ElementsArg<R> , options : AddOptions = {} ){\r\n        const elements = toElements( this, a_elements, options ),\r\n              transaction = this.models.length ?\r\n                    addTransaction( this, elements, options ) :\r\n                    emptySetTransaction( this, elements, options );\r\n\r\n        if( transaction ){\r\n            transaction.commit();\r\n            return transaction.added;\r\n        }\r\n    }\r\n\r\n    // Remove elements. \r\n    remove( recordsOrIds : any, options : CollectionOptions = {} ) : R[] | R {\r\n        if( recordsOrIds ){\r\n            return Array.isArray( recordsOrIds ) ?\r\n                        removeMany( this, recordsOrIds, options ) as R[]:\r\n                        removeOne( this, recordsOrIds, options ) as R;\r\n        }\r\n\r\n        return [];\r\n    }\r\n\r\n    $includes( idOrObj : R ) : Linked<boolean> {\r\n        return new LinkedIncludes( this, idOrObj );\r\n    }\r\n\r\n    // Apply bulk object update without any notifications, and return open transaction.\r\n    // Used internally to implement two-phase commit.   \r\n    /** @internal */\r\n    _createTransaction( a_elements : ElementsArg<R>, options : TransactionOptions = {} ) : CollectionTransaction | void {\r\n        const elements = toElements( this, a_elements, options );\r\n\r\n        if( this.models.length ){\r\n            return options.remove === false ?\r\n                        addTransaction( this, elements, options, true ) :\r\n                        setTransaction( this, elements, options );\r\n        }\r\n        else{\r\n            return emptySetTransaction( this, elements, options );\r\n        }\r\n    }\r\n\r\n    /** @internal */\r\n    static _metatype = AggregatedType;\r\n\r\n    /***********************************\r\n     * Collection manipulation methods\r\n     */\r\n\r\n    sort( options : TransactionOptions = {} ) : this {\r\n        if( sortElements( this, options ) ){\r\n            const isRoot = begin( this );\r\n            \r\n            if( markAsDirty( this, options ) ){\r\n                trigger2( this, 'sort', this, options );\r\n            }\r\n\r\n            isRoot && commit( this );\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    // Remove and return given model.\r\n    unset( modelOrId : R | string, options? ) : R {\r\n        const value = this.get( modelOrId );\r\n        this.remove( modelOrId, { unset : true, ...options } );\r\n        return value;\r\n    }\r\n\r\n    modelId( attrs : {} ) : any {\r\n        return attrs[ this.model.prototype.idAttribute ];\r\n    }\r\n\r\n    // Toggle model in collection.\r\n    toggle( model : R, a_next? : boolean ) : boolean {\r\n        var prev = Boolean( this.get( model ) ),\r\n            next = a_next === void 0 ? !prev : Boolean( a_next );\r\n\r\n        if( prev !== next ){\r\n            if( prev ){\r\n                this.remove( model );\r\n            }\r\n            else{\r\n                this.add( model );\r\n            }\r\n        }\r\n\r\n        return next;\r\n    }\r\n\r\n    /** @internal */\r\n    _log( level : LogLevel, topic : string, text : string, value : object, a_logger? : Logger ) : void {\r\n        ( a_logger || logger ).trigger( level, topic, `${ this.model.prototype.getClassName() }.${ this.getClassName() }: ` + text, {\r\n            Argument : value,\r\n            'Attributes spec' : this.model.prototype._attributes\r\n        });\r\n    }\r\n\r\n    getClassName() : string {\r\n        return super.getClassName() || 'Collection';\r\n    }\r\n\r\n    /***********************************\r\n     * Proxied Array methods\r\n     */\r\n\r\n    get length() : number { return this.models.length; }\r\n\r\n    // Add a model to the end of the collection.\r\n    push(model : ElementsArg<R>, options? : CollectionOptions ) {\r\n        return this.add(model, { at: this.length, ...options });\r\n    }\r\n\r\n    // Remove a model from the end of the collection.\r\n    pop( options? : CollectionOptions ) : R {\r\n        var model = this.at(this.length - 1);\r\n        this.remove(model, { unset : true, ...options });\r\n        return model;\r\n    }\r\n\r\n    // Add a model to the beginning of the collection.\r\n    unshift(model : ElementsArg<R>, options? : CollectionOptions ) {\r\n        return this.add(model, { at: 0, ...options });\r\n    }\r\n  \r\n    // Remove a model from the beginning of the collection.\r\n    shift( options? : CollectionOptions ) : R {\r\n        const model = this.at(0);\r\n        this.remove( model, { unset : true, ...options } );\r\n        return model;\r\n    }\r\n}\r\n\r\n\r\nexport interface Collection<R extends Model> extends ArrayMixin<R>{}\r\n\r\nexport type LiveUpdatesOption = boolean | ( ( x : any ) => boolean );\r\n\r\nexport type ElementsArg<R = Model> = Partial<R> | Partial<R>[]\r\n\r\n// TODO: make is safe for parse to return null (?)\r\nfunction toElements<R extends Model>( collection : Collection<R>, elements : ElementsArg<R>, options : CollectionOptions ) : Elements {\r\n    const parsed = options.parse ? collection.parse( elements, options ) : elements; \r\n    return Array.isArray( parsed ) ? parsed : [ parsed ];\r\n}\r\n\r\nModel.Collection = Collection;\r\n\r\nclass LinkedIncludes extends Linked<boolean> {\r\n    constructor(\r\n        private collection,\r\n        private model : Model ){\r\n            super( collection.get( model ) )\r\n    }\r\n\r\n    set( x : boolean ) : void {\r\n        this.collection.toggle( this.model );\r\n    }\r\n}\r\n","import { Collection } from '../collection';\r\nimport { Model } from '../model';\r\nimport { CompiledReference } from '../traversable';\r\n\r\nexport type CollectionReference = ( () => Collection ) | Collection | string; \r\n\r\n/** @private */\r\nexport function parseReference( collectionRef : CollectionReference ) : ( root : Model ) => Collection {\r\n    switch( typeof collectionRef ){\r\n        case 'function' :\r\n            return root => (<any>collectionRef).call( root );\r\n        case 'object'   :\r\n            return () => <Collection>collectionRef;\r\n        case 'string'   :\r\n            const { resolve } = new CompiledReference( <string>collectionRef );\r\n            return resolve;\r\n    }\r\n}","import { AnyType, ChainableAttributeSpec, Model } from '../model';\r\nimport { CollectionReference, parseReference } from './commons';\r\n\r\n\r\n/********\r\n * Reference to model by id.\r\n * \r\n * Untyped attribute. Holds model id, when unresolved. When resolved, is substituted\r\n * with a real model.\r\n * \r\n * No model changes are detected and counted as owner's change. That's intentional.\r\n */\r\n\r\n/** @private */\r\ntype ModelRefValue = Model | string;\r\n\r\n/** @private */\r\nclass ModelRefType extends AnyType {\r\n    // It is always serialized as an id, whenever it's resolved or not. \r\n    toJSON( value : ModelRefValue ){\r\n        return value && typeof value === 'object' ? value.id : value;\r\n    }\r\n\r\n    // Wne \r\n    clone( value : ModelRefValue ){\r\n        return value && typeof value === 'object' ? value.id : value;\r\n    }\r\n\r\n    // Model refs by id are equal when their ids are equal.\r\n    isChanged( a : ModelRefValue, b : ModelRefValue){\r\n        var aId = a && ( (<Model>a).id == null ? a : (<Model>a).id ),\r\n            bId = b && ( (<Model>b).id == null ? b : (<Model>b).id );\r\n\r\n        return aId !== bId;\r\n    }\r\n\r\n    // Refs are always valid.\r\n    validate( model, value, name ){}\r\n}\r\n\r\nfunction theMemberOf<R extends typeof Model>( this : void, masterCollection : CollectionReference, T? : R ) : ChainableAttributeSpec<R> {\r\n    const getMasterCollection = parseReference( masterCollection );\r\n\r\n    const typeSpec = new ChainableAttributeSpec<R>({\r\n        value : null,\r\n        _metatype : ModelRefType\r\n    });\r\n    \r\n    return typeSpec\r\n        .get( function( objOrId : ModelRefValue, name : string ) : Model {\r\n            if( typeof objOrId === 'object' ) return objOrId;\r\n\r\n            // So, we're dealing with an id reference. Resolve it.\r\n            const collection = getMasterCollection( this );\r\n            let   record : Model = null;\r\n\r\n            // If master collection exists and is not empty...\r\n            if( collection && collection.length ){\r\n                // Silently update attribute with record from this collection.\r\n                record = collection.get( objOrId ) || null;\r\n                this.attributes[ name ] = record;\r\n\r\n                // Subscribe for events manually. delegateEvents won't be invoked.\r\n                record && this._attributes[ name ].handleChange( record, null, this, {} );\r\n            }\r\n\r\n            return record;\r\n        });\r\n}\r\n\r\nexport { theMemberOf as memberOf }\r\n\r\ndeclare module '../model' {\r\n    namespace Model {\r\n        export const memberOf : <R extends typeof Model>( this : R, masterCollection : CollectionReference ) => ChainableAttributeSpec<R>;\r\n    }\r\n}\r\n\r\n( Model as any ).memberOf = theMemberOf;","import { Collection, CollectionConstructor, ElementsArg, CollectionOptions } from '../collection';\r\nimport { define, tools } from '@type-r/mixture';\r\nimport { AggregatedType, ChainableAttributeSpec, Model, type } from '../model';\r\nimport { ItemsBehavior, transactionApi } from '../transactions';\r\nimport { CollectionReference, parseReference } from './commons';\r\n\r\n\r\ntype ModelsIds = ( string | number )[];\r\n\r\n// TODO: Change the last parameter to be the Model constructor. Extract the proper Collection type.\r\nexport function subsetOf<X extends CollectionConstructor<R>, R extends Model>( this : void, masterCollection : CollectionReference, T? : X ) : ChainableAttributeSpec<SubsetCollectionConstructor<R>>{\r\n    const CollectionClass = T || Collection,\r\n        // Lazily define class for subset collection, if it's not defined already...\r\n        SubsetOf = CollectionClass._SubsetOf || ( CollectionClass._SubsetOf = defineSubsetCollection( CollectionClass as any ) as any ),\r\n        getMasterCollection = parseReference( masterCollection );\r\n\r\n    return type( SubsetOf ).get(\r\n        function( refs ){\r\n            !refs || refs.resolvedWith || refs.resolve( getMasterCollection( this ) );\r\n            return refs;\r\n        }\r\n    );\r\n}\r\n\r\n\r\ntype subsetOfType = typeof subsetOf;\r\n\r\ndeclare module \"../collection\" {\r\n    namespace Collection {\r\n        export const subsetOf : subsetOfType;\r\n    }    \r\n}\r\n\r\n( Collection as any ).subsetOf = subsetOf;\r\n\r\n\r\nCollection.prototype.createSubset = function<M extends Model>( this : Collection<M>, models : any, options ) : SubsetCollection<M> {\r\n    const SubsetOf = subsetOf( this, this.constructor as any ).options.type,\r\n          subset   = new SubsetOf( models, options );\r\n        \r\n    subset.resolve( this );\r\n    return subset as any;\r\n}\r\n\r\nconst subsetOfBehavior = ItemsBehavior.share | ItemsBehavior.persistent;\r\n\r\nfunction defineSubsetCollection( CollectionClass : typeof Collection ) {\r\n    @define class SubsetOfCollection extends CollectionClass {\r\n        refs : any[];\r\n        resolvedWith : Collection = null;\r\n\r\n        _metatype : AggregatedType\r\n\r\n        get __inner_state__(){ return this.refs || this.models; }\r\n\r\n        constructor( recordsOrIds?, options? ){\r\n            super( [], options, subsetOfBehavior );\r\n            this.refs = toArray( recordsOrIds );\r\n        }\r\n\r\n        // Remove should work fine as it already accepts ids. Add won't...\r\n        add( a_elements, options = {} ){\r\n            const { resolvedWith } = this,\r\n                    toAdd = toArray( a_elements );\r\n            \r\n            if( resolvedWith ){\r\n                // If the collection is resolved already, everything is simple.\r\n                return super.add( resolveRefs( resolvedWith, toAdd ), options );\r\n            }\r\n            else{\r\n                // Collection is not resolved yet. So, we prepare the delayed computation.\r\n                if( toAdd.length ){\r\n                    const isRoot = transactionApi.begin( this );\r\n\r\n                    // Save elements to resolve in future...\r\n                    this.refs = this.refs ? this.refs.concat( toAdd ) : toAdd.slice();\r\n\r\n                    transactionApi.markAsDirty( this, options );\r\n\r\n                    // And throw the 'changes' event.\r\n                    isRoot && transactionApi.commit( this );\r\n                }\r\n            }\r\n        }\r\n\r\n        reset( a_elements?, options = {} ){\r\n            const { resolvedWith } = this,\r\n                elements = toArray( a_elements );\r\n    \r\n            return resolvedWith ?\r\n                // Collection is resolved, so parse ids and forward the call to set.\r\n                super.reset( resolveRefs( resolvedWith, elements ), options ) :\r\n                // Collection is not resolved yet. So, we prepare the delayed computation.\r\n                delaySet( this, elements, options ) as any || [];\r\n        }\r\n\r\n        _createTransaction( a_elements, options? ){\r\n            const { resolvedWith } = this,\r\n                elements = toArray( a_elements );\r\n    \r\n            return resolvedWith ?\r\n                // Collection is resolved, so parse ids and forward the call to set.\r\n                super._createTransaction( resolveRefs( resolvedWith, elements ), options ) :\r\n                // Collection is not resolved yet. So, we prepare the delayed computation.\r\n                delaySet( this, elements, options );\r\n        }\r\n\r\n        // Serialized as an array of model ids.\r\n        toJSON() : ModelsIds {\r\n            return this.refs ?\r\n                this.refs.map( objOrId => objOrId.id || objOrId ) :\r\n                this.models.map( model => model.id );\r\n        }\r\n\r\n        // Subset is always valid.\r\n        _validateNested(){ return 0; }\r\n\r\n        get length() : number {\r\n            return this.models.length || ( this.refs ? this.refs.length : 0 );\r\n        }\r\n\r\n        // Must be shallow copied on clone.\r\n        clone( owner? ){\r\n            var Ctor = (<any>this).constructor,\r\n                copy = new Ctor( [], {\r\n                    model : this.model,\r\n                    comparator : this.comparator\r\n                });\r\n\r\n            if( this.resolvedWith ){\r\n                // TODO: bug here. \r\n                copy.resolvedWith = this.resolvedWith;\r\n                copy.refs = null;\r\n                copy.reset( this.models, { silent : true } );\r\n            }\r\n            else{\r\n                copy.refs = this.refs.slice();\r\n            }\r\n\r\n            return copy;\r\n        }\r\n\r\n        // Clean up the custom parse method possibly defined in the base class.\r\n        parse( raw : any ) : Model[] {\r\n            return raw;\r\n        }\r\n\r\n        resolve( collection : Collection ) : this {\r\n            if( collection && collection.length ){\r\n                this.resolvedWith = collection;\r\n\r\n                if( this.refs ){\r\n                    this.reset( this.refs, { silent : true } );\r\n                    this.refs = null;\r\n                }\r\n            }\r\n\r\n            return this;\r\n        }\r\n\r\n        getModelIds() : ModelsIds { return this.toJSON(); }\r\n\r\n        toggle( modelOrId : any, val : boolean ) : boolean {\r\n            return super.toggle( this.resolvedWith.get( modelOrId ), val );\r\n        }\r\n\r\n        addAll() : Model[] {\r\n            if( this.resolvedWith ){\r\n                this.set( this.resolvedWith.models );\r\n                return this.models;\r\n            }\r\n\r\n            throw new Error( \"Cannot add elemens because the subset collection is not resolved yet.\" );\r\n        }\r\n\r\n        toggleAll() : Model[] {\r\n            return this.length ? this.reset() : this.addAll();\r\n        }\r\n    }\r\n\r\n    // Clean up all custom item events to prevent memory leaks.\r\n    SubsetOfCollection.prototype._itemEvents = void 0;\r\n\r\n    return SubsetOfCollection;\r\n}\r\n\r\nexport interface SubsetCollection<M extends Model> extends Collection<M>{\r\n    getModelIds() : string[]\r\n    toggle( modelOrId : string | M, val : boolean ) : boolean\r\n    addAll() : M[]\r\n    toggleAll() : M[]\r\n    resolve( baseCollection : Collection<M> ) : this\r\n}\r\n\r\nexport interface SubsetCollectionConstructor<R extends Model = Model > {\r\n    new ( records? : ElementsArg<R> | string[], options?: CollectionOptions ) : SubsetCollection<R>\r\n    prototype : SubsetCollection<R>\r\n};\r\n\r\nfunction resolveRefs( master, elements ){\r\n    const records = [];\r\n    \r\n    for( let el of elements ){\r\n        const record = master.get( el );\r\n        if( record ) records.push( record );\r\n    }\r\n\r\n    return records;\r\n}\r\n\r\nfunction delaySet( collection, elements, options ) : void {\r\n    if( tools.notEqual( collection.refs, elements ) ){\r\n        const isRoot = transactionApi.begin( collection );\r\n\r\n        // Save elements to resolve in future...\r\n        collection.refs = elements.slice();\r\n\r\n        transactionApi.markAsDirty( collection, options );\r\n        \r\n        // And throw the 'changes' event.\r\n        isRoot && transactionApi.commit( collection );\r\n    }\r\n}\r\n\r\nfunction toArray( elements ){\r\n    return elements ? ( \r\n        Array.isArray( elements ) ? elements : [ elements ]\r\n    ) : [];\r\n}","import { Model } from '../model';\r\nimport { Transactional } from '../transactions';\r\n\r\nlet _store : Store = null;\r\n\r\nexport class Store extends Model {\r\n    getStore() : Store { return this; }\r\n \r\n    // delegate item lookup to owner, and to the global store if undefined\r\n    get( name : string ) : any {\r\n        // Lookup for resource in the current store. \r\n        let local = this[ name ];\r\n\r\n        // If something is found or it's the global store, return result.\r\n        if( local || this === this._defaultStore ) return local;\r\n\r\n        // Forward failed lookup to owner or global store.\r\n        return this._owner ? this._owner.get( name ) : this._defaultStore.get( name ); \r\n    }\r\n\r\n    static get global(){ return _store; }\r\n    static set global( store : Store ){\r\n        if( _store ){\r\n          _store.dispose();\r\n        }\r\n\r\n        Transactional.prototype._defaultStore = _store = store;\r\n    }\r\n}\r\n\r\nStore.global = new Store();","// Dummy polyfill to prevent exception in IE.\r\nif( typeof Symbol === 'undefined' ){\r\n    Object.defineProperty( window, 'Symbol', { value : { iterator : 'Symbol.iterator' }, configurable : true  });\r\n}\r\n\r\nimport { Events, Mixable as Class } from '@type-r/mixture';\r\n// Define synonims for NestedTypes backward compatibility.\r\nimport { Model } from './model';\r\n\r\n/**\r\n * Export everything \r\n */\r\nexport * from './collection';\r\nexport * from './io-tools';\r\nexport * from '@type-r/mixture';\r\nexport * from './model';\r\nexport * from './relations';\r\nexport * from './transactions';\r\nexport { Model as Record, Class };\r\nexport { Linked } from '@linked/value'\r\n\r\nexport const { on, off, trigger, once, listenTo, stopListening, listenToOnce } = <any>Events;\r\n\r\n/** Wrap model or collection method in transaction. */\r\nexport function transaction< F extends Function >( method : F ) : F {\r\n    return <any>function( ...args ){\r\n        let result;\r\n        \r\n        this.transaction( () => {\r\n            result = method.apply( this, args );\r\n        });\r\n        \r\n        return result;\r\n    }\r\n}"],"names":["defaults","dest","source","name","hasOwnProperty","arguments","length","i","other","isValidJSON","value","proto","Object","getPrototypeOf","prototype","Array","every","getBaseClass","Class","constructor","isEmpty","obj","key","some","fun","ArrayProto","arr","result","someArray","someObject","predicate","x","omit","discard","transform","assign","once","func","memo","first","apply","this","DateProto","Date","ObjectProto","notEqual","a","b","protoA","arraysNotEqual","keysA","keys","objectsNotEqual","HashProto","create","hashMap","hash","definition","_i","names","names_1","_a","name_1","prop","desc","getOwnPropertyDescriptor","o","EventMap","map","handlers","concat","addEvent","split","eventSplitter","getBubblingHandler","callback","name_2","push","EventDescriptor","target","event_1","on","event_2","off","slice","addEventsMap","handler","_bubblingHandlers","event","c","d","e","trigger5","trigger3","trigger2","context","next","listOff","_events","filteredHead","prev","head","ev","_callback","listSend3","call","EventHandler","once_1","_once","name_3","strings","api","events","test","self","queue","all","listSend2","listSend4","listSend5","f","listSend6","extendStatics","setPrototypeOf","__proto__","p","__extends","__","__assign","t","s","n","__rest","indexOf","getOwnPropertySymbols","propertyIsEnumerable","__decorate","decorators","r","Reflect","decorate","defineProperty","Mixable","protoProps","staticProps","BaseClass","mixins","defineMixin","merge","mergeObject","getStaticDefinitions","onDefine","definitions","mergeInheritedMembers","spec","statics","TheSubclass","tslib_1.__extends","predefine","define","Constructor","__super__","MixinsState","get","populate","onExtend","ClassOrDefinition","Ctor","rules","definitionRules","definitionDecorator","definitionKey","rule","appliedMixins","mixins_1","mixin","isArray","sourceMixins","mergeRules","ctors","ctors_1","unshift","object","ignore","dontMix","getOwnPropertyNames","forEachOwnProp","sourceProp","_this","assignProperty","mixinRules","protoValue","baseProto","resolveRule","function","caller","list","destProp","configurable","pipe","classFirst","classLast","_idCount","uniqueId","Messenger","localEvents","_localEvents","properties","eventsMap","defineProperties","toPropertyDescriptor","addReference","a_source","_listeningTo","removeAll","second","cid","_disposed","stopListening","initialize","Events","listener","isProduction","process","env","NODE_ENV","logEvents","Logger","level","filter","topic","msg","props","args","toString","console","Error","counter","_super","window","something","__inner_state__","body","join","JSON","stringify","logger","logEvents_1","logToConsole","throwingLogger","throwOn","log","trigger","bind","startIO","promise","options","thenDo","abortIO","_ioPromise","then","resp","triggerAndBubble","catch","err","abort","eventSource","collection","referenceMask","reference","splitTail","path","match","substr","tail","pop","local","resolve","Function","shift","resolveReference","root","action","skip","getStore","getOwner","ValidationError","iteratee","error","nested","each","eachError","_validateNested","validate","helpers","arrayHelpers","objectHelpers","dummyHelpers","Linked","clone","link","remove","iterator","mapped","element","at","array","splice","j","y","set","ClonedValueLink","checked","onChange","Boolean","update","truthyValue","EqualsValueLink","defaultValue","EnabledValueLink","ContainsRef","_","PropValueLink","links","_value$","whenValid","defaultError","CustomValueLink","unwrap","sourceKey","trim","sourceVal","parent","nextValue","el","removeAt","field","values","ItemsBehavior","Transactional","endpoint","_endpoint","Transactional_1","_owner","_ownerKey","_changeEventName","listenTo","isRoot","transactionApi","begin","commit","transaction","_changeToken","json","strict","validationError","eachValidationError","getClassName","data","_defaultStore","getOwnerEndpoint","_endpoints","_validationError","getValidationError","cidPrefix","_transaction","markAsDirty","dirty","silent","_isDirty","initiator","originalOptions","_onChildrenChange","aquire","owner","child","ReferenceError","free","_begin","_markAsDirty","setAttribute","record","_attributes","doUpdate","attributes","_previousAttributes","AttributesCopy","_changedAttributes","UpdateModelMixin","attribute","propagateChanges","forceAttributeChange","_createTransaction","a_values","unknown","changes","parse","shouldBeAnObject","unknownAttrsWarning","ModelTransaction","nested_1","_log","nested_2","changes_1","_b","emptyOptions","AnyType","model","handleChange","toJSON","type","getHook","v","isChanged","code","text","New value","Prev. value","a_options","getHooks","transforms","changeHandlers","changeEvents","hasCustomDefault","tools.isValidJSON","isRequired","wrapIsRequired","convert","getHook_1","reduce","chainGetHooks","validate_1","chainTransforms","chainChangeHandlers","doInit","prevHook","nextHook","prevTransform","nextTransform","prevHandler","nextHandler","ImmutableClassType","PrimitiveType","NumericType","num","isFinite","ArrayType","ObjectType","doNothing","FunctionType","DateType","date","timestamp","getTime","toISOString","supportsDate","isNaN","struct","minutesOffset","isoDatePattern","exec","k","numericKeys","undefined","UTC","safeParseDate","AggregatedType","canBeUpdated","nestedTransaction","_shared","persistent","_handleChange","unset","dispose","shareAndListen","listen","share","SharedType","implicitObject","_onChange","builtins","String","Number","metatypes","getMetatype","_metatype","idx","resolveBuiltins","ChainableAttributeSpec","check","metadata","required","ref","emptyFunction","changed","eventMap","unsubscribe","subscribe","cloned","Type","attrDef","shared","inferType","createAttribute","from","createAttributesMixin","attributesDefinition","baseClassAttributes","myAttributes","_.transform","allAttributes","_.defaults","ConstructorsMixin","attrDefs","attrs","attr","Attributes","constructorsMixin","_attributesArray","createPropertyDescriptor","attrSpecs","eventsApi.EventMap","createWatcherFromRef","wrapWatcher","localEventsMixin","watcher","IOModelMixin","save","getEndpoint","ioMethod","isNew","id","fetch","read","destroy","_cidCounter","Model","idAttribute","extend","_attributes$","__Attributes$","diff","hasChanged","val","old","nullify","forEach","_attributesArray_1","copy","pinStore","errors","asJson","l","newModel","clear","a_logger","Attributes definition","a_fun","tools.transform","Symbol","ModelEntriesIterator","Collection","typeCheck","BaseModelAttributes","BaseModelAttributesCopy","IdAttribute","metatype","done","LinkedAttr","_error","_token","DefaultCollection","dynamicMixin","AttributeRefs","__ModelAttrRef","isMutableType","addAttributeLinks","_aquire","_free","convertAndAquire","_aggregationError","_itemEvents","sortElements","_comparator","sort","models","addIndex","index","removeIndex","updateIndex","previous","CollectionTransaction","logAggregationError","added","removed","added_1","_d","removed_1","_e","sorted","addTransaction","items","a_items","forceMerge","_byId","prevLength","a_items_1","item","appendElements","needSort","length_1","moveElements","sortOrMoveElements","ArrayMixin","mapFilter","res","doWhile","init","end","modelOrId","idOrObj","toPredicateFunction","m","firstMatch","find","entries","a_index","noOp","keys_1","keys_2","removeMany","toRemove","_removeFromIndex","_reallocate","silentOptions","emptySetTransaction","len","src","_reallocateEmpty","setTransaction","_prevById","prevModels","toAdd","orderKept","reusedCount","previous_1","_garbageCollect","children","children_1","freeAll","addedOrChanged","_count","CollectionRefsType","Refs","RefsCollection","_SubsetOf","Subset","itemEvents","comparator","aa","bb","_store","objOrId","count","elements","add","reset","enabled","liveUpdates","filter_1","_liveUpdates","updated","tslib_1.__assign","aggregated","a_elements","previousModels","toElements","previousModels_1","toDispose","recordsOrIds","notify","removeOne","LinkedIncludes","a_next","Argument","Attributes spec","records","parsed","toggle","parseReference","collectionRef","ModelRefType","theMemberOf","masterCollection","T","getMasterCollection","subsetOf","CollectionClass","SubsetOf","subsetOfBehavior","refs","toArray","SubsetOfCollection","resolvedWith","resolveRefs","delaySet","raw","addAll","defineSubsetCollection","memberOf","createSubset","subset","master","elements_1","tools.notEqual","Store","store","global","listenToOnce","DefaultModel","attrName","getMetadata","value_1","as","reject","onAbort","fn","Promise","a_resolve","a_reject","listName","method"],"mappings":"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"}